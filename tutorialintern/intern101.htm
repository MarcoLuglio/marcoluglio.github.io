<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Intern 101</title>
	<meta charset="utf-8" />
	<link rel="stylesheet" href="css/main.css" />
	<!--<script src='js/arrayIterator.js'></script>-->
	<script src='js/node.js'></script>
	<script src='js/index.js'></script>
	<!--<script src='js/token.js'></script>
	<script src='js/tokenSequence.js'></script>
	<script src='js/parser.js'></script>
	<script src='js/javaScriptParser.js'></script>-->
	<script src='js/highlightEnhancer.js'></script>
	<script src='js/documentReady.js'></script>
	<script src='js/init.js'></script>
</head>
<body>



<h1>Intern - The Missing Tutorial</h1>
<p>Work in Progress</p>


<section>
<h2>Index</h2>
<nav id="indice">
</nav>
</section>



<section>

<h2>What is Intern</h2>
<p><strong>Intern is a tool for unit and functional tests automation for web browsers.</strong> It depends on Selenium testing server or other third party testing servers like remote browser services. <strong>It can test any web page or web application,</strong> regardless of the language they where written in.</p>
<p>Intern is written in JavaScript + Dojo and requires Node.js. Its tests must be written using the same technologies. In addition to that, Selenium requires Java.</p>

<section>
<h3>Quick note about Selenium Server</h3>
<p>Selenium is older than Intern, and possesses several binding for other languages. This means it can be used along with popular IDE's such as Visual Studio or Eclipse, providing code completion and other convenient features that are absent when using JavaScript. Also, Firefox has an add-on that intuitively records any user interaction made in the page and can export these recorded actions as code.</p>
</section>

</section>



<section>
<h2>Documentation</h2>
<p>Honestly, intern documentation is a little scattered all around. I'll give an overview of intern here, and for more details, the good starting points are the <a href="http://theintern.io">Official web site</a> and the <a href="https://github.com/theintern">Official github</a></p>
</section>



<section>

<h2>Installing</h2>
<p>I'll show you how to setup Intern using a local Selenium Server instance.</p>

<h3>Setup Selenium Server</h3>
<ul>
	<li>Download and <strong>install</strong> <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java</a></li>
	<li>Download and <strong>unpack</strong> <a href="http://docs.seleniumhq.org/download/">selenium server</a> and the <strong><a href="http://docs.seleniumhq.org/download/">drivers too</a></strong>. They're further down <strong>in the same page</strong>. Tip: <strong>use the x86 IE driver</strong>, the x64 one has performance issues</li>
	<li>Add the downloaded drivers folder to the <code>PATH</code> <strong>environment variable</strong> (a logoff is required for this change to take effect)</li>
</ul>

<h3>Setup Intern</h3>
<ul>
	<li>Download and <strong>install</strong> <a href="http://nodejs.org/download/">Node.js</a></li>
	<li>Open a command prompt and go the <strong>root folder</strong> of your web site</li>
	<li>In the root of your web site, run the <strong>command</strong> <code class='terminal'>npm install intern --save-dev</code>. If you stumble upon an error like <q>ENOENT some folder</q>, you need to create the folder manually and run the command again. This will create a folder named <code>node_modules</code> in the root of your web site, containing all required dependencies. PS: For a different project, you may simply copy this folder instead of running <code>npm</code> again.</li>
	<li><strong>Copy the sample</strong> configuration file that comes with intern to the root of your folder. The sample configuration file can be found in <code>C:\path\to\yoursite\node_modules\intern\tests\example.intern.js</code></li>
	<li>
<strong>Add the functional and unit suites</strong> you need to run in the respective properties inside the file. They'll look something like this:
<div>
<p>config.js excerpt</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='objectDefinition'><span class='objectDelimiter'><span class='objectDelimiter'>{</span></span>

	<span class='comment lineComment'>// unit tests to run in each browser</span>
	<span class='propertyName'>suites</span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>
		<span class='string'>'path/relative/to/configfile/tests/unit/inputValidation'</span>
		<span class='arraySeparator'>,</span><span class='string'>'path/relative/to/configfile/tests/unit/sessionManager'</span>
	<span class='arrayDelimiter'>]</span></span></span><span class='objectSeparator'>,</span>

	<span class='comment lineComment'>// Functional test suite(s) to run in each browser once unit tests are completed</span>
	<span class='propertyName'>functionalSuites</span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>
		<span class='string'>'path/relative/to/configfile/functional/suites/changeProfile'</span>
		<span class='arraySeparator'>,</span><span class='string'>'path/relative/to/configfile/functional/suites/postStatus'</span>
	<span class='arrayDelimiter'>]</span></span></span>

<span class='objectDelimiter'>}</span></span></span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></code
>
</div>
	</li>
</ul>

<p>TODO See config file changes</p>
<h3>Running</h3>
<ul>
	<li><strong>Run the tests</strong> from the root folder of your web site with the following <strong>command</strong> <code class='terminal'>node_modules\.bin\intern-runner -config=path\to\config leaveRemoteOpen</code></li>
	<li>Optionally create a dedicated firefox profile to run your tests on running the command <code class='terminal'>firefox.exe -p</code></li>
	<li>Also, you can create shell scripts to start selenium and to run the tests. We currently run selenium with the following command line: <code class='terminal'>java -Dos.name=windows -jar selenium-server-standalone-2.44.0.jar -Dwebdriver.ie.driver=C:\path\to\IEDriverServer.exe -Dwebdriver.firefox.profile=selenium -Dwebdriver.log.file="c:\tmp\log.txt" -Dwebdriver.firefox.logfile="c:\tmp\fflog.txt"</code></li>
</ul>

<p>TODO Installing a web server of your preference - I'm not sure about the need of that</p>

</section>



<section>

<h2>Test Suites</h2>
<p>The test suites that we reference in the config file are defined in <a href="http://requirejs.org/docs/whyamd.html#amd"><abbr title="Asynchronous Module Definition">AMD</abbr></a> style. That is a way to <strong>avoid</strong> creating things in the <strong>global namespace.</strong></p>

<div>
<p><abbr title="Asynchronous Module Definition">AMD</abbr> overview</p>
<code class='javascript'
><span class='comment lineComment'>// <abbr title="Asynchronous Module Definition">AMD</abbr> module</span>
<span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class="arrayDelimiter">[</span>
	<span class='comment lineComment'>// import paths</span>
<span class="arrayDelimiter">]</span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class="argumentsDelimiter">(</span><span class='comment blockComment'>/* import names */</span></span><span class="argumentsDelimiter">)</span> {
	<span class='comment lineComment'>// actual code</span>
	<span class='keyword'>return</span> <span class='objectDefinition'><span class='objectDelimiter'>{</span><span class='objectDelimiter'>}</span></span><span class='statementSeparator'>;</span> <span class="comment lineComment">// usually return something from the <abbr title="Asynchronous Module Definition">AMD</abbr> module</span>
}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>The actual test suite imports at least two objects and optionally an assertion library. The assertion library is for convenience, since you can perform assertions and fail tests without it. More on that later.</p>

<div>
<p>testSuite.js</p>
<code class='javascript'
><span class='comment lineComment'>// if you don't understand everything in this code snippet, don't worry, it's all explained in the next example</span>
<span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>

	<span class='comment lineComment'>// base</span>
	<span class='string'>'intern!object'</span><span class='arraySeparator'>,</span>
	<span class='string'>'intern/chai!assert'</span><span class='arraySeparator'>,</span>

	<span class='comment lineComment'>// helpers</span>
	<span class='string'>'require'</span>

<span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'>

	<span class='comment lineComment'>// base</span>
	<span class='variableName'>registerSuite</span><span class='argumentsSeparator'>,</span> <span class='variableName'>assert</span><span class='argumentsSeparator'>,</span>

	<span class='comment lineComment'>// helpers</span>
	<span class='variableName'>require</span>

	</span><span class='argumentsDelimiter'>)</span> {

	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='functionName'>registerSuite</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='objectDefinition'><span class='objectDelimiter'>{</span>
		<span class='propertyName'>name</span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='string'>'sample test'</span></span><span class='objectSeparator'>,</span>
		<span class='propertyName'>login</span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
			<span class='keyword'>return</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span>
				<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='string'>'http://localhost'</span></span><span class='argumentsDelimiter'>)</span></span><span class='argumentsDelimiter'>)</span>
				<span class='comment lineComment'>// do something</span>
				<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
					<span class='functionName'>assert</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// assert something</span>
				}</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
		}</span>
	<span class='objectDelimiter'>}</span></span></span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

}</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>This is a lot of boilerplate to get started. Let's see what each line does.</p>

<div>
<p>testSuite.js</p>
<code class='javascript'
><span class='comment lineComment'>// yep, that's the explanation right here like promised ;)</span>
<span class='comment lineComment'>// <abbr title="Asynchronous Module Definition">AMD</abbr> only makes "define" available from the global namespace, everything else needs to be imported</span>
<span class='comment lineComment'>// "define" imports stuff to the scope of its callback function</span>
<span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>

	<span class='comment lineComment'>// import what you need inside here</span>
	<span class='comment lineComment'>// better keep this list organized and separate each group by a name and a space</span>
	<span class='comment lineComment'>// really helps when debugging a long list of imports like 15+ or so</span>

	<span class='comment lineComment'>// base</span>
	<span class='string'>'intern!object'</span><span class='arraySeparator'>,</span> <span class='comment lineComment'>// test suite registry, all test suites need to import this</span>
	<span class='string'>'intern/chai!assert'</span><span class='arraySeparator'>,</span> <span class='comment lineComment'>// assertion library</span>

	<span class='comment lineComment'>// helpers</span>
	<span class='string'>'require'</span>

<span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span>

	<span class='comment lineComment'>// and give names to the imported stuff here</span>
	<span class='comment lineComment'>// they must follow the same order of what's listed above</span>

	<span class='comment lineComment'>// base</span>
	<span class='variableName'>registerSuite</span><span class='argumentsSeparator'>,</span> <span class='variableName'>assert</span><span class='argumentsSeparator'>,</span>

	<span class='comment lineComment'>// helpers</span>
	<span class='variableName'>require</span>

	<span class='argumentsDelimiter'>)</span> {

	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// <abbr title="Asynchronous Module Definition">AMD</abbr> plays nice with strict mode</span>

	<span class='comment lineComment'>// create a test suite by calling registerSuite function and passing in an object</span>
	<span class='functionName'>registerSuite</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='objectDefinition'><span class='objectDelimiter'>{</span>

		<span class='propertyName'>name</span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='string'>'sample test'</span></span><span class='objectSeparator'>,</span> <span class='comment lineComment'>// the name property of the passed object gives the test suite a name for the logs</span>

		<span class='propertyName'>login</span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> { <span class='comment lineComment'>// and each method inside the object is a test</span>
			<span class='comment lineComment'>// inside a test function, "this.remote" is mapped to an instance of <a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a>, more on that later</span>
			<span class='keyword'>return</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span>
				<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='string'>'http://localhost'</span></span><span class='argumentsDelimiter'>)</span></span><span class='argumentsDelimiter'>)</span>
				<span class='comment lineComment'>// do something</span>
				<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
					<span class='functionName'>assert</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// assert something</span>
				}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
		}</span>

	<span class='objectDelimiter'>}</span></span></span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>As the test list grows bigger, it is not manageable to define each and every test in the same file, so what I recommend is to <strong>separate each test in a different file</strong> with <abbr title="Asynchronous Module Definition">AMD</abbr> like this.</p>

<div>
<p>manageableTestSuite.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>

	<span class='comment lineComment'>// base</span>
	<span class='string'>'intern!object'</span><span class='arraySeparator'>,</span>

	<strong><span class='comment lineComment'>// tests - check next code block for how these files are structured</span>
	<span class='string'>'path/relative/to/this/file/sanityTest'</span><span class='arraySeparator'>,</span>
	<span class='string'>'path/relative/to/this/file/realityTest'</span></strong>

<span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'>

	<span class='comment lineComment'>// base</span>
	<span class='variableName'>registerSuite</span><span class='argumentsSeparator'>,</span>

	<strong><span class='comment lineComment'>// tests</span>
	<span class='variableName'>sanityTest</span><span class='argumentsSeparator'>,</span> <span class='variableName'>realityTest</span></strong>

	</span><span class='argumentsDelimiter'>)</span> {

	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='functionName'>registerSuite</span><span class='argumentsDelimiter'>(</span><span class='functionArguments'><span class='objectDefinition'><span class='objectDelimiter'>{</span>
		<span class='propertyName'>name</span><span class='propertySeparator'>:</span> <span class='string'>'load chrome extension'</span><span class='objectSeparator'>,</span>
		<strong><span class='comment lineComment'>// function references instead of function definitions (lambdas)</span></strong>
		<span class='propertyName'><span class='string'>'sanity test'</span></span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='functionReference'><strong><span class='propertyValue variableName'>sanityTest</span></strong></span></span><span class='objectSeparator'>,</span>
		<span class='propertyName'><span class='string'>'reality test'</span></span><span class='propertySeparator'>:</span> <span class='propertyValue'><span class='functionReference'><strong><span class='propertyValue variableName'>realityTest</span></strong></span></span>
	<span class='objectDelimiter'>}</span></span></span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

}</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

And each test would be something like:

<div>
<p>manageableTest.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>

	<span class='comment lineComment'>// base</span>
	<span class='string'>'intern/chai!assert'</span><span class='arraySeparator'>,</span>
	<span class='string'>'require'</span><span class='arraySeparator'>,</span>

	<span class='comment lineComment'>// resources</span>
	<span class='string'>'path/relative/to/this/file/resources'</span>

<span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span>

	<span class='comment lineComment'>// base</span>
	<span class='variableName'>assert</span><span class='argumentsSeparator'>,</span> <span class='variableName'>require</span><span class='argumentsSeparator'>,</span>

	<span class='comment lineComment'>// resources</span>
	<span class='variableName'>resources</span>

	<span class='argumentsDelimiter'>)</span> {

	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<strong><span class='comment lineComment'>// return the test function from the module</span>
	<span class='keyword'>return</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
		<span class='comment lineComment'>// we can still refer to this.remote, like in the previous example</span>
		<span class='keyword'>return</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span></strong>
			<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='string'>'http://localhost'</span><span class='argumentsDelimiter'>)</span><span class='argumentsDelimiter'>)</span>
			<span class='comment lineComment'>// do something</span>
			<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
				<span class='functionName'>assert</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// assert something</span>
			}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
	<strong>}</strong>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

</section>



<section>

<h2>Async Methods and Promises</h2>
<p>Most (if not all) of <code class='javascript'>leadfoot/Command</code> <strong>methods are asynchronous,</strong> so they <strong>return promises.</strong> If all you have to do is to call these methods in succession, you won't face many difficulties. But for more advanced scenarios, you will need a little bit more of knowledge over how promises work.</p>
<p>Promises exist in several languages such as C++, C# and Java in one form or another. Sometimes they require an auxiliary class called <code>Future</code>, sometimes they are called <code>Task</code>s, sometimes they are called <code>Deferred</code>s. They are objects that will contain a value in the future, and we may register a callback function to run when the promise receives this value. In JavaScript, by immediately returning a <code>promise</code> from a method that will take long to return a value, and registering a callback to execute later on, we avoid blocking the current thread while idle.</p>
<p>The process of setting a value to the <code>promise</code> is called <strong>resolving</strong> the <code>promise</code>. If the <code>promise</code> cannot receive a value anymore, it is <strong>rejected with a reason.</strong> Resolving or rejecting a <code>promise</code> is called <strong>fulfilling</strong> the <code>promise</code>. In the example below, we can see the basics of working with promises in JavaScript.</p>

<div>
<p>Promises overview</p>
<code class='javascript'
><span class='comment lineComment'>// call an async function (a method that returns a promise)</span>
<span class='keyword'>var</span> <span class="variableName">promise</span> <span class='operator assignmentOperator'>=</span> <span class='functionName'>asyncFunction</span>()<span class='statementSeparator'>;</span>

<span class='comment lineComment'>// call the promise "then" method</span>
<span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) { <span class='comment lineComment'>// pass a callback as argument</span>
	<span class='comment lineComment'>// do something with the value here</span>
})<span class='statementSeparator'>;</span>

<span class='keyword'>return</span> promise;
</code>
</div>

<p>Saving the promise inside a variable is not always required, and in certain cases we can omit it.</p>

<div>
<p>Promises inline short syntax</p>
<code class='javascript'
><span class='comment lineComment'>// call an async function and the "then" method from the returned value</span>
<span class='keyword'>return</span> <span class='functionName'>asyncFunction</span>().<span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) {
	<span class='comment lineComment'>// do something with the value here</span>
})<span class='statementSeparator'>;</span>
</code>
</div>

<p>There's a more readable syntax for this however. In this simple example it won't do much for us, but it will become more important later on, we we see another topic called promises chaining.</p>

<p>TODO see how other languages behave about breaking calls in multiple lines.</p>

<div>
<p>Promises more readable short syntax</p>
<code class='javascript'
><span class='comment lineComment'>// call an async function</span>
<span class='keyword'>return</span> <span class='functionName'>asyncFunction</span>() <span class='comment lineComment'>// do not end this line with ";"</span>

<span class='comment lineComment'>// break the "then" method call in another line</span>
.<span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) { <span class='comment lineComment'>// begin this line with "."</span>
	<span class='comment lineComment'>// do something with the value here</span>
})<span class='statementSeparator'>;</span>
</code>
</div>

<p>Like mentioned above, promises are not always resolved. Sometimes something goes wrong and they are rejected. We can perform an action in case they are rejected by passing in a second callback, like this.</p>

<div>
<p>Promises callbacks</p>
<code class='javascript'
><span class='comment lineComment'>// call an async function</span>
<span class='functionName'>asyncFunction</span>()

<span class='comment lineComment'>// register the callbacks</span>
.<span class="objectMethod">then</span>(
	<span class='keyword'>function</span>(value) { <span class='exceptionStub'>...</span> }, <span class='comment lineComment'>// pass the success callback</span>
	<span class='keyword'>function</span>(reason) { <span class='exceptionStub'>...</span> } <span class='comment lineComment'>// and the error callback</span>
)<span class='statementSeparator'>;</span>
</code>
</div>

<p>Ok, we're ready to see a more complete example.</p>

<div>
<p>Basic example of working with promises</p>
<code class='javascript'
><span class='comment lineComment'>// dojo/request makes http requests</span>
<span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span><span class='string'>'dojo/request'</span><span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>request</span><span class='argumentsDelimiter'>)</span> {
	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='comment lineComment'>// calling this method may take long to complete</span>
	<span class='comment lineComment'>// but it immediately returns a promise</span>
	<span class='comment lineComment'>// and fulfills it only after receiving a response</span>
	<span class='keyword'>return</span> request(<span class='string'>'http://webservice.com/lerelere'</span>)

	<span class='comment lineComment'>// we can get the response value by calling the then function</span>
	<span class='operator memberAccessOperator'>.</span><span class="objectMethod">then</span>(
		<span class='keyword'>function</span>(result) { <span class='keyword exceptionStub'>...</span> }, <span class='comment lineComment'>// promise was resolved \o/ run this callback</span>
		<span class='keyword'>function</span>(reason) { <span class='keyword exceptionStub'>...</span> } <span class='comment lineComment'>// promise was rejected ;( run this callback instead</span>
	)<span class='statementSeparator'>;</span>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>And now is a good time to show another concept of working with promises in JavaScript. A <code class.javascript>promise.then</code> call always returns another <code class="javascript">promise</code>. This allows us to chain multiple <code class="javascript">then</code> calls, that will wait for the previous <code class="javascript">promise</code> to be resolved. This way we can order the execution of async code.</p>

<div>
<p>Promise chaining</p>
<code class='javascript'
><span class='comment lineComment'>// returns the last promise of the chain</span>
<span class='keyword'>return</span> <span class='functionName'>asyncFunction</span>()

<strong><span class='comment lineComment'>// first promise callback</span>
<span class='operator memberAccessOperator'>.</span><span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) { <span class='keyword exceptionStub'>...</span> })</strong>

<strong><span class='comment lineComment'>// second promise callback</span>
<span class='comment lineComment'>// it will only run when the previous promise is resolved</span>
<span class='operator memberAccessOperator'>.</span><span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) { <span class='keyword exceptionStub'>...</span> })</strong><span class='statementSeparator'>;</span>
</code>
</div>

<p>Another more clearer but less compact way of writing the above code would be to explicitly store each promise in a variable.</p>

<div>
<p>Promise chaining</p>
<code class='javascript'
><span class='keyword'>var</span> <span class='variableName'>promise1</span> = <span class='keyword null'>null</span><span class='statementSeparator'>;</span>
<span class='keyword'>var</span> <span class='variableName'>promise2</span> = <span class='keyword null'>null</span><span class='statementSeparator'>;</span>
<span class='keyword'>var</span> <span class='variableName'>promise3</span> = <span class='keyword null'>null</span><span class='statementSeparator'>;</span>

<span class='variableName'>promise1</span> = <span class='functionName'>asyncFunction</span>()<span class='statementSeparator'>;</span>
<span class='variableName'>promise2</span> = <strong><span class='variableName'>promise1</span><span class='operator memberAccessOperator'>.</span><span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) { <span class='keyword exceptionStub'>...</span> })</strong><span class='statementSeparator'>;</span> <strong><span class='comment lineComment'>// first promise callback</span></strong>
<span class='variableName'>promise3</span> = <strong><span class='variableName'>promise2</span><span class='operator memberAccessOperator'>.</span><span class="objectMethod">then</span>(<span class='keyword'>function</span>(value) { <span class='keyword exceptionStub'>...</span> })</strong><span class='statementSeparator'>;</span> <strong><span class='comment lineComment'>// second promise callback, it will only run when the previous promise is resolved</span></strong>

<span class='comment lineComment'>// returns the last promise of the chain</span>
<span class='keyword'>return</span> <span class='variableName'>promise3</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>So far we have not mixed sync and async code on purpose. I'm going to show a very simple scenario, since our focus is to learn how to use intern.</p>

<div>
<p>Async demonstration</p>
<code class='javascript'
><span class='comment lineComment'>// </span>
// async the console.log
</code>
</div>

<div>
<p>manageableTest.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span><span class='string'>'dojo/Deferred'</span><span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>Deferred</span><span class='argumentsDelimiter'>)</span> {
	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='keyword'>function</span> lengthyOperation() {

		<span class='comment lineComment'>// create a promise</span>
		<span class='keyword'>var</span> promise = new Deferred()<span class='statementSeparator'>;</span>

		<span class='comment lineComment'>// do lengthy operation here</span>
		<span class='keyword'>var</span> response = ajax(<span class='string'>'http://webservice.com/lerelere'</span>);
		response.addEventListener(<span class='string'>'workDone'</span>, <span class='keyword'>function</span>(result) {
			promise.resolve(result)<span class='statementSeparator'>;</span>
		})<span class='statementSeparator'>;</span>
		response.addEventListener(<span class='string'>'error'</span>, <span class='keyword'>function</span>(error) {
			promise.reject(error)<span class='statementSeparator'>;</span>
		})<span class='statementSeparator'>;</span>

		<span class='comment lineComment'>// return the unfulfilled promise immediately</span>
		<span class='keyword'>return</span> promise<span class='statementSeparator'>;</span>

	}

	lengthyOperation()

	.then(
		<span class='keyword'>function</span>(result) {  }, <span class='comment lineComment'>// promise was resolved \o/, run this</span>
		<span class='keyword'>function</span>(reason) {  } <span class='comment lineComment'>// promise was rejected, run this instead</span>
	)<span class='statementSeparator'>;</span>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>An async method returns a thenable, that is, an object with a <code class="javascript">then</code> method that you can pass in a callback function. Native JavaScript <code class="javascript">Promise</code>s and <code class="javascript">dojo/Deferred</code>s are examples of thenables. Inside the callback that we pass to the <code class="javascript">then</code> method, we can retrieve the value of the promise once it is resolved.</p>

<p>To be done :/</p>
<ul>
	<li>Promises chaining</li>
	<li>Promises flow helpers - all, etc.</li>
	<li>Thenables</li>
	<li>Commands vs. Elements usage</li>
</ul>

</section>



<section>

<h2>Test Functions and Main Test Flow</h2>
<p>Intern <abbr title="Application Programming Interface">API</abbr> is asynchronous. Every intern method call returns a <code>promise</code> that will be fulfilled later. <strong>We must also return a <code>promise</code> from a test function</strong> that will be used by the test suite to tell whether the test has succeeded or failed.</p>

<p>When we use <code><a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></code> instances, we usually don't worry ourselves about this, because <strong>commands wrap all the required functionality.</strong> All previous test function examples return <code><a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></code> instances because of this. They contain a <strong>built-in <code>promise</code></strong> that is used by the test suite.</p>

<p>If by any reason we don't want to, or cannot return a <code><a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></code> instance, we may return any other kind of <code>promise</code>. Dojo implementation is <code><a href='http://dojotoolkit.org/reference-guide/1.10/dojo/Deferred.html'>dojo/Deferred</a></code>, but it also has <code><a href='http://dojotoolkit.org/reference-guide/1.10/dojo/promise/all.html'>dojo/promise/all</a></code>, which allows us to wait for several parallel asynchronous processes. In fact, <strong>any object that has a then method</strong> can be used.</p>

<p>Let's see a couple of code excerpts that exemplify theses cases.</p>

<div>
<p>built in promise with command</p>
<code class='javascript'
><strong><span class='keyword'>return</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span> <span class='comment lineComment'>// implicit promise inside command (this<span class='operator memberAccessOperator'>.</span>remote)</span></strong>
	<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='string'>'http://localhost'</span><span class='argumentsDelimiter'>)</span><span class='argumentsDelimiter'>)</span>
	<span class='comment lineComment'>// do something</span>
	<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
		<span class='functionName'>assert</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// assert something</span>
	}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<p>talk about command chaining and failure callback before showing explicit promises examples</p>

<div>
<p>explicit promise</p>
<code class='javascript'
><strong><span class='keyword'>var</span> <span class='variableName'>promise</span> = <span class='keyword'>new</span> <span class='functionName'>Deferred</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// explicit promise</span></strong>

<span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span>
	<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='string'>'http://localhost'</span><span class='argumentsDelimiter'>)</span><span class='argumentsDelimiter'>)</span>
	<span class='comment lineComment'>// do something</span>
	<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
		<span class='functionName'>assert</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// assert something</span>
	}<span class='argumentsDelimiter'>)</span>
	<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span>
		<span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> { <strong><span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>resolve</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong> }<span class='argumentsSeparator'>,</span> <strong><span class='comment lineComment'>// success callback</span></strong>
		<span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span> { <strong><span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>reject</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong> } <strong><span class='comment lineComment'>// failure callback</span></strong>
	<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

<strong><span class='keyword'>return</span> <span class='variableName'>promise</span><span class='statementSeparator'>;</span></strong>
</code>
</div>

<div>
<p>implicit promise with parallel commands</p>
<code class='javascript'
><span class='keyword'>var</span> <span class='variableName'>pageCommand</span> <span class='operator assignmentOperator'>=</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='string'>'http://localhost'</span><span class='argumentsDelimiter'>)</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

<span class='comment lineComment'>// calling any method of command will return a new command instance</span>
<span class='comment lineComment'>// so multiple method calls will return multiple command instances</span>
<span class='keyword'>var</span> <span class='variableName'>command1</span> <span class='operator assignmentOperator'>=</span> <span class='variableName'>pageCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>findById</span><span class='argumentsDelimiter'>(</span><span class='string'>'someId'</span><span class='argumentsDelimiter'>)</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>getAttribute</span><span class='argumentsDelimiter'>(</span><span class='string'>'for'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
<span class='keyword'>var</span> <span class='variableName'>command2</span> <span class='operator assignmentOperator'>=</span> <span class='variableName'>pageCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>findById</span><span class='argumentsDelimiter'>(</span><span class='string'>'someOtherId'</span><span class='argumentsDelimiter'>)</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>getAttribute</span><span class='argumentsDelimiter'>(</span><span class='string'>'for'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

<strong><span class='comment lineComment'>// "all" helper will wait for all passed promises to be fulfilled before calling its own "then" callbacks</span>
<span class='comment lineComment'>// because commands have implicit promises, we pass them directly to the "all" helper</span>
<span class='comment lineComment'>// all([...]).then callback will receive an array with the results of each promise</span>
<span class='comment lineComment'>// following this structure [forAttribute1, forAttribute2]</span>
<span class='keyword'>return</span> <span class='functionName'>all</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span><span class='variableName'>command1</span><span class='arraySeparator'>,</span> <span class='variableName'>command2</span><span class='arrayDelimiter'>]</span></span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// implicit promise inside "all"</span></strong>
</code>
</div>

<div>
<p>explicit promise with parallel commands</p>
<code class='javascript'
><strong><span class='keyword'>var</span> <span class='variableName'>promise</span> <span class='operator assignmentOperator'>=</span> <span class='keyword'>new</span> <span class='functionName'>Deferred</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// explicit promise</span></strong>
<span class='keyword'>var</span> <span class='variableName'>pageCommand</span> <span class='operator assignmentOperator'>=</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>get</span><span class='argumentsDelimiter'>(</span><span class='functionName'>require</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>toUrl</span><span class='argumentsDelimiter'>(</span><span class='string'>'http://localhost'</span><span class='argumentsDelimiter'>)</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

<span class='comment lineComment'>// calling any method of command will return a new command instance</span>
<span class='comment lineComment'>// so multiple method calls will return multiple command instances</span>
<span class='keyword'>var</span> <span class='variableName'>command1</span> <span class='operator assignmentOperator'>=</span> <span class='variableName'>pageCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>findById</span><span class='argumentsDelimiter'>(</span><span class='string'>'someId'</span><span class='argumentsDelimiter'>)</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>getAttribute</span><span class='argumentsDelimiter'>(</span><span class='string'>'for'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
<span class='keyword'>var</span> <span class='variableName'>command2</span> <span class='operator assignmentOperator'>=</span> <span class='variableName'>pageCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>findById</span><span class='argumentsDelimiter'>(</span><span class='string'>'someOtherId'</span><span class='argumentsDelimiter'>)</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>getAttribute</span><span class='argumentsDelimiter'>(</span><span class='string'>'for'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

<span class='comment lineComment'>// "all" helper will wait for all passed promises to be fulfilled before calling its own "then" callbacks</span>
<span class='comment lineComment'>// because commands have implicit promises, we pass them directly to the "all" helper</span>
<span class='functionName'>all</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span><span class='variableName'>command1</span><span class='arraySeparator'>,</span> <span class='variableName'>command2</span><span class='arrayDelimiter'>]</span></span><span class='argumentsDelimiter'>)</span>
	<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span>
		<span class='comment lineComment'>// forAttributes is an array with the results of each promise</span>
		<span class='comment lineComment'>// following this structure [forAttribute1, forAttribute2]</span>
		<span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>forAttributes</span><span class='argumentsDelimiter'>)</span> { <strong><span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>resolve</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong> }<span class='argumentsSeparator'>,</span> <strong><span class='comment lineComment'>// success callback</span></strong>
		<span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span> { <strong><span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>reject</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong> } <strong><span class='comment lineComment'>// failure callback</span></strong>
	<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

<strong><span class='keyword'>return</span> <span class='variableName'>promise</span><span class='statementSeparator'>;</span></strong>
</code>
</div>



talk about all
command chaining, multiple commands, execute, pollUntil
then success/fail callback
then helpers + function definition
assert

</section>



<section>

<h2>Extending Native Command</h2>
<p>We need to extend the <code><a href='http://theintern.github.io/leadfoot/Command.html'>leadfoot/Command</a></code> according to the docs, and then create an instance passing a <code><a href='http://theintern.github.io/leadfoot/Session.html'>leadfoot/Session</a></code> instance.</p>

<div>
<p>StxCommand.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>

	<span class='comment lineComment'>// path to the native <a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></span>
	<span class='comment lineComment'>// it's a node module (common js format), and this format is not directly compatible with AMD</span>
	<span class='comment lineComment'>// so we use <a href='http://dojotoolkit.org/reference-guide/1.10/dojo/node.html'>dojo/node! plug-in</a> to load it</span>
	<span class='string'>'intern/dojo/node!leadfoot/Command'</span><span class='arraySeparator'>,</span>

	<span class='comment lineComment'>// method we want to add to the command</span>
	<span class='string'>'./newMethod'</span>

<span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>Command</span><span class='argumentsSeparator'>,</span> <span class='variableName'>newMethod</span><span class='argumentsDelimiter'>)</span> {
	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='comment lineComment'>// <a href='http://theintern.github.io/leadfoot/Command.html'>inheritance as recommended</a> according to the docs</span>
	<span class='keyword'>function</span> <span class='functionName'>StxCommand</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
		<span class='variableName'>Command</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>apply</span><span class='argumentsDelimiter'>(</span><span class='keyword this'>this</span><span class='argumentsSeparator'>,</span> <span class='variableName'>arguments</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
	}
	<span class='functionName'>StxCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>prototype</span> <span class='operator assignmentOperator'>=</span> <span class='variableName'>Object</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>create</span><span class='argumentsDelimiter'>(</span><span class='variableName'>Command</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>prototype</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
	<span class='functionName'>StxCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>prototype</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>constructor</span> <span class='operator assignmentOperator'>=</span> <span class='functionName'>StxCommand</span><span class='statementSeparator'>;</span>

	<span class='comment lineComment'>// adding new method</span>
	<span class='functionName'>StxCommand</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>prototype</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>newMethod</span> <span class='operator assignmentOperator'>=</span> <span class='variableName'>newMethod</span><span class='statementSeparator'>;</span>

	<span class='comment lineComment'>// return extended command from the module</span>
	<span class='keyword'>return</span> <span class='functionName'>StxCommand</span><span class='statementSeparator'>;</span>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<div>
<p>newMethod.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span><span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<strong><span class='comment lineComment'>// boilerplate for new methods</span></strong>
	<strong><span class='keyword'>return</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>someParameter</span><span class='argumentsDelimiter'>)</span> { <span class='comment lineComment'>// method signature</span>
		<span class='keyword'>return</span> <span class='keyword'>new</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>constructor</span><span class='argumentsDelimiter'>(</span><span class='keyword this'>this</span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
			<span class='keyword'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>parent</span></strong>
				<span class='comment lineComment'>// actual method code</span>
				<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
					<span class='variableName'>console</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>log</span><span class='argumentsDelimiter'>(</span><span class='variableName'>someParameter</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
				}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
		<strong>}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
	}<span class='statementSeparator'>;</span></strong>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

<div>
<p>extendedCommandTest.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span>

	<span class='comment lineComment'>// base</span>
	<span class='string'>'intern/chai!assert'</span><span class='arraySeparator'>,</span>
	<span class='string'>'require'</span><span class='arraySeparator'>,</span>
	<strong><span class='string'>'path/relative/to/this/file/StxCommand'</span><span class='arraySeparator'>,</span></strong>

	<span class='comment lineComment'>// resources</span>
	<span class='string'>'path/relative/to/this/file/resources'</span>

<span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span>

	<span class='comment lineComment'>// base</span>
	<span class='variableName'>assert</span><span class='argumentsSeparator'>,</span> <span class='variableName'>require</span><span class='argumentsSeparator'>,</span> <strong><span class='variableName'>StxCommand</span></strong><span class='argumentsSeparator'>,</span>

	<span class='comment lineComment'>// resources</span>
	<span class='variableName'>resources</span>

	<span class='argumentsDelimiter'>)</span> {

	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='comment lineComment'>// return the test function</span>
	<span class='keyword'>return</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
		<strong><span class='keyword'>var</span> <span class='variableName'>stxRemote</span> <span class='operator assignmentOperator'>=</span> <span class='keyword'>new</span> <span class='functionName'>StxCommand</span><span class='argumentsDelimiter'>(</span><span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>remote</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>session</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
		<span class='keyword'>return</span> <span class='variableName'>stxRemote</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>newMethod</span><span class='argumentsDelimiter'>(</span><span class='string'>'done!'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span> <span class='comment lineComment'>// because StxCommand inherits from <a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a>, it also contains an implicit promise</span></strong>
	}

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

</section>



<section>

<h2>Refining Extended Command</h2>

<p>For each method that we add to the command, we can follow a few good practices that will ensure that the tests execution remains fast and debuggable. We can implement a simple timer and an error management block that will prevent the tests from hanging for too long.</p>

<div>
<p>newMethod.js</p>
<code class='javascript'
><span class='functionName'>define</span><span class='argumentsDelimiter'>(</span><span class='arrayDefinition'><span class='arrayDelimiter'>[</span><span class='arrayDelimiter'>]</span></span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
	<span class='string'>'use strict'</span><span class='statementSeparator'>;</span>

	<span class='keyword'>return</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>someParameter</span><span class='argumentsDelimiter'>)</span> {
		<span class='keyword'>return</span> <span class='keyword'>new</span> <span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>constructor</span><span class='argumentsDelimiter'>(</span><span class='keyword this'>this</span><span class='argumentsSeparator'>,</span> <span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {

			<strong><span class='comment lineComment'>// explicit promise used to give us more freedom to <a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a> usage</span>
			<span class='comment lineComment'>// this is what we'll return from the test function and it's what</span>
			<span class='comment lineComment'>// will act as a semaphore for the test suite</span>
			<span class='comment lineComment'>// when the promise fulfills, the test is marked as completed</span>
			<span class='comment lineComment'>// if the promise is resolved, the test is considered successful</span>
			<span class='comment lineComment'>// otherwise, if the promise is rejected, the test will fail</span>
			<span class='keyword'>var</span> <span class='variableName'>promise</span> <span class='operator assignmentOperator'>=</span> <span class='keyword'>new</span> <span class='variableName'>Deferred</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong>

			<strong><span class='comment lineComment'>// the test suite doesn't knows about errors thrown from the code</span>
			<span class='comment lineComment'>// if that happens, the test will simply hang until the timeout is reached</span>
			<span class='comment lineComment'>// the only way to communicate errors to the test suite is to reject the returned promise</span>
			<span class='comment lineComment'>// when we use the <a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a> built-in promise, this is done for us automatically</span>
			<span class='comment lineComment'>// when we don't, we must do it manually in the catch block below</span>
			<span class='keyword'>try</span> {</strong>

				<span class='keyword this'>this</span><span class='operator memberAccessOperator'>.</span><span class='objectProperty'>parent</span>

					<span class='comment lineComment'>// command timeout to fail, otherwise we may need to wait for the entire test timeout, which may take a long time</span>
					<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>getTimeout</span><span class='argumentsDelimiter'>(</span><span class='string'>'implicit'</span><span class='argumentsDelimiter'>)</span> <span class='comment lineComment'>// checks if a timeout has been set but the native api</span>
					<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>timeout</span><span class='argumentsDelimiter'>)</span> { <span class='comment lineComment'>// if not we specify our own</span>
						<span class='keyword'>if</span> <span class='argumentsDelimiter'>(</span><span class='operator notOperator'>!</span><span class='variableName'>timeout</span><span class='argumentsDelimiter'>)</span> {
							<span class='variableName'>timeout</span> <span class='operator assignmentOperator'>=</span> <span class='number'>5000</span><span class='statementSeparator'>;</span>
						}
						<strong><span class='functionName'>setTimeout</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> { <span class='comment lineComment'>//  use the timeout for our entire method</span>
							<span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>reject</span><span class='argumentsDelimiter'>(</span><span class='string'>'new method timed out'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
						}<span class='argumentsSeparator'>,</span> <span class='variableName'>timeout</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong>
					}<span class='argumentsDelimiter'>)</span>

					<span class='comment lineComment'>// actual method logic</span>
					<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span><span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> {
						<span class='variableName'>console</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>log</span><span class='argumentsDelimiter'>(</span><span class='string'>'new method'</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
					}<span class='argumentsDelimiter'>)</span>

					<span class='comment lineComment'>// we usually only pass the first parameter to the then function</span>
					<span class='comment lineComment'>// which is the success callback, but it accepts a second callback, which is the failure callback<span class='operator memberAccessOperator'>.</span></span>
					<span class='comment lineComment'>// If any error is thrown in the command chain before this "then", the error callback <span class='keyword'>function</span> is executed</span>
					<span class='operator memberAccessOperator'>.</span><span class='objectMethod'>then</span><span class='argumentsDelimiter'>(</span>
						<strong><span class='comment lineComment'>// solves the explicit promise to tell the test suite that we're done and it may proceed to the next test</span></strong>
						<span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='argumentsDelimiter'>)</span> { <strong><span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>resolve</span><span class='argumentsDelimiter'>(</span><span class='boolean'>true</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong> }<span class='argumentsSeparator'>,</span>
						<strong><span class='comment lineComment'>// or rejects the explicit promise in case of failure inside the command chain</span></strong>
						<span class='keyword'>function</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span> { <strong><span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>reject</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span></strong> }
					<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>

			<strong>} <span class='keyword'>catch</span> <span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span> {
				<span class='comment lineComment'>// like mentioned above, in case of errors, we reject the explicit promise to communicate to the test suite that</span>
				<span class='comment lineComment'>// the test has failed</span>
				<span class='variableName'>promise</span><span class='operator memberAccessOperator'>.</span><span class='objectMethod'>reject</span><span class='argumentsDelimiter'>(</span><span class='variableName'>error</span><span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
			}

			<span class='comment lineComment'>// always return the explicit promise, regardless of what happens</span>
			<span class='keyword'>return</span> <span class='variableName'>promise</span><span class='statementSeparator'>;</span></strong>

		}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
	}<span class='statementSeparator'>;</span>

}<span class='argumentsDelimiter'>)</span><span class='statementSeparator'>;</span>
</code>
</div>

</section>



</body>
</html>