<!DOCTYPE html>
<html
	xmlns='http://www.w3.org/1999/xhtml'
	lang='en'
	xml:lang='en'
	>
<head>
	<title>Intern 101 - JavaScript Testing</title>
	<meta charset='utf-8' />
	<link rel='stylesheet' href='../tutorialjs/css/main.css' />
	<script src='../tutorialjs/js/utils.js'></script>
	<script src='../tutorialjs/js/index.js'></script>
	<script src='../tutorialjs/js/highlighter.js'></script>
	<script src='../tutorialjs/js/home.js'></script>
</head>
<body>



<h1>Intern - The Missing Tutorial</h1>

<p><strong>WORK IN PROGRESS ;)</strong></p>



<section>

<h2>Index</h2>
<nav id="indice">
</nav>

</section>



<section>

<h2>What is Intern</h2>
<p><strong>Intern is a tool for unit and functional tests automation for web browsers.</strong> It depends on Selenium testing server or other third party testing servers like remote browser services. <strong>It can test any web page or web application,</strong> regardless of the language they where written in.</p>
<p>Intern is written in JavaScript + Dojo and requires Node.js. Its tests must be written using the same technologies. In addition to that, Selenium requires Java.</p>

<section>
<h3>Quick note about Selenium Server</h3>
<p>Selenium is older than Intern, and possesses several binding for other languages. This means it can be used along with popular IDE's such as Visual Studio or Eclipse, providing code completion and other convenient features that are absent when using JavaScript. Also, Firefox has an add-on that intuitively records any user interaction made in the page and can export these recorded actions as code.</p>
</section>

</section>



<section>
<h2>Documentation</h2>
<p>Honestly, intern documentation is a little scattered all around. I'll give an overview of intern here, and for more details, the good starting points are the <a href="http://theintern.io">Official web site</a> and the <a href="https://github.com/theintern">Official github</a></p>
</section>



<section>

<h2>Installing</h2>
<p>I'll show you how to setup Intern using a local Selenium Server instance.</p>

<h3>Setup Selenium Server</h3>
<ul>
	<li>Download and <strong>install</strong> <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Java</a></li>
	<li>Download and <strong>unpack</strong> <a href="http://docs.seleniumhq.org/download/">selenium server</a> and the <strong><a href="http://docs.seleniumhq.org/download/">drivers too</a></strong>. They're further down <strong>in the same page</strong>. Tip: <strong>use the x86 IE driver</strong>, the x64 one has performance issues</li>
	<li>Add the downloaded drivers folder to the <code>PATH</code> <strong>environment variable</strong> (a logoff is required for this change to take effect)</li>
</ul>

<h3>Setup Intern</h3>
<ul>
	<li>Download and <strong>install</strong> <a href="http://nodejs.org/download/">Node.js</a></li>
	<li>Open a command prompt and go the <strong>root folder</strong> of your web site</li>
	<li>In the root of your web site, run the <strong>command</strong> <code class='terminal'>npm install intern --save-dev</code>. If you stumble upon an error like <q>ENOENT some folder</q>, you need to create the folder manually and run the command again. This will create a folder named <code>node_modules</code> in the root of your web site, containing all required dependencies. PS: For a different project, you may simply copy this folder instead of running <code>npm</code> again.</li>
	<li><strong>Copy the sample</strong> configuration file that comes with intern to the root of your folder. The sample configuration file can be found in <code>C:\path\to\yoursite\node_modules\intern\tests\example.intern.js</code></li>
	<li>
<strong>Add the functional and unit suites</strong> you need to run in the respective properties inside the file. They'll look something like this:
<div class='codeblock'>
<p>config.js excerpt</p>
<code class='javascript'
>define({

	// unit tests to run in each browser
	suites: [
		'path/relative/to/configfile/tests/unit/inputValidation'
		,'path/relative/to/configfile/tests/unit/sessionManager'
	],

	// Functional test suite(s) to run in each browser once unit tests are completed
	functionalSuites: [
		'path/relative/to/configfile/functional/suites/changeProfile'
		, 'path/relative/to/configfile/functional/suites/postStatus'
	]

});</code
>
</div>
	</li>
</ul>

<p>TODO See config file changes</p>
<h3>Running</h3>
<ul>
	<li><strong>Run the tests</strong> from the root folder of your web site with the following <strong>command</strong> <code class='terminal'>node_modules\.bin\intern-runner -config=path\to\config leaveRemoteOpen</code></li>
	<li>Optionally create a dedicated firefox profile to run your tests on running the command <code class='terminal'>firefox.exe -p</code></li>
	<li>Also, you can create shell scripts to start selenium and to run the tests. We currently run selenium with the following command line: <code class='terminal'>java -Dos.name=windows -jar selenium-server-standalone-2.44.0.jar -Dwebdriver.ie.driver=C:\path\to\IEDriverServer.exe -Dwebdriver.firefox.profile=selenium -Dwebdriver.log.file="c:\tmp\log.txt" -Dwebdriver.firefox.logfile="c:\tmp\fflog.txt"</code></li>
</ul>

<p>TODO Installing a web server of your preference - I'm not sure about the need of that</p>

</section>



<section>

<h2>Test Suites</h2>
<p>The test suites that we reference in the config file are defined in <a href="http://requirejs.org/docs/whyamd.html#amd"><abbr title="Asynchronous Module Definition">AMD</abbr></a> style. That is a way to <strong>avoid</strong> creating things in the <strong>global namespace.</strong></p>

<div class='codeblock'>
<p><abbr title="Asynchronous Module Definition">AMD</abbr> overview</p>
<code class='javascript'
>// AMD module
define([
	// import paths
], function(/* import names */) {
	// actual code
	return {}; // usually return something from the AMD module
});</code
>
</div>

<p>The actual test suite imports at least two objects and optionally an assertion library. The assertion library is for convenience, since you can perform assertions and fail tests without it. More on that later.</p>

<div class='codeblock'>
<p>testSuite.js</p>
<code class='javascript'
>// if you don't understand everything in this code snippet, don't worry, it's all explained in the next example
define([

	// base
	'intern!object',
	'intern/chai!assert',

	// helpers
	'require'

], function(

	// base
	registerSuite, assert,

	// helpers
	require

	) {

	'use strict';

	registerSuite({
		name: 'sample test',
		login: function() {
			return this.remote
				.get(require.toUrl('http://localhost'))
				// do something
				.then(function() {
					assert(); // assert something
				});
		}
	});

});</code
>
</div>

<p>This is a lot of boilerplate to get started. Let's see what each line does.</p>

<div class='codeblock'>
<p>testSuite.js</p>
<code class='javascript'
>// yep, that's the explanation right here like promised ;)
// AMD only makes "define" available from the global namespace, everything else needs to be imported
// "define" imports stuff to the scope of its callback function
define([

	// import what you need inside here
	// better keep this list organized and separate each group by a name and a space
	// really helps when debugging a long list of imports like 15+ or so

	// base
	'intern!object', // test suite registry, all test suites need to import this
	'intern/chai!assert', // assertion library

	// helpers
	'require'

], function(

	// and give names to the imported stuff here
	// they must follow the same order of what's listed above

	// base
	registerSuite, assert,

	// helpers
	require

	) {

	'use strict'; // AMD plays nice with strict mode

	// create a test suite by calling registerSuite function and passing in an object
	registerSuite({

		name: 'sample test', // the name property of the passed object gives the test suite a name for the logs

		login: function() { // and each method inside the object is a test
			// inside a test function, "this.remote" is mapped to an instance of leadfoot/Command, more on that later
			return this.remote
				.get(require.toUrl('http://localhost'))
				// do something
				.then(function() {
					assert(); // assert something
				});
		}

	});

});</code
>
</div>

<p>As the test list grows bigger, it is not manageable to define each and every test in the same file, so what I recommend is to <strong>separate each test in a different file</strong> with <abbr title="Asynchronous Module Definition">AMD</abbr> like this.</p>

<div class='codeblock'>
<p>manageableTestSuite.js</p>
<code class='javascript'
>define([

	// base
	'intern!object',

	<strong class='comment small'>// tests - check next code block for how these files are structured</strong>
	<strong class='small'>'path/relative/to/this/file/sanityTest',</strong>
	<strong class='small'>'path/relative/to/this/file/realityTest'</strong>

], function(

	// base
	registerSuite,

	<strong class='comment small'>// tests</strong>
	<strong class='small'>sanityTest, realityTest</strong>

	) {

	'use strict';

	registerSuite({
		name: 'load chrome extension',
		<strong class='comment small'>// function references instead of function definitions (lambdas)</strong>
		<strong class='small'>'sanity test': sanityTest,</strong>
		<strong class='small'>'reality test': realityTest</strong>
	});

});</code
>
</div>

<p>And each test would be something like:</p>

<div class='codeblock'>
<p>manageableTest.js</p>
<code class='javascript'
>define([

	// base
	'intern/chai!assert',
	'require',

	// resources
	'path/relative/to/this/file/resources'

], function(

	// base
	assert, require,

	// resources
	resources

	) {

	'use strict';

	<strong class='comment small'>// return the test function from the module</strong>
	<strong class='small'>return function() {</strong>

		<strong class='comment small'>// we can still refer to this.remote, like in the previous example</strong>
		<strong class='small'>return this.remote</strong>
			.get(require.toUrl('http://localhost'))
			// do something
			.then(function() {
				assert(); // assert something
			});

	<strong>}</strong>

});</code
>
</div>

</section>



<section>

<h2>Async Methods and Promises</h2>
<p>Most (if not all) of <code class='javascript'>leadfoot/Command</code> <strong>methods are asynchronous,</strong> so they <strong>return promises.</strong> If all you have to do is to call these methods in succession, you won't face many difficulties. But for more advanced scenarios, you will need a little bit more of knowledge over how promises work.</p>
<p>Promises exist in several languages such as C++, C# and Java in one form or another. Sometimes they require an auxiliary class called <code>Future</code>, sometimes they are called <code>Task</code>s, sometimes they are called <code>Deferred</code>s. They are objects that will contain a value in the future, and we may register a callback function to run when the promise receives this value. In JavaScript, by immediately returning a <code>promise</code> from a method that will take long to return a value, and registering a callback to execute later on, we avoid blocking the current thread while idle.</p>
<p>The process of setting a value to the <code>promise</code> is called <strong>resolving</strong> the <code>promise</code>. If the <code>promise</code> cannot receive a value anymore, it is <strong>rejected with a reason.</strong> Resolving or rejecting a <code>promise</code> is called <strong>fulfilling</strong> the <code>promise</code>. In the example below, we can see the basics of working with promises in JavaScript.</p>

<div class='codeblock'>
<p>Promises overview</p>
<code class='javascript'
>// call an async function (a method that returns a promise)
var promise = asyncFunction();

// call the promise "then" method
promise.then(function(value) { // pass a callback as argument
	// do something with the value here
});

return promise;</code
>
</div>

<p>Saving the promise inside a variable is not always required, and in certain cases we can omit it.</p>

<div class='codeblock'>
<p>Promises: inline short syntax</p>
<code class='javascript'
>// call an async function and the "then" method from the returned value
return asyncFunction().then(function(value) {
	// do something with the value here
});</code
>
</div>

<p>There's a more readable syntax for this however. In this simple example it won't do much for us, but it will become more important later on, we we see another topic called promises chaining.</p>

<p>TODO see how other languages behave about breaking calls in multiple lines.</p>

<div class='codeblock'>
<p>Promises: more readable short syntax</p>
<code class='javascript'
>// call an async function
return asyncFunction() // do not end this line with ";"

// break the "then" method call in another line
.then(function(value) { // begin this line with "."
	// do something with the value here
});</code
>
</div>

<p>Like mentioned above, promises are not always resolved. Sometimes something goes wrong and they are rejected. We can perform an action in case they are rejected by passing in a second callback, like this.</p>

<div class='codeblock'>
<p>Promise callbacks</p>
<code class='javascript'
>// call an async function
asyncFunction()

// register the callbacks
.then(
	function(value) { ... }, // pass the success callback
	function(reason) { ... } // and the error callback
);</code
>
</div>

<p>Ok, we're ready to see a more complete example.</p>

<div class='codeblock'>
<p>Basic example of working with promises</p>
<code class='javascript'
>// dojo/request makes http requests
define(['dojo/request'], function(request) {
	'use strict';

	// calling this method may take long to complete
	// but it immediately returns a promise
	// and fulfills it only after receiving a response
	return request('http://webservice.com/lerelere')

	// we can get the response value by calling the then function
	.then(
		function(result) { ... }, // promise was resolved \o/ run this callback
		function(reason) { ... } // promise was rejected ;( run this callback instead
	);

});</code
>
</div>

<p>And now is a good time to show another concept of working with promises in JavaScript. A <code class.javascript>promise.then</code> call always returns another <code class="javascript">promise</code>. This allows us to chain multiple <code class="javascript">then</code> calls, that will wait for the previous <code class="javascript">promise</code> to be resolved. This way we can order the execution of async code.</p>

<div class='codeblock'>
<p>Promise chaining</p>
<code class='javascript'
>// returns the last promise of the chain
return asyncFunction()

<strong class='comment small'>// first promise callback</strong>
<strong class='small'>.then(function(value) { ... })</strong>

<strong class='comment small'>// second promise callback</strong>
<strong class='comment small'>// it will only run when the previous promise is resolved</strong>
<strong class='small'>.then(function(value) { ... });</strong></code
>
</div>

<p>Another more clearer but less compact way of writing the above code would be to explicitly store each promise in a variable.</p>

<div class='codeblock'>
<p>Promise chaining</p>
<code class='javascript'
>var promise1 = null;
var promise2 = null;
var promise3 = null;

promise1 = asyncFunction();
promise2 = <strong>promise1.then(function(value) { ... });</strong> <strong>// first promise callback</strong>
promise3 = <strong>promise2.then(function(value) { ... });</strong> <strong>// second promise callback, it will only run when the previous promise is resolved</strong>

// returns the last promise of the chain
return promise3;</code
>
</div>

<p>So far we have not mixed sync and async code on purpose. I'm going to show a very simple scenario, since our focus is to learn how to use intern.</p>

<div class='codeblock'>
<p>Async demonstration</p>
<code class='javascript'
>//
// async the console.log</code
>
</div>

<div class='codeblock'>
<p>manageableTest.js</p>
<code class='javascript'
>define(['dojo/Deferred'], function(Deferred) {
	'use strict';

	function lengthyOperation() {

		// create a promise
		var promise = new Deferred();

		// do lengthy operation here
		var response = ajax('http://webservice.com/lerelere');
		response.addEventListener('workDone', function(result) {
			promise.resolve(result);
		});
		response.addEventListener('error', function(error) {
			promise.reject(error);
		});

		// return the unfulfilled promise immediately
		return promise;

	}

	lengthyOperation()

	.then(
		function(result) {  }, // promise was resolved \o/, run this
		function(reason) {  } // promise was rejected, run this instead
	);

});</code
>
</div>

<p>An async method returns a thenable, that is, an object with a <code class="javascript">then</code> method that you can pass in a callback function. Native JavaScript <code class="javascript">Promise</code>s and <code class="javascript">dojo/Deferred</code>s are examples of thenables. Inside the callback that we pass to the <code class="javascript">then</code> method, we can retrieve the value of the promise once it is resolved.</p>

<p>To be done :/</p>
<ul>
	<li>Promises chaining</li>
	<li>Promises flow helpers - all, etc.</li>
	<li>Thenables</li>
	<li>Commands vs. Elements usage</li>
</ul>

</section>



<section>

<h2>Test Functions and Main Test Flow</h2>
<p>Intern <abbr title="Application Programming Interface">API</abbr> is asynchronous. Every intern method call returns a <code>promise</code> that will be fulfilled later. <strong>We must also return a <code>promise</code> from a test function</strong> that will be used by the test suite to tell whether the test has succeeded or failed.</p>

<p>When we use <code><a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></code> instances, we usually don't worry ourselves about this, because <strong>commands wrap all the required functionality.</strong> All previous test function examples return <code><a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></code> instances because of this. They contain a <strong>built-in <code>promise</code></strong> that is used by the test suite.</p>

<p>If by any reason we don't want to, or cannot return a <code><a href="http://theintern.github.io/leadfoot/Command.html">leadfoot/Command</a></code> instance, we may return any other kind of <code>promise</code>. Dojo implementation is <code><a href='http://dojotoolkit.org/reference-guide/1.10/dojo/Deferred.html'>dojo/Deferred</a></code>, but it also has <code><a href='http://dojotoolkit.org/reference-guide/1.10/dojo/promise/all.html'>dojo/promise/all</a></code>, which allows us to wait for several parallel asynchronous processes. In fact, <strong>any object that has a then method</strong> can be used.</p>

<p>Let's see a couple of code excerpts that exemplify theses cases.</p>

<div class='codeblock'>
<p>built in promise with command</p>
<code class='javascript'
><strong>return this.remote</strong> <strong>// implicit promise inside command (this.remote)</strong>
	.get(require.toUrl('http://localhost'))
	// do something
	.then(function() {
		assert(); // assert something
	});</code
>
</div>

<p>talk about command chaining and failure callback before showing explicit promises examples</p>

<div class='codeblock'>
<p>explicit promise</p>
<code class='javascript'
><strong>var promise = new Deferred();</strong> <strong>// explicit promise</strong>

this.remote
	.get(require.toUrl('http://localhost'))
	// do something
	.then(function() {
		assert(); // assert something
	})
	.then(
		function() { <strong>promise.resolve();</strong> }, <strong>// success callback</strong>
		function(error) { <strong>promise.reject(error);</strong> } <strong>// failure callback</strong>
	);

<strong>return promise;</strong></code
>
</div>

<div class='codeblock'>
<p>implicit promise with parallel commands</p>
<code class='javascript'
>var pageCommand = this.remote.get(require.toUrl('http://localhost'));

// calling any method of command will return a new command instance
// so multiple method calls will return multiple command instances
var command1 = pageCommand.findById('someId').getAttribute('for');
var command2 = pageCommand.findById('someOtherId').getAttribute('for');

<strong class='comment small'>// "all" helper will wait for all passed promises to be fulfilled before calling its own "then" callbacks</strong>
<strong class='comment small'>// because commands have implicit promises, we pass them directly to the "all" helper</strong>
<strong class='comment small'>// all([...]).then callback will receive an array with the results of each promise</strong>
<strong class='comment small'>// following this structure [forAttribute1, forAttribute2]</strong>
<strong class='small'>return all([command1, command2]);</strong> <strong class='comment small'>// implicit promise inside "all"</strong></code
>
</div>

<div class='codeblock'>
<p>explicit promise with parallel commands</p>
<code class='javascript'
><strong>var promise = new Deferred();</strong> <strong>// explicit promise</strong>
var pageCommand = this.remote.get(require.toUrl('http://localhost'));

// calling any method of command will return a new command instance
// so multiple method calls will return multiple command instances
var command1 = pageCommand.findById('someId').getAttribute('for');
var command2 = pageCommand.findById('someOtherId').getAttribute('for');

// "all" helper will wait for all passed promises to be fulfilled before calling its own "then" callbacks
// because commands have implicit promises, we pass them directly to the "all" helper
all([command1, command2])
	.then(
		// forAttributes is an array with the results of each promise
		// following this structure [forAttribute1, forAttribute2]
		function(forAttributes) { <strong class='small'>promise.resolve();</strong> }, <strong class='comment small'>// success callback</strong>
		function(error) { <strong class='small'>promise.reject(error);</strong> } <strong class='comment small'>// failure callback</strong>
	);

<strong>return promise;</strong></code
>
</div>



talk about all
command chaining, multiple commands, execute, pollUntil
then success/fail callback
then helpers + function definition
assert

</section>



<section>

<h2>Extending Native Command</h2>
<p>We need to extend the <code><a href='http://theintern.github.io/leadfoot/Command.html'>leadfoot/Command</a></code> according to the docs, and then create an instance passing a <code><a href='http://theintern.github.io/leadfoot/Session.html'>leadfoot/Session</a></code> instance.</p>

<div class='codeblock'>
<p>StxCommand.js</p>
<code class='javascript'
>define([

	// path to the native leadfoot/Command
	// it's a node module (common js format), and this format is not directly compatible with AMD
	// so we use dojo/node! plug-in to load it
	'intern/dojo/node!leadfoot/Command',

	// method we want to add to the command
	'./newMethod'

], function(Command, newMethod) {
	'use strict';

	// inheritance as recommended according to the docs
	function StxCommand() {
		Command.apply(this, arguments);
	}
	StxCommand.prototype = Object.create(Command.prototype);
	StxCommand.prototype.constructor = StxCommand;

	// adding new method
	StxCommand.prototype.newMethod = newMethod;

	// return extended command from the module
	return StxCommand;

});</code
>
</div>

<div class='codeblock'>
<p>newMethod.js</p>
<code class='javascript'
>define([], function() {
	'use strict';

	<strong>// boilerplate for new methods</strong>
	<strong class='small'>return function(someParameter) {</strong> <strong>// method signature</strong>
		<strong class='small'>return new this.constructor(this, function() {</strong>
			<strong class='small'>this.parent</strong>
				// actual method code
				.then(function() {
					console.log(someParameter);
				});
		<strong>});</strong>
	<strong>};</strong>

});</code
>
</div>

<div class='codeblock'>
<p>extendedCommandTest.js</p>
<code class='javascript'
>define([

	// base
	'intern/chai!assert',
	'require',
	<strong>'path/relative/to/this/file/StxCommand',</strong>

	// resources
	'path/relative/to/this/file/resources'

], function(

	// base
	assert, require, <strong>StxCommand,</strong>

	// resources
	resources

	) {

	'use strict';

	// return the test function
	return function() {
		<strong class='small'>var stxRemote = new StxCommand(this.remote.session);</strong>
		<strong class='small'>return stxRemote.newMethod('done!');</strong> <strong class='comment small'>// because StxCommand inherits from leadfoot/Command, it also contains an implicit promise</strong>
	}

});</code
>
</div>

</section>



<section>

<h2>Refining Extended Command</h2>

<p>For each method that we add to the command, we can follow a few good practices that will ensure that the tests execution remains fast and debuggable. We can implement a simple timer and an error management block that will prevent the tests from hanging for too long.</p>

<div class='codeblock'>
<p>newMethod.js</p>
<code class='javascript'
>define([], function() {
	'use strict';

	return function(someParameter) {
		return new this.constructor(this, function() {

			<strong class='comment small'>// explicit promise used to give us more freedom to leadfoot/Command usage</strong>
			<strong class='comment small'>// this is what we'll return from the test function and it's what</strong>
			<strong class='comment small'>// will act as a semaphore for the test suite</strong>
			<strong class='comment small'>// when the promise fulfills, the test is marked as completed</strong>
			<strong class='comment small'>// if the promise is resolved, the test is considered successful</strong>
			<strong class='comment small'>// otherwise, if the promise is rejected, the test will fail</strong>
			<strong class='small'>var promise = new Deferred();</strong>

			<strong class='comment small'>// the test suite doesn't knows about errors thrown from the code</strong>
			<strong class='comment small'>// if that happens, the test will simply hang until the timeout is reached</strong>
			<strong class='comment small'>// the only way to communicate errors to the test suite is to reject the returned promise</strong>
			<strong class='comment small'>// when we use the leadfoot/Command built-in promise, this is done for us automatically</strong>
			<strong class='comment small'>// when we don't, we must do it manually in the catch block below</strong>
			<strong class='small'>try {</strong>

				this.parent

					// command timeout to fail, otherwise we may need to wait for the entire test timeout, which may take a long time
					.getTimeout('implicit') // checks if a timeout has been set but the native api
					.then(function(timeout) { // if not we specify our own
						if (!timeout) {
							timeout = 5000;
						}
						<strong class='small'>setTimeout(function() {</strong> <strong class='comment small'>//  use the timeout for our entire method</strong>
							<strong class='small'>promise.reject('new method timed out');</strong>
						<strong class='small'>}, timeout);</strong>
					})

					// actual method logic
					.then(function() {
						console.log('new method');
					})

					// we usually only pass the first parameter to the then function
					// which is the success callback, but it accepts a second callback, which is the failure callback.
					// If any error is thrown in the command chain before this "then", the error callback function is executed
					.then(
						<strong class='comment small'>// solves the explicit promise to tell the test suite that we're done and it may proceed to the next test</strong>
						function() { <strong class='small'>promise.resolve(true);</strong> },
						<strong class='comment small'>// or rejects the explicit promise in case of failure inside the command chain</strong>
						function(error) { <strong class='small'>promise.reject(error);</strong> }
					);

			<strong class='small'>} catch (error) {</strong>
				<strong class='comment small'>// like mentioned above, in case of errors, we reject the explicit promise to communicate to the test suite that</strong>
				<strong class='comment small'>// the test has failed</strong>
				<strong class='small'>promise.reject(error);</strong>
			<strong class='small'>}</strong>

			<strong class='comment small'>// always return the explicit promise, regardless of what happens</strong>
			<strong class='small'>return promise;</strong>

		});
	};

});</code
>
</div>

</section>



</body>
</html>