<!DOCTYPE html>
<html
	xmlns='http://www.w3.org/1999/xhtml'
	lang='pt-BR'
	xml:lang='pt-br'
	>
<head>
	<title>Cheat Sheet</title>
	<meta charset='utf-8' />
	<link rel='stylesheet' href='css/main.css' />
	<script src='../tutorialjs/js/utils.js'></script>
	<script src='../tutorialjs/js/index.js'></script>
	<script src='../tutorialjs/js/highlighter.js'></script>
	<script src='js/extendedhighlighter.js'></script>
	<script src='js/home.js'></script>
</head>
<body>



<h1>Cheat Sheet <span>para Programadores Mobile</span></h1>

<p><strong>WORK IN PROGRESS ;)</strong></p>

<p>Artigo criado por necessidades práticas no desenvolvimento de aplicativos para dispositivos móveis. Fui parcialmente inspirado no <a rel='external nofollow' href='http://www.25hoursaday.com/CsharpVsJava.html'>artigo icônico de Dare Obasanjo comparando C# e Java</a>.</p>

<section>

<h2>Índice</h2>
<nav id='indice'>
</nav>

</section>



<section>

<h2 id='olamundo'>Olá Mundo</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++ - Olá Mundo - main.cpp</p>
<code class='cpp'
>// requer uma biblioteca para IO
#include &lt;iostream&gt;

// requer uma função main na raiz
int main(int argc, const char* argv[]) {
	std::cout &lt;&lt; "Olá Mundo";
	// requer um código de retorno
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C - Olá Mundo - main.m</p>
<code class='objectivec'
>// requer uma biblioteca para IO
#import &lt;Foundation/Foundation.h&gt;

// requer uma função main
int main(int argc, const char* argv[]) {
	NSLog(@"Olá Mundo");
	// requer um código de retorno
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Swift - Olá Mundo - main.swift</p>
<code class='swift'
>print("Olá Mundo")</code
>
</div>

<div class='codeblock'>
<p>Rust - Olá Mundo - mais.rs</p>
<code class='rust'
>// requer uma função main
fn main() {
	println!("Olá Mundo");
}</code
>
</div>

<div class='codeblock'>
<p>C# - Olá Mundo - OlaMundo.cs</p>
<code class='cs'
>public class OlaMundo {
	// requer um método estático main em uma classe
	public static void Main(string[] args) {
		System.Console.WriteLine("Olá Mundo");
	}
}</code
>
</div>

<div class='codeblock'>
<p>Java - Olá Mundo - OlaMundo.java</p>
<code class='java'
>public class OlaMundo {
	// requer um método estático main em uma classe
	public static void main(String[] args) {
		System.out.println("Olá Mundo");
	}
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript - Olá Mundo - main.js</p>
<code class='javascript'
>console.log('Olá Mundo')</code
>
</div>

</div>

<ol>
	<li>Swift</li>
	<li>JavaScript</li>
	<li>Rust</li>
	<li>C# / Java</li>
	<li>C++ / Objective-C</li>
</ol>

<p>Swift é a mais simples de todas. Nem <code class='swift'>;</code> ela precisa, e seu uso nem é recomendado.<br />
JavaScript perde por pouco. Também não requer <code class='javascript'>;</code> embora ao contrário do que ocorre com Swift, seu uso seja recomendado. Seu <code class='javascript'>console.log</code> também é um pouco maior que o método <code class='swift'>print</code>.<br />
Rust ainda requer uma função <code class='rust'>main</code>, mas o retorno dela não precisa ser declarado explicitamente. Diferente das demais linguagens, usa um macro para IO, por isso <code class='rust'>print!</code> leva uma exclamação (não, não era porque eu estava entusiasmado quando escrevi o código).<br />
C# e Java são idênticos, ambos requerendo uma classe que contenha o método <code class='generic'>main</code>. Sentiu uma leve pressão para escrever orientado a objeto aqui? Também é recomendado que o nome do arquivo tenha o mesmo nome da classe.<br />
C++ e Objective-C são bastante parecidos pois possuem forte influência do C. São os mais verborrágicos.</p>

</section>



<section>

<h2 id='comentarios'>Comentários <span>e documentação inline</span></h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// linha

/*
bloco
*/

void function someFunction(/* bloco */ int arg) {

}

/// &lt;summary&gt;Visual Studio XML Documentation alt 1&lt;/summary&gt;
/// &lt;param&gt;The argument os the function&lt;/param&gt;
/// &lt;returns&gt;The result of the function call&lt;/returns&gt;
/// &lt;example&gt;
/// &lt;code&gt;
/// auto result{someFunction(2)};
/// &lt;/code&gt;
/// &lt;/example&gt;
int function someFunction(int arg) {
	return 0;
}

/**
&lt;summary&gt;Visual Studio XML Documentation alt 2&lt;/summary&gt;
&lt;param&gt;The argument os the function&lt;/param&gt;
&lt;returns&gt;The result of the function call&lt;/returns&gt;
&lt;example&gt;
&lt;code&gt;
auto result{someFunction(2)};
&lt;/code&gt;
&lt;/example&gt;
*/
int function someFunction(int arg) {
	return 0;
}

/// XCode Doxygen / Header Doc alt 1
/// \param The argument of the function
/// \returns The result of the function call
/// \code
/// auto result{someFunction(2)};
int function someFunction(int arg) {
	return 0;
}

//! XCode Doxygen / Header Doc alt 2
//! @param The argument of the function
//! @return The result of the function call
//! @code
//! auto result{someFunction(2)};
int function someFunction(int arg) {
	return 0;
}

/**
XCode Doxygen / Header Doc alt 3
\param The argument of the function
\return The result of the function call
\code
auto result{someFunction(2)};
*/
int function someFunction(int arg) {
	return 0;
}

/*!
XCode Doxygen / Header Doc alt 4
@param The argument of the function
@returns The result of the function call
@code
auto result{someFunction(2)};
*/
int function someFunction(int arg) {
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// linha

/*
bloco
*/

#pragma mark - XCode section with dash
#pragma mark XCode section</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// linha

/*
bloco
*/

/*

bloco

/*
bloco aninhado
*/

bloco

*/

// MARK: - XCode section with dash
// MARK: XCode section

/**
XCode markdown
- Parameter arg1: The argument of the function
- Returns: The result of the function call
	let result = someFunction(2)
*/
func someFunction(arg1:Int) -&gt; Int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// linha

/*
bloco
*/

/*

bloco

/*
bloco aninhado
*/

bloco

*/

/// Rustdoc para o item que segue
/// # Examples
/// let result = someFunction(2);
fn someFunction(arg1:i32) -&gt; i32 {
	//
}

mod foo {
	//! Rustdoc para o contêiner externo
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// linha

/*
bloco
*/

#region foldable
#endregion

#region example

public class SomeClass {

	/// &lt;summary&gt;Visual Studio XML Documentation alt 1&lt;/summary&gt;
	/// &lt;param name="arg1"&gt;The argument of the function&lt;/param&gt;
	/// &lt;returns&gt;The result of the function call&lt;/returns&gt;
	/// &lt;example&gt;
	/// &lt;code&gt;
	/// var someObject = SomeClass();
	/// var result = someObject.SomeMethod(2);
	/// &lt;/code&gt;
	/// &lt;/example&gt;
	public int SomeMethod(int arg1) {
		//
	}

	/**
	&lt;summary&gt;Visual Studio XML Documentation alt 2&lt;/summary&gt;
	&lt;param name="arg1"&gt;The argument of the function&lt;/param&gt;
	&lt;returns&gt;The result of the function call&lt;/returns&gt;
	&lt;example&gt;
	&lt;code&gt;
	var someObject = SomeClass();
	var result = someObject.SomeMethod(2);
	&lt;/code&gt;
	&lt;/example&gt;
	*/
	public int SomeOtherMethod(int arg1) {
		//
	}

}

#endregion</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// linha

/*
bloco
*/

// region idea intellij foldable
// endregion

// region example

public class SomeClass {

	/**
	JavaDoc
	{@code
	SomeClass someObject = new SomeClass();
	int result = someObject.someMethod();
	}
	@param arg1 The argument of the function
	@return The result of the function call
	*/
	public int someMethod(int arg1) {
		return 0;
	}

}

// endregion</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// linha

/*
bloco
*/
</code
>
</div>

</div>

<ol>
	<li>Objective-C / Swift / C#</li>
	<li>C++</li>
	<li>Rust</li>
	<li>Java</li>
	<li>JavaScript</li>
</ol>

<p>Objective-C, Swift e C# possuem ferramentas padrão nas respectivas <abbr title='Integrated Development Environment'>IDE</abbr>s.<br />
C++ não possui uma ferramenta oficial. Varia de acordo com a <abbr title='Integrated Development Environment'>IDE</abbr> ou ferramenta externa e permite a mistura de muitos estilos e palavras alternativas.<br />
Rust possui documentação inline padronizada, mas as possibilidades são bastante simples.<br />
Java usa JavaDoc, que só permite documentação usando <code class='java'>/** */</code>. Aliado com o fato de que Java não suporta comentários de bloco aninhados, um trecho de código devidamente documentado é impossível de se comentar com <code class='java'>/* */</code>.<br />
JavaScript, assim como C++ não possui padrão de documentação. Porém, o caso do JavaScript é mais grave pois as sintaxes variam bastante entre si, inclusive quanto ao seu posicionamento no código.</p>

</section>



<section>

<h2 id='declaracaodevariaveis'>Declaração de Variáveis</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>auto x{5}; // tipo implícito
int x{5}; // tipo explícito
int x(5); // estilo antigo
int x = 5; // estilo c

const int z{5}; // constante
constexpr int x{5}; // expressão constante

int&amp; referenciaDeInt; // referência
int* ponteiroDeInt{&amp;x}; // ponteiro</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>int x = 5; // variável
const int x = 5; // constante

int* x; // ponteiro</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let x = 5 // tipo implícito
let x:Int = 5 // tipo explícito

var x = 5 // variável
let x = 5 // constante

let (x, y) = (1, 2) // desestruturação</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let x = 5; // tipo implícito
let x:i32 = 5; // tipo explícito

let mut x = 5; // variável
let x = 5; // constante

let (x, y) = (1, 2); // desestruturação</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var x = 5; // tipo implícito
int a = 5; // tipo explícito

var x = 5; // variável
const int x = 5; // constante

// tipo ignorado em tempo de compilação
dynamic x = 5;

unsafe {
	int* ponteiroDeInt = &amp;x; // ponteiro
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>int x = 5; // variável
final int x = 5; // constante

// não precisa ser inicializada na declaração
final int x;
x = 5;</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

let x = 5; // tipo dinâmico
var x = 5; // estilo antigo

// lança exceção em modo estrito
// mas é aceito em modo normal
useSemDeclarar = 5;

let x = 5; // variável
const x = 5; // constante

[x, y] = [1, 2]; // desestruturação</code
>
</div>

</div>

<h3 id='nomesvalidos'>Nomes Válidos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>int eu1;
auto _ = "bem sucinto";
auto _123 = "meio confuso";
auto _if = "meio confuso";</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>int eu1;
int _ = "bem sucinto";
int _123 = "meio confuso";
int _if = "meio confuso";</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// TODO

// ignorar a variável
let _ = 1

let π = 3.14159
let 你好 = "你好世界"
let 🐶🐮 = "dogcow"
// cannot contain
// whitespace characters
// mathematical symbols
// arrows
// private-use (or invalid)
// Unicode code points
// line- and box-drawing
// cannot begin with a number</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let eu1:i32;
let _ = "bem sucinto";
let _123 = "meio confuso";
let _if = "meio confuso";</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>int eu1;
var _ = "bem sucinto";
var _123 = "meio confuso";
var _if = "meio confuso";

// podemos ainda usar @ na frente
// do nome pra evitar colisões
// com palavras-chave e tipos
var @if = "muito confuso";
var @int = "muito confuso";

// TODO
// a diferença de @ ao invés de _
// é que...</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>int eu1;
int _ = "bem sucinto"; // deprecated
int _123 = "meio confuso";
int _if = "meio confuso";

int $ = "bem sucinto";
int $123 = "meio confuso";
int $if = "meio confuso";

// TODO posso usar $$ ou misturar $?</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let eu1;
let _ = "bem sucinto";
let _123 = "meio confuso";
let _if = "meio confuso";

// TODO misturar _

let $ = "bem sucinto";
let $123 = "meio confuso";
let $if = "meio confuso";

// TODO posso usar $$ ou misturar $?

// muitos frameworks utilizam $
// como nome de seus objetos
// principais
// jQuery deve ser o mais
// famoso</code
>
</div>

</div>

<ol>
	<li>Swift</li>
	<li>Rust</li>
	<li>C#</li>
	<li>JavaScript</li>
	<li>C++</li>
	<li>Java</li>
	<li>Objective-C</li>
</ol>

<p>Quem diria que um tópico tão simples seria tão diverso entre as linguagens?</p>
<p>Rust e Swift são quase idênticos, mudando apenas uma coisa. Swift faz a declaração de variáveis e constantes serem <q>equivalentes</q>, enquanto Rust faz a declaração de variávies mais difíceis que de constantes. Mas porque Swift utilizou <code class='swift'>let</code> ao invés de <code class='cpp'>const</code>?<br />
JavaScript é a única das linguagens comparadas que possibilita mudar os tipos das variáveis dinamicamente. Sua sintaxe de desestruturação não permite declarar e atribuir um valor ao mesmo tempo. As variáveis já devem ser declaradas antes da atribuição. JavaScript possui um estilo legado de declaracão, que cria variáveis com regras de escopo diferentes do que a maioria dos programadores espera, além de possuir um modo estrito para coibir práticas legadas.<br />
C++ é o que tem mais legado de coisas que não deram certo, e sua última sintaxe pode ter regras mais seguras, mas certamente é bastante estranha. Tipagem implícita requer a palavra <code class='cpp'>auto</code>. Para aumentar a performance de nosso código, temos o recurso <code class='cpp'>constexpr</code>.<br />
Java parou no tempo e Objective-C também (mas cá entre nós, a Apple pelo menos admite). Porém, Objective-c ainda tem tipos ponteiro para deixar as coisas mais confusas.</p>

</section>



<section>

<h2 id='nullnullable'>Null e Nullable</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>std::optional&lt;int&gt; k; // C++17
boost::optional&lt;int&gt; l; // boost</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// nil object
// Nil class
// NSNull singleton to represent null</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// optionals devem ter o tipo especificado
// em sua declaração
var k:Int? = nil
var l:AClass? = nil
let m = l?.propriedade // m recebe nil
let n = l!.propriedade // lança erro se l for nil

// nil coalescing operator
let o = k ?? 10 // o será do tipo Int

// ok mas não é idiomático
let p = k != nil ? k : 10 // p será do tipo Int?

// PS: nullable é chamado de optional
// e null é chamado de nil em Swift</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// não existem tipos nullable
// mas existe um tipo std::Option&lt;T&gt;
// que pode conter None ou Some()

// tipo explícito
let mut k:Option&lt;i32&gt; = None;
let mut l:Option&lt;AStruct&gt; = None;

// tipo implícito Option&lt;i32&gt;
let mut m = None::&lt;i32&gt;;
let mut n = Some(10);

// erro, não pode passar um valor diretamente
// tem que usar Some(valor)
let mut o:Option&lt;i32&gt; = 10;

// não possui operador específico para Option
let p = match n { // p será do tipo i32
	Some(some) =&gt; some,
	None =&gt; 10,
};

// ok mas panic se for None
let q = n.unwrap(); // q será do tipo i32</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// nullable não pode ser usado com var
// um tipo deve ser especificado
int? k = null;
AClass? l = null;
int? m = l?.propriedade; // C# 6
int? m = (l != null) ? l.propriedade : null;

// null coalescing operator
var n = k ?? 10; // n será do tipo int

// ok mas não é idiomático
var o = (k != null) ? k : 10; // o será do tipo int?</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipos primitivos não podem ser nullable
int a = null; // erro

// qualquer tipo de referência é nullable
Integer k = null;
AClass l = null;
Integer m = (l != null) ? l.propriedade : null;

// não possui operador específico para null
int n = (k != null) ? k : 10; // n aceita ser do tipo int ou Integer</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

// qualquer tipo é sempre nullable
let k = null;
let l = (k &amp;&amp; k.propriedade) ? k.propriedade : null;

// null coalescing operator
let m = k || 10;

// ok mas não é idiomático
let n = (k || k === 0) ? k : 10;</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposboolean'>Tipos Primitivos Boolean</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// tipo bool
auto oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// TODO #include &lt;boost/spirit/include/qi_bool.hpp&gt;</code
>
</div>
<!-- http://www.boost.org/doc/libs/1_44_0/libs/spirit/doc/html/spirit/qi/reference/numeric/boolean.html -->

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// tipo NSNumber wrapping BOOL
NSNumber* oitoOuOitenta = @YES;

// tipo BOOL
BOOL oitoOuOitenta = YES;

// tipo C bool
bool oitoOuOitenta = true;</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// tipo Bool
var oitoOuOitenta = true
oitoOuOitenta = false

// converte para true
oitoOuOitenta = !oitoOuOitenta

// Skips initial space characters,
// or optional -/+ sign followed by zeroes.
// Returns YES on encountering one of
// "Y", "y", "T", "t", or a digit 1-9.
// It ignores any trailing characters.
var boolValue:Bool { get }</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// tipo bool
let oitoOuOintenta = true;
oitoOuOintenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// parse
use std::str::FromStr;

let toParse = "5";
let parsed = i32::from_str(toParse).unwrap();</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tipo bool
var oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;
// TODO Boolean.Parse</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipo boolean
boolean oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;
// TODO Boolean.parseBoolean</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// tipo Boolean
let oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// TODO falar de falsy e truthy e !!

/*
// falsy
var bZero = new Boolean(0);
var bNull = new Boolean(null);
var bEmptyString = new Boolean('');
var bfalse = new Boolean(false);
// undefined e NaN

// truthy
var btrueString = new Boolean('true');
var bfalseString = new Boolean('false');
var bSuLin = new Boolean('Su Lin');
var bArrayProto = new Boolean([]);
var bObjProto = new Boolean({});*/</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section class='tiposprimitivos'>

<h2 id='tiposnumericos'>Tipos Primitivos Numéricos</h2>



<h3 id='integer'>Integer</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>char</td><td>8 bits?</td></tr>
		<tr><td>short</td><td>16 bits ou mais</td></tr>
		<tr><td>int</td><td>16 bits ou mais</td></tr>
		<tr><td>long</td><td>32 bits ou mais</td></tr>
		<tr><td>long long</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>int8_t</td><td>8 bits</td></tr>
		<tr><td>int16_t</td><td>16 bits</td></tr>
		<tr><td>int32_t</td><td>32 bits</td></tr>
		<tr><td>int64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>int_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>int_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>int_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>int_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>int_fast8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>int_fast16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>int_fast32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>int_fast64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>char</td><td>8 bits</td></tr>
		<tr><td>short</td><td>16 bits</td></tr>
		<tr><td>int</td><td>32 bits</td></tr>
		<tr><td>long</td><td>32 ou 64 bits</td></tr>
		<tr><td>long long</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>int8_t</td><td>8 bits</td></tr>
		<tr><td>int16_t</td><td>16 bits</td></tr>
		<tr><td>int32_t</td><td>32 bits</td></tr>
		<tr><td>int64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>int_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>int_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>int_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>int_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>CChar</td><td>8 bits</td></tr>
		<tr><td>CShort</td><td>16 bits</td></tr>
		<tr><td>CInt</td><td>16 bits</td></tr>
		<tr><td>CLong</td><td>32 bits</td></tr>
		<tr><td>CLongLong</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>Int8</td><td>8 bits</td></tr>
		<tr><td>Int16</td><td>16 bits</td></tr>
		<tr><td>Int32</td><td>32 bits</td></tr>
		<tr><td>Int64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>i8</td><td>8 bits</td></tr>
		<tr><td>i16</td><td>16 bits</td></tr>
		<tr><td>i32</td><td>32 bits</td></tr>
		<tr><td>i64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>sbyte</td><td>8 bits</td></tr>
		<tr><td>short</td><td>16 bits</td></tr>
		<tr><td>int</td><td>32 bits</td></tr>
		<tr><td>long</td><td>64 bits</td></tr>
		<tr><td>decimal</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Java</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>byte</td><td>8 bits</td></tr>
		<tr><td>short</td><td>16 bits</td></tr>
		<tr><td>int</td><td>32 bits</td></tr>
		<tr><td>long</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>



<h3 id='unsignedinteger'>Unsigned Integer</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>char</td><td>8 bits?</td></tr>
		<tr><td>unsigned short</td><td>16 bits ou mais</td></tr>
		<tr><td>unsigned int</td><td>16 bits ou mais</td></tr>
		<tr><td>unsigned long</td><td>32 bits ou mais</td></tr>
		<tr><td>unsigned long long</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>uint8_t</td><td>8 bits</td></tr>
		<tr><td>uint16_t</td><td>16 bits</td></tr>
		<tr><td>uint32_t</td><td>32 bits</td></tr>
		<tr><td>uint64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>uint_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>uint_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>uint_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>uint_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>uint_fast8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>uint_fast16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>uint_fast32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>uint_fast64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>unsigned char</td><td>8 bits</td></tr>
		<tr><td>unsigned short</td><td>16 bits</td></tr>
		<tr><td>unsigned int</td><td>32 bits</td></tr>
		<tr><td>unsigned long</td><td>32 ou 64 bits</td></tr>
		<tr><td>unsigned long long</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>uint8_t</td><td>8 bits</td></tr>
		<tr><td>uint16_t</td><td>16 bits</td></tr>
		<tr><td>uint32_t</td><td>32 bits</td></tr>
		<tr><td>uint64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>uint_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>uint_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>uint_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>uint_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>CUnsignedChar</td><td>8 bits</td></tr>
		<tr><td>CUnsignedShort</td><td>16 bits</td></tr>
		<tr><td>CUnsignedInt</td><td>16 bits</td></tr>
		<tr><td>CUnsignedLong</td><td>32 bits</td></tr>
		<tr><td>CUnsignedLongLong</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>UInt8</td><td>8 bits</td></tr>
		<tr><td>UInt16</td><td>16 bits</td></tr>
		<tr><td>UInt32</td><td>32 bits</td></tr>
		<tr><td>UInt64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>u8</td><td>8 bits</td></tr>
		<tr><td>u16</td><td>16 bits</td></tr>
		<tr><td>u32</td><td>32 bits</td></tr>
		<tr><td>u64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>byte</td><td>8 bits</td></tr>
		<tr><td>ushort</td><td>16 bits</td></tr>
		<tr><td>uint</td><td>32 bits</td></tr>
		<tr><td>ulong</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>



<h3 id='pointerinteger'>Pointer Sized Integer</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>intptr_t</td><td>Depende do hardware</td></tr>
		<tr><td>uintptr_t</td><td>Depende do hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>NSInteger</td><td>32 ou 64 bits</td></tr>
		<tr><td>NSUInteger</td><td>32 ou 64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>Int</td><td>Depende do Hardware</td></tr>
		<tr><td>UInt</td><td>Depende do Hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>isize</td><td>Depende do hardware</td></tr>
		<tr><td>usize</td><td>Depende do hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>



<h3 id='floatingpoint'>Floating Point</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>long double</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>long double</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>CFloat</td><td>32 bits</td></tr>
		<tr><td>CDouble</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>Float</td><td>32 bits</td></tr>
		<tr><td>Double</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>f32</td><td>32 bits</td></tr>
		<tr><td>f64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>decimal</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Java</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>Number</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

</div>



<h2 id='outrostiposnumericos'>Tipos Numéricos Não Primitivos</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>NSNumber</td><td>cluster de tipos</td></tr>
		<tr><td>CGFloat</td><td>32 ou 64 bits</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>Float80</td><td>80 bits</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Rust</p>
<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>num::bigint::BigInt</td><td>?</td></tr>
		<tr><td>num::bigint::BigUint</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>C#</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>BigInteger</td><td>?</td></tr>
		<tr><td>Complex</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Java</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>BigInteger</td><td>?</td></tr>
		<tr><td>BigDecimal</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>



<ol>
	<li>Rust</li>
	<li>Swift</li>
	<li>C#</li>
	<li>Java</li>
	<li>C++</li>
	<li>Objective-C</li>
	<li>JavaScript</li>
</ol>

<p>Rust nomeia claramente os tipos numéricos que usa, além de usar nomes curtos.<br />
Swift prefere ser um pouco mais conservador e utilizar nomes como <code class='swift'>Int</code> e <code class='swift'>Double</code>. Possui também tipos para compatibilidade com as <abbr>API</abbr>s em C e Objective-C.<br />
C# mantém os nomes herdados do C (embora seja possível criar <em>type aliases</em> por arquivo). Notem a inconsistência com <code class='cs'>sbyte</code> e <code class='cs'>byte</code> devido a esta decisão. C# possui um tipo de 128 bits. Como roda numa máquina virtual, não possui tipos com tamanhos de memória como Rust e Swift. Não sei ao certo como é feito com <em>Native</em> .NET.<br />
Java não possui tipos sem sinal.<br />
C++ possui uma leve melhoria em relação à C, mas ainda é bem extenso.<br />
Objective-C mistura tipos de C e os próprios, fazendo uma salada só. Os tipos que ele herda de C não possuem tamanho fixo. Existe apenas a garantia de que <code class='objectivec'>short &lt;= int &lt;= long &lt;= long long</code>. Mesma coisa vale para <code class='objectivec'>float &lt;= double &lt;= long double</code>. Então existem tipos de tamanho fixo criados na especificacão C99 e os tipos incluídos pelo framework da Apple.<br />
JavaScript só possui um tipo numérico.</p>
<p>Notem que existe uma divergência entre C++ e Objective-C e as demais linguagens em relação à nomeclatura. Para as duas linguagens, <code class='cpp'>int</code> e <code class='cpp'>long</code> possuem tamanhos diferentes das demais. Por isso, ponto para as linguagens que indicam explicitamente o tamanho dos tipos no próprio nome.</p>

</section>



<section class='tiposprimitivos'>

<h2 id='boxtiposnumericos'>Boxing de Tipos Primitivos Numéricos</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>?</td><td>NSNumber</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>struct</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>sbyte</td><td>SByte</td></tr>
		<tr><td>short</td><td>Int16</td></tr>
		<tr><td>int</td><td>Int32</td></tr>
		<tr><td>long</td><td>Int64</td></tr>
		<tr><td>decimal</td><td>Decimal</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>byte</td><td>Byte</td></tr>
		<tr><td>ushort</td><td>UInt16</td></tr>
		<tr><td>uint</td><td>UInt32</td></tr>
		<tr><td>ulong</td><td>UInt64</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>float</td><td>Single</td></tr>
		<tr><td>double</td><td>Double</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>decimal</td><td>Decimal</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Java</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>byte</td><td>Byte</td></tr>
		<tr><td>short</td><td>Short</td></tr>
		<tr><td>int</td><td>Integer</td></tr>
		<tr><td>long</td><td>Long</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tfoot>
		<tr><td colspan='2'></td></tr>
	</tfoot>
	<tbody>
		<tr><td>float</td><td>Float</td></tr>
		<tr><td>double</td><td>Double</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='literaisnumericas'>Literais Numéricas</h2>



<h3 id='literaisdecimaisinteiros'>Decimais Inteiros</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// int32_t (x64 LP64)
auto i1{1};
auto i2{-1};

// uint32_t (x64 LP64)
auto u1{1u};
auto u2{2'147'483'648U};


// int64_t (x64 LP64)
auto l1{2'147'483'648};
auto l2{-2'147'483'649};
auto l3{1l};
auto l4{1L};
auto l5{1ll};
auto l6{1LL};

// uint64_t (x64 LP64)
auto ul1{9'223'372'036'854'775'808};
auto ul2{1ul};
auto ul3{1UL};
auto ul4{1ull};
auto ul5{1ULL};</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// TODO

NSNumber* myBool = @YES;
NSNumber* myBool = [[NSNumber alloc] initWithBOOL:YES];

// int
NSInteger i1 = 42; // NSLog(@"%zd", i1);
NSNumber* i2 = @42; // NSLog(@"%@", i2);
NSNumber* i3 = [[NSNumber alloc] initWithInt:42];

// uint
NSUInteger u1 = 42u; // NSLog(@"%tu", u1);
NSNumber* u2 = @42u; // NSLog(@"%@", u2);
NSNumber* u3 = [[NSNumber alloc] initWithUnsignedInt:42u];

// long
NSNumber* l1 = @42L;
NSNumber* l1 = [[NSNumber alloc] initWithLong:42L];

// long long
NSNumber* ll1 = @42LL;
NSNumber* ll1 = [[NSNumber alloc] initWithLong:42LL];</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Int (x64)
let i1 = 1
let i2 = -1
let i3 = 2_147_483_648
let i4 = -2_147_483_649;












// UInt (x64)
let u1:UInt = 9_223_372_036_854_775_808

// lança exceção
// does not fit inside Int (x64)
let e1 = 9_223_372_036_854_775_808
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// i8
let i81 = 1_i8;
let i82 = -1i8;

// u8
let u81 = 1_u8;

// i16
let i161 = 1i16;
let i162 = -1_i16;

// u16
let u161 = 1u16;

// i32
let i1 = 1;
let i2 = -1;
let i3 = 1_i32;

// avisa overflow -2147483648
let i4:i32 = 2_147_483_648;
let i5 = 2_147_483_648_i32;
let i6 = 2_147_483_648;

// avisa underflow 2147483647
let i7:i32 = -2_147_483_649;
let i8 = -2_147_483_649_i32;
let i9 = -2_147_483_649;

// u32
let u1 = 2_147_483_648_u32;

// i64
let i641 = 1_i64;
let i642 = -1_i64;

// u64
let u641 = 1_u64;

// pointer size
let isize1 = 1_isize;
let usize1 = 1_usize;        </code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// int
var i1 = 1;
var i2 = -1;

// uint
var u1 = 1u;
var u2 = 2147483648U;
var u3 = 2147483648;

// long
var l1 = 2147483648L;
var l2 = -2147483649;
var l3 = -2147483649L;
var l4 = 1l;
var l5 = 1L;


// ulong
// terminal com ul ou lu
// TODO                      </code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// int
Object i1 = 1;
Object i2 = -1;






// long
Object l1 = 2_147_483_648l;
Object l2 = -2_147_483_649L;
Object l3 = 1l;
Object l4 = 1L;


// lança exceção
// integer number too large
Object l5 = 9_223_372_036_854_775_808L;</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>



<h3 id='literaisdecimaisfloatingpoint'>Decimais Floating Point</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
                                    </code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// NSNumber wrapping float
NSNumber* f1 = @1f;
NSNumber* f1m = [NSNumber numberWithFloat:1f];

// NSNumber wrapping double
NSNumber *d1 = @1.0;
NSNumber *d1m = [NSNumber numberWithDouble:1.0];          </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Float
let f1:Float = 1


// Double
let d1 = 1.0
let d2 = 0.7 // não aceita .7          </code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// f32 (float)
let f1 = 1f32;


// f64 (double)
let d1 = 1f64;
let d2 = 1.0;                </code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// float
var f1 = 1f;
var f2 = 1F;

// double
var db1 = 1d;
var db2 = 1D;
var db3 = 1.0;
var db4 = .7;

// decimal
var dc = 1m;                 </code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// float
Object f1 = 1f;
Object f2 = 1F;

// double
Object d1 = 1d;
Object d2 = 1D;
Object f3 = 1.0;
Object f4 = .7;              </code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// double
let d1 = 1;
let d2 = -1;
let d3 = 2147483648;
let d4 = -2147483649;
let d5 = 1.0;
let d6 = .7;                 </code
>
</div>

</div>



<h3 id='notacoesnumericas'>Notações</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
                                    </code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
                                                          </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// notação científica
let c1 = 1e0
let c2 = 1e-1
let c3 = -0.7_e-2

// notação binária
let b1 = 0b0000_0001
let b2 = -0b0000_0010

// notação octal
let o1 = 0o01234567
let o2 = -0o1234567

// notação hexadecimal
let cor = 0xff_00_00
let x1 = -0x0123456789ABCDEF

// notação hexadecimal científica
let xc1 = 0xff0000p0
let xc2 = -0x0123456789ABCDEF_p9       </code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// notação científica
let c1 = 1e_0;
let c2 = 1e-1;
let c3 = -0.7_e-2;

// notação binária
let b1 = 0b_0000_0001;
let b2 = -0b0000_0010;

// notação octal
let o1 = 0o_01234567;
let o2 = -0o1234567;

// notação hexadecimal
let cor = 0x_ff_00_00;
let x1 = -0x0123456789ABCDEF;

// TODO misturar notações
// com sufixos</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// notação científica
double c1 = 1e0;
double c2 = 1e-1;
double c3 = -.7e-2;

// C# 7 deverá ter
// <a rel='external nofollow' href='https://github.com/dotnet/roslyn/issues/215'>literais binárias</a>
// e <a rel='external nofollow' href='https://github.com/dotnet/roslyn/issues/216'>separadores de digitos</a>





// notação hexadecimal
int cor = 0xff0000;
int x1 = -0X0123456789ABCDEF;

// TODO misturar notações
// com sufixos</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// notação científica
double c1 = 1e0;
double c2 = 1e-1;
double c3 = -.7e-2;

// notação binária
int b1 = 0b0000_0001;
int b2 = -0B00000010;

// notação octal
int o1 = 01_234_567;
int o2 = -01234567;

// notação hexadecimal
int cor = 0xff_00_00;
int x1 = -0X0123456789ABCDEF;

// TODO misturar notações
// com sufixos</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// notação científica
let c1 = 1e0;
let c2 = 1e-1;
let c3 = -.7e-2;

// notação binária
let b1 = 0B00000001;
let b2 = -0b00000010;

// notação octal
let o1 = 0o01234567;
let o2 = -0O1234567;

// notação hexadecimal
let cor = 0xff0000;
let x1 = -0X0123456789ABCDEF;</code
>
</div>

</div>



<h3 id='paddingnumerico'>Padding</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// números começando com 0
// são considerados notação
// octal                            </code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
                                                          </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let i1 = 10
let p1 = 01
let p2 = 00.1                          </code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let i1 = 10;
let p1 = 01;
let p2 = 00.1;               </code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var i1 = 10;
var p1 = 01;
var p1 = 00.1;               </code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='javascript'
>// números começando com 0
// são considerados notação
// octal                     </code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let i1 = 10;
let p1 = 01;                 </code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='conversoesnumericas'>Conversão entre Tipos Numéricos</h2>



<h3 id='operacoesnumericas'>Operações</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Conversão explícita é sempre requerida para
// operações com variáveis

let i32_1:Int32 = 2
let i32_2:Int32 = 4
let i32_min:Int32 = Int32.min
let i32_max:Int32 = Int32.max

let i64:Int64 = Int64(i32_max) // explicit conversion 2147483647 (Int64)
let i16:Int16 = Int16(truncatingBitPattern: i32_max) // explicit conversion -1 (Int16)

// explicit conversion and overflow operator &amp;+
var adicao1 = i32_max &amp;+ 1 // -2147483648 (Int32)
var adicao2 = i64 + Int64(i32_1) // 2147483649 (Int64)
var adicao3 = i64 + Int64(i32_max) // 4294967294 (Int64)

// explicit conversion and overflow operator &amp;-
var subtracao1 = i32_min &amp;- 1 // 2147483647 (Int32)
var subtracao2 = Int32(i16) &amp;- i32_1 // -3 (Int32)
var subtracao3 = Int32(i16) &amp;- i32_max // -2147483648 (Int32)

// explicit conversion and overflow operator &amp;*
var multiplicacao1 = i32_1 * i32_2 // 8 (Int32)
var multiplicacao2 = i32_max &amp;* i32_1 // -2 (Int32)
var multiplicacao3 = Int64(i32_1) * i64 // 4294967294 (Int64)

// explicit conversion
var divisao1 = i32_2 / i32_1 // 2 (Int32)
var divisao2 = i32_1 / i32_2 // 0 (Int32)
var divisao3 = Int32(i16) / i32_1 // 0 (Int32)

// NOTA
// Literais numéricas não possuem tipo específico,
// apenas variáveis possuem. Portanto realizar
// operações com variáveis requer conversões
// explícitas, enquanto que operações com literais
// não requer

let intVar = 1
var doubleVar = 0.1

// requer conversão explícita
let somaVar = Double(intVar) + doubleVar
doubleVar += Double(intVar)

// não requer
let somaLiteral = 1 + 0.1
doubleVar += 1</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// Requer compilação com flag -O
// Compilações sem otimização panic no overflow

let i32_1:i32 = 2;
let i32_2:i32 = 4;
let i32_min:i32 = std::i32::MIN;
let i32_max:i32 = std::i32::MAX;

let i641:i64 = i32_max as i64; // explicit conversion 2147483647 (i64)
let i161:i16 = i32_max as i16; // explicit conversion -1 (i16)

// explicit conversion
let adicao1 = i32_max + 1; // -2147483648 (i32)
let adicao2 = i641 + (i32_1 as i64); // 2147483649 (i64)
let adicao3 = i641 + (i32_max as i64); // 4294967294 (i64)

// explicit conversion
let subtracao1 = i32_min - 1; // 2147483647 (i32)
let subtracao2 = (i161 as i32) - i32_1; // -3 (i32)
let subtracao3 = (i161 as i32) - i32_max; // -2147483648 (i32)

// explicit conversion
let multiplicacao1 = i32_1 * i32_2; // 8 (i32)
let multiplicacao2 = i32_max * i32_1; // -2 (i32)
let multiplicacao3 = (i32_1 as i64) * i641; // 4294967294 (i64)

// explicit conversion
let divisao1 = i32_2 / i32_1; // 2 (i32)
let divisao2 = i32_1 / i32_2; // 0 (i32)
let divisao3 = (i161 as i32) / i32_1; // 0 (i32)

// NOTA
// literais numéricas sem sufixo possuem o tipo _
// e não realizam operações matemáticas

// TODO converte para char e boolean</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>unchecked {

	int i32_1 = 2;
	int i32_2 = 4;
	int i32_min = Int32.MinValue;
	int i32_max = Int32.MaxValue;

	long i64 = i32_max; // implicit conversion 2147483647 (long)
	short i16 = (short)i32_max; // explicit conversion -1 (short)

	// usa o tipo maior
	var adicao1 = i32_max + 1; // -2147483648 (int)
	var adicao2 = i64 + i32_1; // 2147483649 (long)
	var adicao3 = i64 + i32_max; // 4294967294 (long)

	// usa o tipo maior
	var subtracao1 = i32_min - 1; // 2147483647 (int)
	var subtracao2 = i16 - i32_1; // -3 (int)
	var subtracao3 = i16 - i32_max; // -2147483648 (int)

	// usa o tipo maior
	var multiplicacao1 = i32_1 * i32_2; // 8 (int)
	var multiplicacao2 = i32_max * i32_1; // -2 (int)
	var multiplicacao3 = i32_1 * i64; // 4294967294 (long)

	// usa o tipo maior
	var divisao1 = i32_2 / i32_1; // 2 (int)
	var divisao2 = i32_1 / i32_2; // 0 (int)
	var divisao3 = i16 / i32_1; // 0 (int)

}



// conversão implícita se o número couber no outro
// byte -&gt; int, uint ou float por exemplo
// sbyte -&gt; int ou float

// conversão explícita
// entre integrals
// entre floats
// de floats para integrals

// tipo numerico não converte pra char

/*

When you convert from a double or float value to an integral type,
the value is truncated. If the resulting integral value is outside
the range of the destination value, the result depends on the
overflow checking context.

When you convert double to float, the double value is rounded
to the nearest float value. If the double value is too small
or too large to fit into the destination type, the result
will be zero or infinity.

When you convert decimal to float or double, the decimal value is rounded
to the nearest double or float value.
*/</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>

int i32_1 = 2;
int i32_2 = 4;
int i32_min = Integer.MIN_VALUE;
int i32_max = Integer.MAX_VALUE;

long i64 = i32_max; // implicit conversion 2147483647 (long)
short i16 = (short)i32_max; // explicit conversion -1 (short)

// usa o tipo maior
Object adicao1 = i32_max + 1; // -2147483648 (int)
Object adicao2 = i64 + i32_1; // 2147483649 (long)
Object adicao3 = i64 + i32_max; // 4294967294 (long)

// usa o tipo maior
Object subtracao1 = i32_min - 1; // 2147483647 (int)
Object subtracao2 = i16 - i32_1; // -3 (int)
Object subtracao3 = i16 - i32_max; // -2147483648 (int)

// usa o tipo maior
Object multiplicacao1 = i32_1 * i32_2; // 8 (int)
Object multiplicacao2 = i32_max * i32_1; // -2 (int)
Object multiplicacao3 = i32_1 * i64; // 4294967294 (long)

// usa o tipo maior
Object divisao1 = i32_2 / i32_1; // 2 (int)
Object divisao2 = i32_1 / i32_2; // 0 (int)
Object divisao3 = i16 / i32_1; // 0 (int)

// TODO char converte tb</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

// só usa um único tipo numérico double
// não há o que converter

// números não sofrem overflow nem underflow,
// e não dão aviso se você tentar passar
// dos limites

let i = Number.MAX_VALUE;
let j = Number.MAX_VALUE + 1; // não dá aviso
if (i === j) {
	console.log('j foi limitado');
}

i = -i
j = -j - 1; // não dá aviso
if (i === j) {
	console.log('j foi limitado');
}</code
>
</div>

</div>



<h3 id='conversoesnumericasfuncoes'>Argumentos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>/*

{

// conversão explícita de int para byte 1
this.recebeByte((byte)1);

// conversão explícita 44
this.recebeByte((byte)300);

}

private void recebeByte(byte numero) {
	System.out.println("\nRecebe byte");
	System.out.println(numero);
}
*/
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// só usa um único tipo numérico double
// não há o que converter</code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposchar'>Chars</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>NSNumber* someChar = @'T';
NSNumber* someChar = [NSNumber numberWithChar:'T'];</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// só usa strings
// não possui chars</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposstring'>Strings</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>auto cString = "mãe d'água";
auto cStringEscape = "A primeira faz \"tchan\"";
auto rawString = R"(A segunda faz "tchun")";
auto html = R"(&lt;em class="especial"&gt;ênfase&lt;/em&gt;)";

auto meuSeparador = R"meuSeparador(aa)meuSeparador";
auto meuSeparador = R"meuSeparador( )" )meuSeparador"; // FIXME highlighter raw string

auto calvinHarris = "how deep\nis your love"; // 2 linhas

auto pareceMasNaoE = "começa e \
termina na mesma linha?"; // 1 linha apenas

// várias linhas
auto josePauloPaes = "Meu amor é simples, Dora,\n\
Como a água e o pão.\n\
\n\
Como o céu refletido\n\
Nas pupilas de um cão.";

// várias linhas
auto leminski = R"(Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.)";

// concatenação
// TODO</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>NSString* simples = @"";
NSMutableString* mutavel = @"";
char* cString = "";</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let simples = "A primeira faz \"tchan\" e só"

let calvinHarris = "how deep\nis your love" // 2 linhas

// concatenação - única maneira de usar várias linhas
let josePauloPaes = "Meu amor é simples, Dora," +
"\nComo a água e o pão." +
"\n" +
"\nComo o céu refletido" +
"\nNas pupilas de um cão."</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// tipo &amp;str

let simples = "A primeira faz \"tchan\" e só";

let calvinHarris = "how deep\nis your love"; // 2 linhas

// várias linhas
let josePauloPaes = "Meu amor é simples, Dora,
Como a água e o pão.

Como o céu refletido
Nas pupilas de um cão.";

// concatenação
let leminski = concat!("Merda é veneno.",
	"No entanto, não há nada",
	"que seja mais bonito",
	"que uma bela cagada.",
	"Cagam ricos, cagam pobres,",
	"cagam reis e cagam fadas.",
	"Não há merda que se compare",
	"à bosta da pessoa amada."
);

// tipo String

let simples = "A primeira faz \"tchan\" e só".to_string();</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var simples = "A primeira faz \"tchan\"";
var dupla = @"A segunda faz ""tchun""";
var interpolated = $"A segunda faz \"tchun\"";
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>String simples = "A primeira faz \"tchan\" e só";

String calvinHarris = "how deep\nis your love"; // 2 linhas

// concatenação - única maneira de usar várias linhas
String josePauloPaes = "Meu amor é simples, Dora,\n" +
"Como a água e o pão.\n" +
"\n" +
"Como o céu refletido\n" +
"Nas pupilas de um cão.";

// concatenação
StringBuilder leminskiBuilder = new StringBuilder();
leminskiBuilder.append("Merda é veneno.");
leminskiBuilder.append("\nNo entanto, não há nada");
leminskiBuilder.append("\nque seja mais bonito");
leminskiBuilder.append("\nque uma bela cagada.");
leminskiBuilder.append("\nCagam ricos, cagam pobres,");
leminskiBuilder.append("\ncagam reis e cagam fadas.");
leminskiBuilder.append("\nNão há merda que se compare");
leminskiBuilder.append("\nà bosta da pessoa amada.");

String leminski = leminskiBuilder.toString();

// StringBuilder não é thread safe
// Existe também a classe StringBuffer, que é</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

let simples = 'A primeira faz "tchan"';
let dupla = "A segunda faz 'tchun'";
let duplaTemplate = `A primeira faz "tchan". A segunda faz 'tchun'`;

const iara = "mãe d'água";
const modoDificil = 'O\'Reilly';
let html = '<em class="especial">ênfase</em>';

let calvinHarris = 'how deep\nis your love'; // 2 linhas

let pareceMasNaoE = 'começa e \
termina na mesma linha?'; // 1 linha apenas

// várias linhas
let josePauloPaes = 'Meu amor é simples, Dora,\n\
Como a água e o pão.\n\
\n\
Como o céu refletido\n\
Nas pupilas de um cão.';

// várias linhas
let leminskiTemplate = `Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.`;

let emoji = '😍';
let es5 = '\uD83D\uDE0D'; // code units / surrogates
let es6 = '\u{1F60D}'; // code point

// string é imutável, então seus métodos retornam novas instâncias
let beeGees = calvinHarris.replace('love', 'looove');

'Gritando'.toUpperCase(); // retorna 'GRITANDO'</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposarray'>Arrays</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// TODO
std::Array arrayCpp;
int arrayCPreAlocada[10];
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>int arrayCPreAlocada[10];

// uma dimensão
NSArray* prePopulada = @[@"p", @"r", @"e"];
NSArray* prePopuladaAntiga = [NSArray arrayWithObjects:@"o", @"l", @"d", nil];

int linhas = 2;
int colunas = 4;

// multi dimensional
int arrayCMdPreAlocada[linhas][colunas];
int arrayCMdPrePopulada[linhas][colunas] = {
	{0, 1, 2, 3},
	{4, 5, 6, 7}
};
int  arrayCMdPrePopulada2[linhas][colunas] = {0, 1, 2, 3, 4, 5, 6, 7};

for (NSString* valor in prePopulada) {
	//
}</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>var vazia = [Int]()
var vazia2:[Int] = []
var vazia3:Array&lt;Int&gt; = Array&lt;Int&gt;()

// uma dimensão
var preAlocada = [Int](count: 10, repeatedValue: 0)
preAlocada = [Int](count: 17, repeatedValue: 0)
var prePopulada = ["p", "r", "e"]
var prePopuladaT:[String] = ["p", "o", "p"]

let linhas = 2
let colunas = 4

// multi dimensional

var mdPrePopulada:[[Int]] = [
	[0, 1, 2, 3],
	[4, 5, 6, 7]
]









preAlocada[5] = 16000;
preAlocada[6...8] = [4, 20, 8];
let indice0 = prePopulada[0];
let two = mdPrePopulada[0, 2];

for valor in prePopulada {
	//
}

for (indice, valor) in prePopulada.enumerate() {
	// indice e valor
}

let tamanho =  = mdPrePopulada.count

// também temos a propriedade .empty
// e os métodos insert e removeAtIndex

// TODO testar coisas não cobertas na documentação
// comparar arrays</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>



// uma dimensão
int[] preAlocada = new int[10];
preAlocada = new int[17];
String[] prePopulada = {"p", "r", "e"};


int linhas = 2;
int colunas = 4;

// multi dimensional
byte[,] mdPreAlocada = new byte[linhas, colunas];
byte[,] mdPrePopulada = {
	{0, 1, 2, 3},
	{4, 5, 6, 7}
};

byte[][] arrayDeArraysPreAlocada = new byte[4][];
arrayDeArraysPreAlocada[0] = new byte[4];
// ...
byte[][] arrayDeArraysPrePopulada = {
	new byte[] {0, 1, 2, 3},
	new byte[] {4, 5, 6, 7}
};

preAlocada[5] = 16000;

String indice0 = prePopulada[0];
byte two = mdPrePopulada[0, 2];

foreach (var valor in prePopulada) {
	//
}





var tamanho = mdPrePopulada.Length

// TODO exemplos com var
// comparar arrays</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>



// uma dimensão
int[] preAlocada = new int[10];
preAlocada = new int[17];
String[] prePopulada = {"p", "r", "e"};


int linhas = 2;
int colunas = 4;

// multi dimensional
byte[][] mdPreAlocada = new byte[linhas][colunas];
byte[][] mdPrePopulada = {
	{0, 1, 2, 3},
	{4, 5, 6, 7}
};









preAlocada[5] = 16000;

String indice0 = prePopulada[0];
byte two = mdPrePopulada[0][2];

for (String valor : prePopulada) {
	//
}





int tamanho =  = mdPrePopulada.length;

// TODO comparar arrays

// pode mas não faça
// acho que tem pra quem vem do C
float podeMasNaoFaca[];
float[][] podeMasNaoFaca = {{}};
float[] podeMasNaoFaca[] = {{}};
float podeMasNaoFaca[][] = {{}};</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let vazia = [];



// uma dimensão
let preAlocada = new Array(10);
preAlocada = new Array(17);
let prePopulada = ["p", "r", "e"];


let linha = 0;
let coluna = 2;

// multi dimensional

let mdPrePopulada = [
	[0, 1, 2, 3],
	[4, 5, 6, 7]
];









preAlocada[5] = 16000;

let indice0 = prePopulada[0];
let two = mdPrePopulada[linha][coluna];

for (let valor of prePopulada) {
	//
}





let tamanho =  = mdPrePopulada.length;
// TODO comparar arrays</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposlista'>Listas</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>NSMutableArray* lista;</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>List&lt;object&gt; lista;
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let lista = [];</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='stackheap'>Stack e Heap</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// TODO
// tipos na stack por padrão

// tipos com new na heap

// enums?
// closures?
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// TODO
// structs na stack?
// e classes?
// enums?
// closures? tem closures?
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// TODO
// primtive on stack
// structs e enums value types - stack
// classes and closures on the heap
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO
// &amp;'static str statically allocated lives inside the program binary code
// stack by default
// heap
// String
// Box&lt;T&gt;
// Vec&lt;T&gt;
// growable on heap
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tipos valor na stack

// tipos primitivos na stack
int i = 10;

// enums na stack

// structs às vezes na stack
AStruct a;
Point p;

unsafe {
	byte* ponteiroDeArray = stackalloc byte[1024];
}

// nullables na stack

// tipos de referência na heap

// class, interface, array e delegate
string a = "Na heap"; // TODO verificar string heap
object o = new object();</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipos primitivos na stack
int i = 10;

// tipos de referência na heap
String s = "Na heap"; // TODO verificar string heap
Object o = new Object();
// enums tb?</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// Não existe uma definição
// na especificação
// A máquina virtual pode ou não
// alocar tipos primitivos
// e tipos de referência
// tanto na stack quanto na heap
</code
>
</div>

</div>

<ol>
	<li>C++ / Rust</li>
	<li>Objective-C / Swift / C#</li>
	<li>Java</li>
	<li>JavaScript</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='memoria'>Gerenciamento de memória</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++ - RAII</p>
<code class='cpp'
>// smart pointers
</code
>
</div>

<div class='codeblock'>
<p>Objective-C - Reference Counting</p>
<code class='objectivec'
>// ARC
</code
>
</div>

<div class='codeblock'>
<p>Swift - Reference Counting</p>
<code class='swift'
>// ARC
</code
>
</div>

<div class='codeblock'>
<p>Rust - Ownership e Lifetimes</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C# - Mark and Sweep GC</p>
<code class='cs'
>// weak references
</code
>
</div>

<div class='codeblock'>
<p>Java - Mark and Sweep GC</p>
<code class='java'
>// weak e ghost references
</code
>
</div>

<div class='codeblock'>
<p>JavaScript - Mark and Sweep GC</p>
<code class='javascript'
>// weak maps
</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='ponteiros'>Apontar é feio <span>Já dizia sua mãe</span></h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// variável tipo ponteiro
// ponteiros são nullable e podemos usar
// o valor especial nullptr, que representa
// um endereço de memória inválido
int* newNull{nullptr}; // C++11

// versões antigas usam o valor NULL, que é 0
// por baixo dos panos, também representando
// um endereço de memória inválido
int* oldNull{NULL}; // old

// existe ainda um tipo nullptr_t, que só pode
// receber nullptr e não aceita nenhum outro valor
// não imagino muitos usos para ele fora fazer
// piadinhas com o Elvis ;)
std::nullptr_t o_onlyNuuull{nullptr}; // C++11

// variáveis comuns tipo int
int intOriginal{90};
int segundoIntOriginal{95};

// variável tipo ponteiro de int (int*) aponta
// para variável comum tipo int
//  seu valor é um inteiro 32 ou 64 bits, representando
// o endereço de memória de intOriginal, que podemos
// obter usando o operador &amp;
int* ponteiroDeInt{&amp;intOriginal};

// para acessarmos o valor da variável através
// do ponteiro, usamos o operador *
cout &lt;&lt; "valor de int " &lt;&lt; *ponteiroDeInt &lt;&lt; endl; // 90

// se fizermos ele apontar para outra variável, seu valor muda
ponteiroDeInt = &amp;segundoIntOriginal;
cout &lt;&lt; "valor de int " &lt;&lt; *ponteiroDeInt &lt;&lt; endl; // 95

// também podemos pegar endereços de memória através de outros
// ponteiros, pois como disse acima, seus valores são numéricos
// 32 ou 64 bits
int* ponteiroDeSegundoInt{ponteiroDeInt};
cout &lt;&lt; "valor de int " &lt;&lt; *ponteiroDeSegundoInt); // 95

// TODO
// podemos atribuir enderecos aleatórios de memória para ponteiros :(

// podemos marcar o ponteiro como const, mas isso
// NÃO PREVINE QUE ELE APONTE PARA VARIÁVEIS DIFERENTES!!!
// TODO verificar se previne a modificação dos objetos apontados
const int* ponteiroConst{&amp;intOriginal}; // 90
ponteiroConst = &amp;segundoIntOriginal; // 95

// depois que não precisarmos mais dos ponteiros
// precisamos APAGÁ-LOS ANTES QUE SAIAM DE ESCOPO,
// para evitar que fiquem perdidos na memória
// sem podermos acessá-los (dangling pointers)
// devemos fazer isso apenas para ponteiros null
// ou ponteiros de objetos alocados na heap
// através do operador new
delete newNull;
delete oldNull;

// o gerenciamento manual dos ponteiros com delete
// não é recomendado, e existem classes que os apagam
// automaticamente e de maneira determinística assim
// que saem de escopo
auto ponteiroSmart{std::make_unique&lt;int&gt;(1000)};
auto ponteiroSmartShared{std::make_shared&lt;int&gt;(1001)};

// TODO old boost smart pointers

// embora isso não seja necessário para ponteiros int*
// existe uma outra característica dessas classes, que
// é não permitir o valor nullptr, uma vez que seu tipo
// é especificado
auto semNullPointer{std::make_unique&lt;int&gt;(nullptr)}; // erro :)

// embora NULL seja um valor váido para int*, uma vez que
// NULL na verdade é 0 por baixo dos panos
auto semNullPointer{std::make_unique&lt;int&gt;(NULL)}; // funciona!

// além disso, não é possível mudar o endereço para o qual
// esse tipo de ponteiro aponta uma segunda vez
auto semSegundaChance{std::make_unique&lt;int&gt;(1000)};
// semSegundaChance = &amp;intOriginal; // erro
// semSegundaChance = ponteiroDeInt; // erro

// TODO referências
// referências não são ponteiros oficialmente segundo
// a especificacão

// não podem ser nullptr nem NULL
int&amp; ponteiroRefNullPointer{nullptr}; // erro :)
int&amp; ponteiroRefNULL{NULL}; // erro :)

int&amp; ponteiroRef{intOriginal}; // 90
ponteiroRef = segundoIntOriginal; // 95

const int&amp; ponteiroConstRef{intOriginal}; // 90
ponteiroConstRef = segundoIntOriginal; // erro, não é mutável :)

// não pode pegar o endereço de referências

// ponteiros para arrays
// ponteiros para funções
// void*
// ponteiros de ponteiros
// referências de ponteiros</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// variável tipo ponteiro
// ponteiros são nilable e podemos usar
// o valor nil, que representa
// um endereço de memória inválido
int* nilPointer = nil; // Objective-C

// é possível usar do C o valor NULL, que é 0
// por baixo dos panos, também representando
// um endereço de memória inválido
int* cNullPointer = NULL; // C</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>var nilPointer:UnsafeMutablePointer&lt;int&gt; = nil

// variáveis comuns tipo int
let intOriginal = 90
let segundoIntOriginal = 95

// int* ponteiroDeInt = &amp;intOriginal;
var ponteiroDeInt:UnsafeMutablePointer&lt;Int&gt; = &amp;intOriginal

print(ponteiroDeInt) // 90

ponteiroDeInt = &amp;segundoIntOriginal
print(ponteiroDeInt) // 95

let ponteiroDeSegundoInt = ponteiroDeInt
print(ponteiroDeSegundoInt) // 95

// const int* ponteiroDeInt = &amp;intOriginal;
var ponteiroConst:UnsafePointer&lt;Int&gt; = &amp;intOriginal
ponteiroConst = &amp;segundoIntOriginal

// mais ou menos const int&amp; ponteiroConstRef; ??
let ponteiroConstRef:UnsafePointer&lt;Int&gt; = &amp;intOriginal

// TODO
// podemos atribuir endereços aleatórios de memória para ponteiros ??

// ponteiro de array

// ponteiros para funções?

// void* ponteiroGenerico;
var ponteiroGenerico:UnsafePointer&lt;Void&gt;

// int** ponteiroDePonteiro;
let ponteiroDePonteiro = AutoreleasingUnsafeMutablePointer&lt;Int?&gt; // tem que ser nullable?</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO
let p:*const i32 = ptr::null();
let p:*mut i32 = ptr::null();

let x = 5;
let raw = &amp;x as *const i32;

let mut y = 10;
let raw_mut = &amp;mut y as *mut i32;

let points_at = unsafe { *raw };

unsafe {
	let points_at = *raw;
}

use std::mem;

unsafe {
	let a = [0u8, 0u8, 0u8, 0u8];
	let b = mem::transmute::<[u8; 4], u32>(a);
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>using System;

namespace MarcoLuglio.PonteirosExample {

	class MainClass {

		public static void Main(string[] args) {

			// C# requer um contexto unsafe para utilização de ponteiros
			// Existem vários contexto que podem ser marcados como unsafe,
			// mas vou mostrar apenas o bloco de código unsafe
			unsafe {

				// TODO não pode null pointer

				// variáveis comuns tipo int
				int intOriginal = 90;
				int segundoIntOriginal = 95;

				// variável tipo ponteiro de int (int*)
				// aponta para variável comum tipo int
				// seu valor é um inteiro 64 bits (long), representando
				// o endereço de memória de intOriginal, que podemos obter
				// usando o operador &amp;
				int* ponteiroDeInt = &amp;intOriginal;

				// para acessarmos o valor da variável comum
				// através do ponteiro, usamos o operador *
				Console.WriteLine(@"valor de int {0} ", *ponteiroDeInt); // 90

				// se fizermos ele apontar para outra variável, seu valor muda
				ponteiroDeInt = &amp;segundoIntOriginal;
				Console.WriteLine(@"valor de int {0} ", *ponteiroDeInt); // 95

				// também podemos pegar endereços de memória através de outros
				// ponteiros, pois como disse acima, seus valores são números
				// tipo long
				int* ponteiroDeSegundoInt = ponteiroDeInt;
				Console.WriteLine(@"valor de int {0} ", *ponteiroDeSegundoInt); // 95

				// não é possível iniciar um ponteiro especificando diretamente
				// um endereço de memória
				int* enderecoQualquer = 10; // erro TODO verificar qual o erro

				// variável tipo ponteiro de buffer de bytes (bytes*)
				// aponta para array de bytes pré-alocada na stack
				// seu valor é igual ao endereço de memória da array de bytes
				byte* ponteiroDeArray = stackalloc byte[1024];

				// atribuímos o valor 5 para o índice 0 da array na stack
				// e o valor 11 para o índice 729
				// para acessarmos os índices, usamos o operador []
				ponteiroDeArray[0] = 5;
				ponteiroDeArray[729] = 11;

				// para acessarmos os valores nos índices, usamos o operador []
				byte indice0 = ponteiroDeArray[0];
				byte indice729 = ponteiroDeArray[729];
				Console.WriteLine(
					@"valores {0} e {1}",
					indice0, // 0
					indice729 // 1
				);

				// Notem que não há nada no ponteiro que indique se tratar de uma array!
				// Então como o compilador consegue diferenciar entre um ponteiro
				// para um byte comum e para uma array de bytes?
				// Ele não consegue! E dependendo do que você for fazer, nem vai lançar
				// uma exceção, apenas usar um valor incorreto.
				// Portanto cuidado ao utilizar ponteiros.
				// Por exemplo, seria válido (embora não recomendado) fazer isso:

				// byte byteOriginal = 37;
				// ponteiroDeArray = &amp;byteOriginal;

				// variável tipo ponteiro desconhecido
				// aponta para qualquer tipo de variável
				// quando null, seu valor é igual a 0, representando um endereço
				// de memória inválido
				// neste estado, *ponteiroGenerico lança NullReferenceException
				void* ponteiroGenerico = null;

				// esse tipo de ponteiro não é recomendado pois perde
				// a informação sobre o tipo para o qual ele aponta
				// essa característica é usada para fazer casts forçados
				// neste estado, seu valor é igual ao endereço de memória de intOriginal
				ponteiroGenerico = &amp;intOriginal;

				// para acessarmos o valor apontado por esse tipo de ponteiro
				// é necessário fazer um cast para o tipo que se deseja
				Console.WriteLine(@"valor de void {0} ", (*(int*)ponteiroGenerico)); // 90

				// agora seu valor é igual ao endereço de memória da array de bytes
				ponteiroGenerico = ponteiroDeArray;

				// podemos acessar os valores da array apontada pelo ponteiro
				// fazendo o cast apropriado
				// a mesma recomendação sobre o operador [] vale aqui, o compilador
				// não consegue identificar se o valor é uma array ou um byte simples
				// e vai acreditar no que você pedir
				Console.WriteLine(@"valor de void*[0] {0} ", ((byte*)ponteiroGenerico)[0]); // 5

				// variável tipo ponteiro de ponteiro de int (int**)
				// aponta para variável do tipo ponteiro de int
				// seu valor é igual ao endereço de memória de ponteiroGenerico
				// esse tipo de ponteiro é utilizado quando não desejamos copiar o
				// ponteiro original ao passá-lo para outras funções
				// uma vez que, como o ponteiro é um valor long, é passado por cópia
				// para as funções!
				int** ponteiroDePonteiro = (int**)&amp;ponteiroGenerico;

				// para acessarmos o valor no final da cadeia, usamos o operador * duas vezes
				Console.WriteLine(@"valor de ponteiro {0} ", **ponteiroDePonteiro);

				// se usarmos apenas uma vez, obteremos o ponteiro intermediário
				Console.WriteLine(
					@"endereço apontado pelo ponteiro intermediário {0} ",
					*ponteiroDePonteiro
				);

				// novamente, o compilador não pode ajudar muito caso você cometa um erro
				// por exemplo, se esquecermos do operador &amp; estaremos pegando o endereço
				// do valor final, ao invés do endereco do ponteiro intermediário, porém,
				// estamos dizendo ao compilador que é o endereço de um ponteiro legítimo
				ponteiroDePonteiro = (int**)ponteiroGenerico;

				// e só será lançado um erro se tentarmos acessar o valor final na cadeia
				// pois estaremos tentando usar um valor inteiro como se fosse um ponteiro
				Console.WriteLine(@"lança NullReferenceException {0} ", **ponteiroDePonteiro);

				// embora possamos criar ponteiros de ponteiros de ponteiros, acho que não
				// há uma aplicação muito prática pra isso
				int*** ponteiroDesnecessario;

				// TODO structs e fixed {}

			}

			// os ponteiros são desalocados após o término do contexto unsafe
			// não é necessário deletar os ponteiros manualmente

		}

	}

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>

<ol>
	<li>Swift</li>
	<li>C++ / C#</li>
	<li>Objective-C</li>
	<li>TODO classificar rust quando tiver um exemplo mais completo</li>
</ol>

<p>Não sei ao certo como avaliar esse tópico. Certamente não é a mesma coisa que gerenciamento de memória avaliado logo acima.
<br />Todas as linguagens permitem <code class='cpp'>void*</code> de alguma maneira
<br />Swift possui nomes mais claros em relação ao que cada ponteiro significa, embora a relação com suas versões em C não sejam fáceis de adivinhar. Não é necessário utilizar operadores diferentes para interagir com ponteiros.
<br />C# tenta evitar ao máximo o uso de ponteiros para tarefas corriqueiras. Mas faz muito pouco em relação à C++ para impedir problemas com a utilização de ponteiros quando são necessários, e acaba sendo equivalente em segurança, embora de maneira diferente. As duas linguagens possuem recursos para impedir ponteiros <code class='cs'>null</code>, e para apagar os ponteiros quando saírem de escopo. C# delimita claramente um bloco isolado para trabalhar com ponteiros, mas não permite marcá-los como <code class='cs'>const</code>. C++ ainda tem o operador <code class='cpp'>delete</code>, mas você não precisa usá-lo.
<br />Objective-C usa ponteiros estilo C. Requer muitas vezes que os objetos sejam alocados e depois inicializados num passo diferente. Como muitas coisas nessa linguagem, mistura sintaxes das duas linguagens. Por exemplo, <em>ivars</em> e <em>properties</em>.</p>

</section>



<section>

<h2 id='typealias'>Type Aliasing</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// simple type
using size_t = unsigned int;
typedef unsigned char BYTE; // old

// function type
using StrategyFunctionPointer = void(*)();

// ou
using StrategyFunction_t = void();
StrategyFunction_t* strategyFunctionPointer = f;

// ou
#include &lt;type_traits&gt;
using StrategyFunctionPointer = std::add_pointer&lt;void()&gt;::type;

// ou (old)
typedef void(*StrategyFunctionPointer)();

// só metodos ou funções tb?</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// simple type
@compatibility_alias UICollectionViewController PSTCollectionViewController;
typedef unsigned char BYTE;

// function type
typedef void(*StrategyFunctionPointer)();</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// simple type
typealias AudioSample = UInt16


// function type
typealias StrategyFunctionPointer = () -&gt; ()</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// simple type
type Name = String;


// function type
// TODO testar
// type StrategyFunctionPointer = Fn(i32) -&gt; i32;</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// simple type
using R = N1.N2;


// function type
delegate void StrategyFunctionDelegate();</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='funcoes'>Funções</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// declaração de função
void normal() { /**/ }



// expressão de função
auto expressao = normal;

std::string retorno() {
	return "retorno";
}

void superior(void(*funcao)()) {
	funcao();
}

void superior(std::string(*funcao)()) {
	funcao();
}

// ou

using Function_t = void();

void superior(Function_t* funcao) {
	funcao();
}

using Function2_t = std::string();

void superior(Function2_t* funcao) {
	funcao();
}

// ou

using FunctionPointer = void(*)();

void superior(FunctionPointer funcao) {
	funcao();
}

using FunctionPointer2 = std::string(*)();

void superior(FunctionPointer2 funcao) {
	funcao();
}

// ou

#include &lt;type_traits&gt;

using FunctionPointer = std::add_pointer&lt;void()&gt;::type;

void superior(FunctionPointer funcao) {
	funcao();
}

using FunctionPointer2 = std::add_pointer&lt;std::string()&gt;::type;

void superior(FunctionPointer2 funcao) {
	funcao();
}

superior(&amp;normal);
superior(&amp;retorno);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// declaração de função
void normal() { /**/ }

// TODO
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// declaração de função
func normal() { /**/ } // mesmo que -&gt; Void ou -&gt; ()
func normalVoid() -&gt; Void { /**/ }
func normalEmptyTuple() -&gt; () { /**/ }

// expressão de função
let expressao = normal;

func retorno() -&gt; String {
	return "retorno"
}








func retornoMisturado(numero:Int) -&gt; Any {
	if numero &gt; 0 {
		return "texto";
	}
	return 25;
}

func superior(funcao:() -&gt; Void) {
	funcao()
}

func superior(funcao:() -&gt; String) {
	funcao()
}

// TODO fazer superior com type aliasing
// TODO explicar nomes de parâmetros

superior(normal)
superior(normalVoid)
superior(normalEmptyTuple)
superior(retorno)</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// declaração de função
fn normal() { /**/ } // mesmo que -&gt; ()
fn normalUnit() -&gt; () { /**/ }


// expressão de função
let expressao = normal;

fn retorno() -&gt; &amp;'static str {
	"retorno" // sem ; no final
}

fn retorno() -&gt; &amp;'static str {
	return "retorno";
}


use std::any::Any;

fn retornoMisturado() -&gt; Any {
	// TODO
}




fn superior&lt;F&gt;(funcao:F) where F:Fn() {
	funcao();
}

fn superior&lt;F&gt;(funcao:F) -&gt; &amp;'static str where F:Fn() {
	funcao();
}

// TODO fazer superior com type aliasing

superior(normal);
superior(normalUnit);
superior(retorno);</code
>
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>//  declaração de função
function comum() { /**/ }
function normal(texto) { /**/ }


// expressão de função
const surpresa = function() { /**/ };
const outraSurpresa = normal;

// expressão de função anônima auto executável
// note os () em volta dela
(function() {
	//
})();

function retorno() {
	return "retorno";
}

function retornoMisturado(numero) {
	if (numero &gt; 0) {
		return 'texto';
	}
	return 25;
}

function superior(funcao) {
	funcao();
}

// chamadas perfeitamente válidas
comum(); // arguments será []
comum('lala'); // arguments será ['lala']
comum('lala', 'lolo'); // arguments será ['lala', 'lolo']
normal('lolo'); // texto será 'lolo' e  arguments será ['lolo']

// chamada válida
normal(); // o parâmetro texto terá o valor undefined e arguments será []

normal.call(this, 'dadaísmo'); // o parâmetro texto terá o valor 'dadaísmo' e arguments será ['dadaísmo']</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='funcoesvariadicas'>Funções e Métodos Variádicos</h3>

<div class='comparison'>

<div class='codeblock'>

<p>C++</p>
<code class='cpp'
>// argumentos do mesmo tipo

#include &lt;iostream&gt;

using std::string;
using std::cout;
using std::endl;

template&lt;typename... Tipos&gt;
void imprimirSimples(string titulo, Tipos... paginas) {

	const uint16_t quantidadeDeParametros {sizeof...(paginas)};

	// não pode criar uma array com 0 elementos
	if (quantidadeDeParametros == 0) {
		return;
	}

	// expande os argumentos
	int paginasArray[quantidadeDeParametros] {paginas...};

	for (auto pagina : paginasArray) {
		cout &lt;&lt; "Imprimindo página " &lt;&lt; pagina &lt;&lt; endl;
	}

}

imprimirSimples(1, 2, 5);</code
>

<p>C++</p>
<code class='cpp'
>// argumentos de todos os tipos

#include &lt;iostream&gt;
#include &lt;boost/range/irange.hpp&gt;

using std::string;
using std::cout;
using std::endl;

/// imprimirHelper template genérico
template&lt;typename T&gt;
void imprimirHelper(T pagina) {
	// poderia usar a linha abaixo para descobrir o tipo de T
	// porém, melhor usar o template especializado
	// if (std::is_same&lt;T, int&gt;::value) { /* ... */ }
	cout &lt;&lt; "Imprimindo outra coisa" &lt;&lt; endl;
}

/// imprimirHelper template especializado para int
template&lt;&gt;
void imprimirHelper&lt;int&gt;(int pagina) {
	cout &lt;&lt; "Imprimindo página " &lt;&lt; pagina &lt;&lt; endl;
}

/// imprimirHelper template especializado para boost::irange
template&lt;&gt;
void imprimirHelper&lt;boost::irange&gt;(boost::irange faixa) {
	cout &lt;&lt; "Imprimindo página " &lt;&lt; std::begin(faixa) &lt;&lt; " até " &lt;&lt; std::end(faixa) &lt;&lt; endl;
}


// foward declaration imprimir template?? Não estou certo da função disso :/
void imprimir(string titulo) {}

// implementação imprimir template
template&lt;typename Tipo, typename... Tipos&gt;
void imprimir(string titulo, Tipo pagina, Tipos... paginas) {
	// executa o helper especializado e chama recursivamente a si mesmo
	imprimirHelper(pagina);
	imprimir(titulo, paginas...);
}

imprimir&lt;int, boost::irange, string&gt;("resumo", 1, boost::irange(2, 5), "capítulo 2");</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// macros não seguras estilo C

#include &lt;iostream&gt;
#include &lt;cstdarg&gt;

void imprimirSimplesMacro(const std::string titulo, ...) {

	// va_list argumentos recebe o que vir depois do parâmetro titulo
	va_list argumentos;
	va_start(argumentos, titulo);

	int pagina;
	while (true) {
		pagina = va_arg(argumentos, int);
		if (pagina == -1) {
			break;
		}
		std::cout &lt;&lt; "Imprimindo " &lt;&lt; pagina &lt;&lt; std::endl;
	}

	va_end(argumentos);

}

// preciso sempre passar -1 no final como terminador
// se não dá overflow e lê pedaço de memória além do que deveria
imprimirSimplesMacro("resumo", 1, 2, 5, -1);</code
>
</div>

<div class='codeblock'>

<p>Swift</p>
<code class='swift'
>// argumentos do mesmo tipo

func imprimirSimples(titulo titulo:String, paginas:Int...) {
	for pagina in paginas {
		print("Imprimindo página \(pagina) num total de \(paginas.count)")
	}
}

imprimirSimples(titulo: "resumo", paginas: 1, 2, 5)</code
>

<p>Swift</p>
<code class='swift'
>// argumentos de todos os tipos

func imprimir(titulo titulo:String, paginas:Any...) {
	for valor in paginas {
		switch valor {
		case let pagina as Int:
			print("Imprimindo página \(pagina)")
		case let faixa as Range&lt;Int&gt;:
			print("Imprimindo páginas \(faixa.first!) até \(faixa.last!)")
		default:
			print("Imprimindo outra coisa")
		}
	}
}

imprimir(titulo: "resumo", paginas: 1, 2...5, "capítulo 2")</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
Até a versão 1.8 não possui
</div>

<div class='codeblock'>

<p>C#</p>
<code class='cs'
>// argumentos do mesmo tipo

void ImprimirSimples(string titulo, params int[] paginas) {
	foreach (int pagina in paginas) {
		System.Console.WriteLine(
			@"Imprimindo pagina {0} num total de {1}",
			pagina,
			paginas.Length
		);
	}
}

ImprimirSimples(@"resumo", 1, 2, 5);</code
>

<p>C#</p>
<code class='cs'
>// argumentos de todos os tipos

void Imprimir(string titulo, params object[] paginas) {
	foreach (object valor in paginas) {
		if (valor is int) {
			System.Console.WriteLine(@"Imprimindo página {0}", valor);
		} else if (valor is IEnumerable&lt;int&gt;) {
			System.Console.WriteLine(
				@"Imprimindo páginas {0} até {1}",
				(valor as IEnumerable&lt;int&gt;).First(),
				(valor as IEnumerable&lt;int&gt;).Last()
			);
		} else {
			System.Console.WriteLine(@"Imprimindo outra coisa");
		}
	}
}

Imprimir(@"resumo", 1, Enumerable.Range(2, 4), @"capítulo 2");</code
>
</div>

<div class='codeblock'>

<p>Java</p>
<code class='java'
>// argumentos do mesmo tipo

void imprimirSimples(String titulo, int... paginas) {
	for (int pagina : paginas) {
		System.out.println(String.format("Imprimindo página %1", pagina));
	}
}

imprimirSimples("resumo", 1, 2, 5);</code
>

<p>Java</p>
<code class='java'
>// argumentos de todos os tipos

void imprimir(String titulo, Object... paginas) {
	for (Object valor : paginas) {
		if (valor instanceof Integer) {
			System.out.println(String.format("Imprimindo página %d", valor));
		} else if (valor instanceof Range&lt;Integer&gt;) {
			System.out.println(String.format(
				"Imprimindo páginas %d até %d",
				((Range&lt;Integer&gt;)valor).getMinimum(),
				((Range&lt;Integer&gt;)valor).getMaximum()
			));
		} else {
			System.out.println("Imprimindo outra coisa");
		}
	}
}

imprimir("resumo", 1, Range.between(2, 5), "capítulo 2");</code
>
</div>

<div class='codeblock'>

<p>JavaScript</p>
<code class='javascript'
>'use strict';

// argumentos do mesmo tipo

function imprimirSimples(titulo, ...paginas) {
	for (let pagina of paginas) {
		console.log(`Imprimindo página ${pagina}`);
	}
}

imprimirSimples("resumo", 1, 2, 5);</code
>

<p>JavaScript</p>
<code class='javascript'
>'use strict';

// argumentos de todos os tipos

function imprimir(titulo, ...valores) {
	for (let valor of valores) {
		if (Number.isInteger(valor)) {
			console.log(`Imprimindo página ${valor}`);
		} else if ((valor.begin || valor.begin === 0)
			&amp;&amp; valor.end
			) {
			console.log(`Imprimindo páginas ${valor.begin} até ${valor.end}`);
		} else {
			console.log('Imprimindo outra coisa');
		}
	}
}

imprimir("resumo", 1, {begin: 2, end: 5}, "capítulo 2");</code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='lambdas'>Lambdas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>func superior(funcao:() -&gt; Void) {
	funcao()
}

// declaração simplificada
superior({() in print("lambda")})




func superior(funcao:(_:Int) -&gt; Int) {
	print(funcao(1))
}

// declaração simplificada
superior({x in x + 1})

// declaração completa
superior({(x:Int) -&gt; Int in
	return x + 1
})

// superior({x, y in x + y})</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public class Main {

	public static void Main(string[] args) {







		// declaração simplificada
		Main.superior(() =&gt; System.Console.WriteLine("lambda"));


		// declaração simplificada
		Main.superior(x =&gt; x + 1);

		// declaração completa
		Main.superior((int x) =&gt; {
			return x + 1;
		});

		// Main.superior(x, y -&gt; x + y);

	}

	public delegate void LambdaDelegate();




	public static void superior(LambdaDelegate funcao) {
		funcao();
	}

	public delegate int Lambda2Delegate(int x);




	public static void superior(Lambda2Delegate funcao) {
		System.Console.WriteLine(funcao(1));
	}

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {

		// não são funções de verdade, são classes
		// que podem ser declaradas como se fossem
		// funções lambda, mas ainda é preciso chamar
		// o método da classe para executá-las
		// no caso do exemplo, o método se chama call

		// declaração simplificada
		Main.superior(() -&gt; System.out.println("lambda"));


		// declaração simplificada
		Main.superior(x -&gt; x + 1);

		// declaração completa
		Main.superior((int x) -&gt; {
			return x + 1;
		});

		// Main.superior(x, y -&gt; x + y);

	}

	@FunctionalInterface
	public interface Lambda {
		void call();
	}

	public static void superior(Lambda funcao) {
		funcao.call();
	}

	@FunctionalInterface
	public interface Lambda2 {
		int call(int x);
	}

	public static void superior(Lambda2 funcao) {
		System.out.println(funcao.call(1));
	}

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>function superior(funcao) {
	funcao();
}

// declaração simplificada
superior(() =&gt; console.log('lambda'));

// declaração antiga
superior(function() { /**/ });

function superior2(funcao) {
	console.log(funcao(1));
}

// declaração simplificada
superior(x =&gt; x + 1);

// declaração completa
superior((x) =&gt; {
	return x + 1;
});

// superior(x, y =&gt; x + y)</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='funcoesinternas'>Funções Internas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>void externa() {



	auto internaLambda = [](){ /**/ };

	// ou

	struct internaFunctor { // testar isso
		void operator()() { /**/ }
	};

	internaLambda();
	internaFunctor();

}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// blocks em métodos
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>func externa() {

	func interna() { /**/ }

	// let internaLambda = {() in /**/ }

	interna()
	internaLambda();

}</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>fn externa() {

	fn interna() { /**/ }

	// let internaLambda = || { /**/ };

	interna();
	internaLambda();

}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public class Main {

	public static void Main(string[] args) {




		InternaDelegate interna = () =&gt; {
			System.Console.WriteLine(@"interna");
		};

		interna();

		Interna2Delegate interna2 = x =&gt; x + 1;

		var y = interna2(1);

		// ou

		Action interna = new Action(() =&gt; {
			System.Console.WriteLine(@"interna");
		})); // testar isso

		Func&lt;int&gt; interna2 = new Func&lt;int&gt;(x =&gt; x + 1);

		// C# 7 deverá permitir funções locais também

	}

	delegate void InternaDelegate();




	delegate int Interna2Delegate(int x);

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {

		// não são funções de verdade
		// ver lambdas acima para explicação

		Funcional interna = () -&gt; {
			System.out.println("interna");
		};

		interna.call();

		Funcional2 interna2 = x -&gt; x + 1;

		int y = interna2.call(1);

	}

	@FunctionalInterface
	public interface Funcional {
		void call();
	}

	@FunctionalInterface
	public interface Funcional2 {
		int call(int x);
	}

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>function externa() {

	function interna() { /**/ }

	let internaLambda = () =&gt; { /**/ };

	interna();
	internaLambda();

}</code
>
</div>

</div>



<ol>
	<li>Swift / Rust / JavaScript</li>
	<li>C++</li>
	<li>C#</li>
	<li>Java</li>
	<li>Objective-C</li>
</ol>

<p>Swift, Rust e JavaScript permitem a criacão natural de funções dentro de funções.
<br />C++ requer o uso de um lambda, mas seu tipo pode ser deduzido pelo compilador.
<br />C# também usa um lambda, mas seu tipo deve ser declarado por meio de um <code class='cs'>delegate</code>.
<br />Java não possui funções internas de verdade. São classes com uma sintaxe um pouco mais reduzida.
<br />Objective-C?</p>


<h3 id='closures'>Closures</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;iostream&gt;

int main(int argc, const char * argv[]) {

	using std::make_shared;
	using std::cout;
	using std::endl;

	auto facade = [](){
		// acessível somente pela função interna
		auto i = make_shared&lt;int&gt;();
		auto interna = [i](){
			(*i)++;
			return *i;
		};
		// expõe a função interna
		return interna;
	};

	auto closure = facade();
	cout &lt;&lt; closure() &lt;&lt; endl; // 1
	cout &lt;&lt; closure() &lt;&lt; endl; // 2

	return 0;

}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char * argv[]) {

	// typedef ajuda na legibilidade
	typedef int (^interna_t)(void);
	typedef interna_t (^facade_t)(void);

	facade_t facade = ^{
		// acessível somente pela função interna
		__block int i = 0;
		interna_t interna = ^{
			i++;
			return i;
		};
		// expõe a função interna
		return interna;
	};

	interna_t closure = facade();
	NSLog(@"%i", closure()); // 1
	NSLog(@"%i", closure()); // 2

	return 0;

}</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>







func facade() -&gt; () -&gt; Int {
	// acessível somente pela função interna
	var i = 0
	func interna() -&gt; Int {
		i = i + 1
		return i
	}
	// expõe a função interna
	return interna
}

let closure = facade();
print(closure()); // 1
print(closure()); // 2</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>



public class MainClassClosure {

	delegate int InternaDelegate();




	static InternaDelegate Facade() {
		// acessível somente pela função interna
		int i = 0;
		InternaDelegate interna = () =&gt; {
			i++;
			return i;
		};
		// expõe a função interna
		return interna;
	}

	public static void Main(string[] args) {
		var closure = Facade();
		System.Console.WriteLine(closure()); // 1
		System.Console.WriteLine(closure()); // 2
	}

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>

<code class='java multipart'
>class ClosureState {
	public int i;
}

public class MainClosure {

	@FunctionalInterface
	public interface Interna {
		int call();
	}

	static Interna facade() {
		// acessível somente pela "função" interna
		final ClosureState closureState = new ClosureState();
		Interna interna = () -&gt; {
			closureState.i++;
			return closureState.i;
		};
		// expõe a "função" interna
		return interna;
	}

	public static void main(String[] args) {
		Interna closure = facade();
		System.out.println(closure.call()); // 1
		System.out.println(closure.call()); // 2
	}

}</code
>

<code class='java'
><strong>// PS: pra evitar ter que declarar uma classe ClosureState</strong>
<strong class='small comment'>// eu poderia ter feito</strong>
final Object closureState = new Object() {
	public int i;
};

<strong>// mas aí para ler as propriedades eu teria que usar</strong>
<strong class='small comment'>// reflection toda a vez</strong>
Class ClosureClass = closureState.getClass();

Field IField = ClosureClass.getDeclaredField("i")
IField.getInteger(closureState);</code
>

</div>

<!-- TODO testar captura de variáveis -->

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>





'use strict';

function facade() {
	// acessível somente pela função interna
	let i = 0;
	let interna = () =&gt; {
		i++;
		return i;
	};
	// expõe a função interna
	return interna;
}

let closure = facade();
console.log(closure()); // 1
console.log(closure()); // 2</code
>
</div>

</div>

<ol>
	<li>Swift / JavaScript</li>
	<li>Rust?</li>
	<li>C#</li>
	<li>C++</li>
	<li>Java</li>
	<li>Objective-C</li>
</ol>

<p>Swift e JavaScript são os mais sucintos. É verdade que é necessário saber da existência de <em>closures</em> para não criar uma sem querer, como muitos programadores JavaScript devem ter descoberto da pior maneira. Porém as novas regras de escopo, similares às das demais linguagens minimizam esse problema.
<br />Rust?
<br />Em comparação com as linguagens anteriores, C# requer apenas a declaração de um <code class='cs'>delegate</code> a mais.
<br />C++ por sua vez, requer cuidados no gerenciamento de memória das variáveis acessadas pela closure com <code class='cpp'>make_shared</code>.
<br />Java complica um pouco o padrão, requerendo que as variáveis sejam membros de um objeto marcado como <code class='java'>final</code>.
<br />Objective-C possui uma sintaxe bastante difícil para identificar as closures, e o uso de <em>aliases</em> torna as assinaturas um pouco mais legíveis. Também é necessário identificar de maneira especial as variáveis que serão usadas na closure com <code class='objectivec'>__block</code>.</p>

</section>



<section>

<h2 id='modulos'>Módulos</h2>

<div class='comparison large'>

<div class='codeblock'>

	<div class='pair'>

		<div>

<p>C++ Microsoft - DentroDoModulo.hpp</p>
<code class='cpp'
>
#pragma once

namespace marcoluglio {
	class DentroDoModulo {};
}</code
>

		</div>

		<div>

<p>C++ - DentroDoModulo.cpp</p>
<code class='cpp'
>
#include "DentroDoModulo.hpp"

namespace marcoluglio {
	//
}</code
>

		</div>

	</div>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include "DentroDoModulo.hpp"

int main(int argc, const char* argv[]) {
	using marcoluglio::DentroDoModulo;
	DentroDoModulo meuObjeto = DentroDoModulo();
}</code
>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>

<p>C++ - DentroDoModulo.hpp</p>
<code class='cpp'
>#ifndef MARCOLUGLIO_DENTRODOMODULO_HPP_INCLUDED
#define MARCOLUGLIO_DENTRODOMODULO_HPP_INCLUDED

namespace marcoluglio {
	class DentroDoModulo {};
}

#endif /* MARCOLUGLIO_DENTRODOMODULO_HPP_INCLUDED */</code
>

		</div>

		<div>

<p>C++ - DentroDoModulo.cpp</p>
<code class='cpp'
>
#include "DentroDoModulo.hpp"

namespace marcoluglio {
	//
}</code
>

		</div>

	</div>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include "DentroDoModulo.hpp"

int main(int argc, const char* argv[]) {
	using marcoluglio::DentroDoModulo;
	DentroDoModulo meuObjeto = DentroDoModulo();
}</code
>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>

<p>Objective-C - MLGDentroDoModulo.h</p>
<code class='objectivec'
>
#import &lt;Foundation/Foundation.h&gt;

@interface MLGDentroDoModulo : NSObject
	//
@end

</code
>

		</div>

		<div>

<p>Objective-C - MLGDentroDoModulo.m</p>
<code class='objectivec'
>
#import "MLGDentroDoModulo.h"

@implementation MLGDentroDoModulo
	//
@end</code
>

		</div>

	</div>

<p>Objective-C - main.m</p>
<code class='objectivec'
>#import &lt;Foundation/Foundation.h&gt;
#import "MLGDentroDoModulo.h"

int main(int argc, const char* argv[]) {
	MLGDentroDoModulo* meuObjeto;
	meuObjeto = [[MLGDentroDoModulo alloc] init];
	return 0;

	// não possui namespaces
	// a utilização de prefixos com 3 letras
	// ou mais nas classes é a alternativa
	// recomendada

}</code
>

</div>

<div class='codeblock'>
<p>Swift - DentroDoModulo.swift</p>
<code class='swift'
>// a criação de namespaces é implícita
// para cada módulo

// um módulo é um agrupamento macro, bem
// diferente do que se utiliza nas
// outras linguagens

// ele abrange um target inteiro de
// compilação como um framework,
// uma biblioteca ou um executável

import UIKit

class DentroDoModulo: UIViewController {
}</code
>

<p>Swift - main.swift</p>
<code class='swift'
>let meuObjeto = DentroDoModulo()</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>mod
</code
>
<p>Rust</p>
<code class='rust'
>use
</code
>
</div>

<div class='codeblock'>
<p>C# - DentroDoModulo.cs</p>
<code class='cs'
>namespace marcoluglio {
	public class DentroDoModulo { /**/ }
}</code
>
<p>C# - main.cs</p>
<code class='cs'
>using marcoluglio;

class MainClass {
	public static void Main(string[] args) {
		DentroDoModulo meuObjeto;
		meuObjeto = new DentroDoModulo();
	}
}</code
>
</div>

<div class='codeblock'>
<p>Java - marcoluglio/DentroDoModulo.java</p>
<code class='java'
>package marcoluglio;

public class DentroDoModulo { /**/ }</code
>
<p>Java - main.java</p>
<code class='java'
>import marcoluglio.DentroDoModulo;

public class OlaMundo {
	public static void main(String[] args) {
		DentroDoModulo meuObjeto;
		meuObjeto = new DentroDoModulo();
	}
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript compatibilidade</p>
<code class='javascript'
>'use strict';

define('dentroDoModulo', () =&gt; {
	const DentroDoModulo = class DentroDoModulo() { /**/ }
	return DentroDoModulo;
});

define(['dentroDoModulo'], (DentroDoModulo) =&gt; {
	let meuObjeto = new DentroDoModulo();
});
</code
>
</div>

<div class='codeblock'>
<p>JavaScript - DentroDoModulo.js</p>
<code class='javascript'
>'use strict';

export default class DentroDoModulo { /**/ }</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>'use strict';

import DentroDoModulo from 'DentroDoModulo';

let meuObjeto = new DentroDoModulo();</code
>
</div>

</div>

<ol>
	<li>C# / Java</li>
	<li>JavaScript</li>
	<li>Rust</li>
	<li>C++</li>
	<li>Swift</li>
	<li>Objective-C</li>
</ol>

<p>C# e Java possuem maior granularidade. A única diferença entre os dois é que o módulo em Java deve ser replicado na estrutura de pastas dos arquivos que contém as classes, ao passo que em C# não. Se você já teve que cavar dentro de mil pastas por classes Java sabe que isso acaba mais atrapalhando do que ajudando. Porém, deve haver certamente quem diga que a liberdade que C# proporciona nesse quesito pode ser mal utilizada e gerar confusão.
<br />JavaScript até a versão ES6, não possuía nenhuma sintaxe especial para definir módulos. Mesmo após a oficialização da especificação, nenhum navegador a implementou até o momento. O que vemos no exemplo é um padrão denominado <abbr title='Asynchronous Module Definition'>AMD</abbr> que é bastante flexível, porém um pouco redundante e propenso a erros.
<br />Rust?
<br />C++ possui passos manuais na definição de módulos. A sintaxe para aninhar <em>namespaces</em> só será melhorada na próxima especificação (c++1z). Oficialmente a forma de garantir que um módulo não seja importado mais de uma vez, e por consequência sobrescrito, é usar os <em>include guards</em> <code class='cpp'>#ifndef</code>, <code class='cpp'>#define</code> e <code class='cpp'>#endif</code>. A diretiva mais amigável <code class='cpp'>#pragma once</code> não é oficial, embora a maioria dos compiladores reconheça devido à sua popularidade.
<br />Swift tem uma definição tão abrangente de módulos que quase não se pode dizer que ele tenha uma.
<br />Objective-C herda de C?</p>

</section>



<section>

<h2 id='excecoes'>Exceções</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp multipart'
>#include &lt;exception&gt;

using std::exception;

try {
	throw anyType;
	// ou simplesmente
	throw;
} catch (const exception&amp; ex) {
	//
} catch (...) {
	//
}</code
>

<code class='cpp'
><strong>// NÃO COPIE!!! DEPRECATED!!!</strong>

// havia uma sintaxe para "checked exceptions"
int myfunction(int param) throw();
int myfunction(int param) throw(someType);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>- (void)someMethod {
	@try {
		//
	} @catch (NSException *exception) {
		@throw exception; //  rethrows exception?
	} @finally {
		//
	}
}

// ou

someCFunction(); // TODO</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>enum MLError : ErrorType {
	case Bad
	case Worse
}

func canThrowErrors() throws -&gt; String {
	throw MLError.Bad
}

func cannotThrowErrors() -&gt; String {
	//
}

defer {
	//
}

// usar do-catch, try?, try! ou indicar throws</code
>
<!-- https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html -->
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>match may_panic() {
	Ok(result) =&gt; println!("{}", result),
	Err(err) =&gt; println!("Error: {}", err),
}

// ou

let result = try!(may_panic());</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>try {

	someObject.mayThrowException();

} catch (Exception ex) {

	// rethrows exception
	throw;

	// ou throw nova exceção com InnerException
	// não devemos lançar System.Exception diretamente
	throw new ArgumentException("Novo erro", ex);

} finally {
	//
}

try {
	//
} catch {
	//
}

try {
	//
} finally {
	//
}</code
>
</div>

<div class='codeblock'>

<p>Java - Main.java</p>
<code class='java'
>public class Main {

	<strong>// Indicamos que não queremos cuidar da checked exception</strong>
	<strong class='small comment'>// neste ponto do código com "throws" e deixamos o erro</strong>
	<strong class='small comment'>// se propagar</strong>
	public static void main(String[] args) <strong class='small'>throws Exception</strong> {
		PodeOuNao problematico = new PodeOuNao();
		<strong>problematico.checkedMethod();</strong>
		problematico.uncheckedMethod();
	}

}</code
>

<p>Java - Main.java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {
		PodeOuNao problematico = new PodeOuNao();
		<strong>// Contemos a propagação da checked exception</strong>
		<strong class='small comment'>// com try catch</strong>
		<strong class='small'>try {</strong>
			<strong>problematico.checkedMethod();</strong>
		<strong class='small'>} catch (Exception ex) {</strong>
			//
		<strong>} finally {</strong>
			//
		<strong>}</strong>
		problematico.uncheckedMethod();
	}

}</code
>

<p>Java - Main.java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {
		PodeOuNao problematico = new PodeOuNao();
		try {
			problematico.uncheckedMethod();
		} catch (Exception ex) {
			// throw nova exceção com cause
			throw new RuntimeException(ex);
		} finally {
			//
		}
	}

}</code
>

<p>Java - PodeOuNao.java</p>
<code class='java'
>package marcoluglio.exceptionexample;

public final class PodeOuNao {

	// checked exceptions devem ser cercadas por
	// try catch ou o método deve indicar explicitamente
	// que pode lançá-las com "throws"
	public void checkedMethod() throws Exception {
		throw new Exception("pego na compilação!");
	}

	// unchecked exceptions não precisam de tais
	// cuidados
	public void uncheckedMethod() {
		throw new RuntimeException("pego na execução!");
	}

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>try {
	throw anyType;
	// mas geralmente
	throw new Error('Whoops!');
} catch (e if e instanceof Error) {
	//
} catch (ex) {
	throw ex; // rethrows
} finally {
	//
}

// TODO pode nested

try {
	// sem catch
} finally {
	//
}</code
>
<!-- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch -->
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='async'>Async</h2>

<!-- tasks, promises e futures, deferreds, generators, events/delegates -->


<h3 id='generators'>Generators</h3>

<h4>Yield</h4>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>

<p>C# - AnimadorGenerator.cs</p>
<code class='cs'
>using System.Collections.Generic;

namespace MarcoLuglio.ClosureGeneratorExample {

	public class AnimadorGenerator {

		// os parâmetros não podem ser ref nem out
		public IEnumerable&lt;float&gt; Animar(float inicio, float fim, int tempo) {

			var tempoAtual = 1;
			var delta = (fim - inicio) / tempo;
			var passo = 0f;

			while (tempoAtual &lt;= tempo) {
				try {
					passo = fim - (delta * (tempo - tempoAtual));
					tempoAtual += 1;
					yield return passo;
				} finally {
					// não posso usar catch com generators
				}
			}

			// também posso usar yield break; se quiser interromper

		}

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.ClosureGeneratorExample {

	public class MainClass {

		public static void Main(string[] args) {

			var animadorGenerator = new AnimadorGenerator();

			var animadorIterator = animadorGenerator.Animar(0, 100, 9);
			foreach (var resultado in animadorIterator) {
				Console.WriteLine(resultado);
			}

			// ou

			var animadorIterator = animadorGenerator.Animar(0, 100, 9).GetEnumerator();
			while (animadorIterator.MoveNext()) {
				var resultado = animadorIterator.Current;
				Console.WriteLine(resultado);
			}

		}

	}

}</code
>

</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>

<p>JavaScript - animar.js</p>
<code class='javascript'
>'use strict';






function* animar(inicio, fim, tempo) {

	var tempoAtual = 1;
	var delta = (fim - inicio) / tempo;
	var passo = 0f;

	while (tempoAtual &lt;= tempo) {
		try {
			passo = fim - (delta * (tempo - tempoAtual));
			tempoAtual += 1;
			yield passo;
		} catch (ex) {
			//
		}
	}

}






</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>'use strict';







let animadorIterador = animar(0, 100, 9);

for (let resultado of animadorIterator) {
	console.log(resultado.value);
}

// ou

do {
	let resultado = animadorIterador.next();
	if (resultado.value || resultado.value === 0) {
		console.log(resultado.value);
	}
} while (!resultado.done)</code
>

</div>

</div>



<h4>Closures</h4>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>

<p>C# - AnimadorClosure.cs</p>
<code class='cs'
>namespace MarcoLuglio.GeneratorExample {

	// assinatura da closure
	public delegate float? Next();







	public class AnimadorClosure {

		public static Next Animar(float inicio, float fim, int tempo) {

			// variáveis capturadas na closure
			var tempoAtual = 1;
			var delta = (fim - inicio) / tempo;
			var passo = 0f;


			// closure
			Next lambda = () =&gt; {
				if (tempoAtual &lt;= tempo) {
					passo = fim - (delta * (tempo - tempoAtual));
					tempoAtual += 1;
					return passo;
				}
				return null;
			};

			return lambda;

		}

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.GeneratorExample {

	class MainClass {

		public static void Main(string[] args) {

			var animadorClosure = AnimadorClosure.Animar(0, 100, 9);
			float? resultado;

			do {
				resultado = animadorClosure();
				Console.WriteLine(resultado);
			} while (resultado != null);

		}

	}

}</code
>

</div>

<div class='codeblock'>

<p>Java - AnimadorClosure.java</p>
<code class='java'
>package marcoluglio.generatorexample;

// as assinaturas possíveis das closures estão nesse pacote
import java.util.function.*;

class ClosureState {
	public int tempoAtual;
	public float delta;
	public Float passo;
}

public class AnimadorClosure {

	public static Supplier&lt;Float&gt; animar(float inicio, float fim, int tempo) {

		// variáveis capturadas na closure
		final ClosureState closureState = new ClosureState();
		closureState.tempoAtual = 1;
		closureState.delta = (fim - inicio) / tempo;
		closureState.passo = 0;

		// closure
		Supplier&lt;Float&gt; lambda = () -&gt; {
			if (closureState.tempoAtual &lt;= tempo) {
				closureState.passo = fim - (closureState.delta * (tempo - closureState.tempoAtual));
				closureState.tempoAtual += 1;
				return closureState.passo;
			}
			return null;
		};

		return lambda;

	}

}


</code
>

<p>Java - Main.java</p>
<code class='java multipart'
>
import java.util.function.*;
import marcoluglio.generatorexample.AnimadorClosure;

public class Main {

	public static void main(String[] args) {

		Supplier&lt;Float&gt; animadorClosure = AnimadorClosure.animar(0, 100, 9);
		Float resultado;

		do {
			resultado = animadorClosure.get();
			System.out.println(resultado);
		} while (resultado != null);

	}

}</code
>

<code class='java'
><strong>// PS: pra evitar ter que declarar uma classe ClosureState, eu poderia ter feito</strong>
final Object closureState = new Object() {
	public int tempoAtual;
	public float delta;
	public Float passo;
};

<strong>// mas aí para ler as propriedades eu teria que usar reflection toda a vez</strong>
Class ClosureClass = closureState.getClass();

Field TempoAtualField = ClosureClass.getDeclaredField("tempoAtual")
TempoAtualField.getInteger(closureState);

Field DeltaField = ClosureClass.getDeclaredField("delta")
DeltaField.getFloat(closureState);

Field PassoField = ClosureClass.getDeclaredField("passo")
PassoField.getFloat(closureState);</code
>

</div>

<div class='codeblock'>

<p>JavaScript - animarClosure.js</p>
<code class='javascript'
>'use strict';












animar(inicio, fim, tempo) {

	// variáveis capturadas na closure
	let tempoAtual = 1;
	let delta = (fim - inicio) / tempo;
	let passo = 0;


	// closure
	let lambda = () =&gt; {
		if (tempoAtual &lt;= tempo) {
			passo = fim - (delta * (tempo - tempoAtual));
			tempoAtual += 1;
			return passo;
		}
		return;
	};

	return lambda;

}




</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>







let animadorClosure = animar(0, 100, 9);
let resultado;

do {
	resultado = animadorClosure();
	console.log(resultado);
} while (resultado || resultado === 0);</code
>

</div>

</div>



<h4>Functors</h4>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>

<p>C# - Objeto Iterator</p>
<code class='cs'
>
</code
>

</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>



<h4>Classes</h4>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>

<p>C# - AnimadorIterator.cs</p>
<code class='cs'
>using System.Collections.Generic;

namespace MarcoLuglio.GeneratorExample {

	public class AnimadorIterator : IEnumerable&lt;float&gt;, IEnumerator&lt;float&gt; {

		public AnimadorIterator(float inicio, float fim, int tempo) {
			this.fim = fim;
			this.tempo = tempo;
			this.delta = (fim - inicio) / tempo;
			this.Reset();
		}

		#region interface IEnumerable

		public IEnumerator&lt;float&gt; GetEnumerator() { // implementação implícita
			return this;
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this;  // implementação explícita --^
		}

		#endregion

		#region interface IEnumerator

		public bool MoveNext() { // implementação implícita

			if (this.tempoAtual &lt;= this.tempo) {
				this.passo = this.fim - (this.delta * (this.tempo - this.tempoAtual));
				this.tempoAtual += 1;
				return true;
			}

			return false;

		}

		public float Current { // implementação implícita
			get { return this.passo; }
		}

		object System.Collections.IEnumerator.Current { // implementação explícita
			get { return this.passo; }
		}

		public void Reset() { // implementação implícita
			this.tempoAtual = 1;
			this.passo = 0;
		}

		public void Dispose() { /**/ } // implementação implícita

		#endregion

		private readonly int tempo;
		private int tempoAtual;
		private readonly float fim;
		private readonly float delta;
		private float passo;

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.GeneratorExample {

	class MainClass {

		public static void Main(string[] args) {

			var animadorIterator = new AnimadorIterator(0, 100, 9);

			foreach (var resultado in animadorIterator) {
				Console.WriteLine(resultado);
			}

		}

	}

}</code
>

</div>

<div class='codeblock'>

<p>Java - AnimadorIterator.java</p>
<code class='java'
>package marcoluglio.generatorexample;

import java.util.Iterator;

public class AnimadorIterator implements Iterable&lt;Float&gt;, Iterator&lt;Float&gt; {

	public AnimadorIterator(float inicio, float fim, int tempo) {
		this.fim = fim;
		this.tempo = tempo;
		this.delta = (fim - inicio) / tempo;
		this.reset();
	}

	// region Interface Iterable&lt;T&gt;

	@Override // "implementação explícita"
	public Iterator&lt;Float&gt; iterator() {
		return this;
	}

	// endregion




	// region Interface Iterator&lt;T&gt;

	@Override // "implementação explícita"
	public boolean hasNext() {
		if (this.tempoAtual &lt;= this.tempo) {
			return true;
		}
		return false;
	}

	@Override // "implementação explícita"
	public Float next() {
		this.passo = this.fim - (this.delta * (this.tempo - this.tempoAtual));
		this.tempoAtual += 1;
		return this.passo;
	}

	// endregion




	private void reset() {
		this.tempoAtual = 1;
		this.passo = 0;
	}





	private final int tempo;
	private int tempoAtual;
	private final float fim;
	private final float delta;
	private float passo;

}</code
>

<p>Java - Main.java</p>
<code class='java'
>

import marcoluglio.generatorexample.AnimadorIterator;

public class Main {

	public static void main(String[] args) {

		AnimadorIterator animadorIterador = new AnimadorIterator(0, 100, 9);

		for (float resultado : animadorIterador) {
			System.out.println(resultado);
		}

	}

}</code
>

</div>

<div class='codeblock'>

<p>JavaScript - Iterator.js</p>
<code class='javascript'
>class AnimadorIterator {

	constructor(inicio, fim, tempo) {
		Object.defineProperties(this, {
			_fim: {value: fim},
			_tempo: {value: tempo},
			_tempoAtual: {value: tempo, writable: true},
			_delta: {value: (fim - inicio / tempo)},
			_passo: {value: 0, writable: true}
		});
		Object.seal(this);
		this.reset();
	}

	reset() {
		this._tempoAtual = 1;
		this._passo = 0;
	}

	// iterador for of
	*[Symbol.iterator]() {
		if (this._tempoAtual &lt;= this.tempo) {
			this._passo = this._fim - (this._delta * (this._tempo - this._tempoAtual));
			this._tempoAtual += 1;
			yield this._passo;
		}
	}

}


































</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>







let animadorIterator = new AnimadorIterator(0, 100, 9);

for (let resultado of animadorIterator) {
	console.log(resultado);
}</code
>

</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='tasks'>Tasks</h3>

<div class='comparison'>

<div class='codeblock'>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;future&gt;
#include &lt;boost/algorithm/string.hpp&gt;

#include "taskFunction.hpp"

int main(int argc, const char* argv[]) {

	using std::async;
	using std::string;
	using std::cout;
	using std::endl;

	using MarcoLuglio::TaskExample::taskFunction;

	// alternativa 1: método
	// TODO

	// alternativa 2: função
	auto functionFuture = async(taskFunction, "função");

	// alternativa 3: lambda
	auto lambdaFuture = async([](string element) -&gt; string {
		boost::to_upper(element);
		return element;
	}, "lambda");


	// espera os Futures calcularem um valor
	// concreto antes de prosseguir
	cout &lt;&lt; functionFuture.get() &lt;&lt; endl;
	cout &lt;&lt; lambdaFuture.get() &lt;&lt; endl;

	return 0;

}</code
>

	<div class='pair'>

		<div>

<p>C++ - taskFunction.hpp</p>
<code class='cpp'
>#pragma once

#include &lt;string&gt;

namespace MarcoLuglio {
namespace TaskExample {

	using std::string;

	string taskFunction(string element);

}
}</code
>

		</div>

		<div>

<p>C++ - taskFunction.cpp</p>
<code class='cpp'
>#include &lt;boost/algorithm/string.hpp&gt;
#include "taskFunction.hpp"


namespace MarcoLuglio {
namespace TaskExample {

	using std::string;

	string taskFunction(string element) {
		boost::to_upper(element);
		return element;
	}

}
}</code
>

		</div>

	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>

<p>Swift - Console</p>
<code class='swift'
>// libdispatch ou Grande Central Dispatch
import Dispatch

// funções auxiliares para simplificar sincronização

func check(semaforo:dispatch_semaphore_t) -&gt; Int {
	let waitResult = dispatch_semaphore_wait(
		semaforo,
		dispatch_time(DISPATCH_TIME_NOW, 1_000_000_000)
	)
	return waitResult
}

func wait(semaforo:dispatch_semaphore_t) {
	while check(semaforo) != 0 { /**/ }
}

// tasks

var element = "lambda"

let utilityQueue = dispatch_get_global_queue(
	QOS_CLASS_UTILITY,
	0
)
let semaforo = dispatch_semaphore_create(0)

dispatch_async(utilityQueue) {
	element = element.uppercaseString
	print(element)
	dispatch_semaphore_signal(semaforo)
}

// espera os blocos terminarem antes de prosseguir
wait(semaforo)

/*
Os tipos pré-definidos de queues são:
QOS_CLASS_USER_INTERACTIVE - if it should not cause the ui to lag or hang
QOS_CLASS_USER_INITIATED - if is started by ui interaction such as a click
QOS_CLASS_UTILITY - if it is a slow operation such as io
QOS_CLASS_BACKGROUND - background tasks
*/</code
>

<p>Swift - UI</p>
<code class='swift'>// libdispatch ou Grande Central Dispatch
import Dispatch

// funções auxiliares para simplificar sincronização

func check(semaforo:dispatch_semaphore_t) -&gt; Int {
	let waitResult = dispatch_semaphore_wait(
		semaforo,
		dispatch_time(DISPATCH_TIME_NOW, 1_000_000_000)
	)
	return waitResult
}

func wait(semaforo:dispatch_semaphore_t) {
	while check(semaforo) != 0 { /**/ }
}

// tasks

var element = "lambda"

let utilityQueue = dispatch_get_global_queue(
	QOS_CLASS_UTILITY,
	0
)
let semaforo = dispatch_semaphore_create(0)

dispatch_async(utilityQueue) {
	element = element.uppercaseString
	let mainQueue = dispatch_get_main_queue()
	dispatch_async(mainQueue) {
		print(element)
		dispatch_semaphore_signal(semaforo)
	}
}

// espera os blocos terminarem antes de prosseguir
wait(semaforo)</code
>

</div>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.TaskExample {

	class MainClass {

		public static void Main(string[] args) {
			// async não pode ser usado no método
			// main, então chamamos no objeto
			var mainObject = new MainClass();
			mainObject.main();
		}

		private async void main() {
			var promise = new Promise(@"some value");
			var resultado = await promise.GetResultAsync();
			Console.WriteLine(@"esperou " + resultado);
		}

	}

}</code
>

<p>C# - Promise.cs</p>
<code class='cs'
>using System.Threading.Tasks;

namespace MarcoLuglio.TaskExample {

	public class Promise {

		public Promise(string element) {
			this.element = element;
		}

		public async Task&lt;string&gt; GetResultAsync() {
			return this.element.ToUpper();
		}

		string element;

	}

}</code
>

</div>

<div class='codeblock'>

<p>Java - Main.java</p>
<code class='java'
>

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

public class Main {

	public static void main(String[] args) {

		// gerencia threads
		ExecutorService executor = Executors.newFixedThreadPool(2);

		// alternativa 1: interface Callable
		Task callableTask = new Task("async");
		Future&lt;String&gt; taskFuture = executor.submit(callableTask);

		// alternativa 2: lambda Callable
		String element = "lambda";
		Future&lt;String&gt; lambdaFuture = executor.submit(() -&gt; {
			return element.toUpperCase();
		});

		// alternativa 3: Threads e Futures manuais sem executor
		Task manualTask = new Task("manual");
		FutureTask&lt;String&gt; manualFuture = new FutureTask&lt;String&gt;(manualTask);
		new Thread(manualFuture).start();

		try {

			// espera os Futures calcularem um valor
			// concreto antes de prosseguir
			System.out.println(taskFuture.get());
			System.out.println(lambdaFuture.get());
			System.out.println(manualFuture.get());

			// encerra as threads do executor
			executor.shutdown();

		} catch (InterruptedException e) {
			// fazer alguma coisa
		} catch (ExecutionException e) {
			// fazer alguma coisa
		}

	}

}</code
>

<p>Java - Task.java</p>
<code class='java'
>package marcoluglio.taskexample;

import java.util.concurrent.Callable;

public class Task implements Callable&lt;String&gt; {

	public Task(String element) {
		this.element = element;
	}

	@Override
	public String call() throws Exception {
		return this.element.toUpperCase();
	}

	String element;

}</code
>

</div>

<div class='codeblock'>

<p>Java Android - AsyncTask.java</p>
<code class='java'
>// TODO AsyncTask</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>function workAsync(element) {
	return new Promise((resolve, reject) =&gt; {
		resolve(element.toUpperCase());
	});
}

workAsync('some value')
	.then((result) =&gt; {
		console.log(result);
	});</code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='threads'>Threads</h3>

<div class='comparison'>

<div class='codeblock'>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;boost/algorithm/string.hpp&gt;
#include "cout_mutex.hpp" // para simplicidade do exemplo
#include "Model.hpp"
#include "ParallelWorker.hpp"
#include "parallelWorkerFunction.hpp"

int main(int argc, const char* argv[]) {

	using std::string;
	using std::cout;
	using std::endl;

	using std::make_unique;
	using std::thread;
	using std::ref;

	using MarcoLuglio::ThreadExample::Model;
	using MarcoLuglio::ThreadExample::ParallelWorker;
	using MarcoLuglio::ThreadExample::parallelWorkerFunction;

	// memória compartilhada entre as threads
	// como as threads não viverão mais que
	// a main thread, posso usar unique_ptr
	auto dataQueue = make_unique&lt;Model&gt;();
	dataQueue.Push("dislexicos");
	dataQueue.Push("devem");
	dataQueue.Push("ler");
	dataQueue.Push("frases");
	dataQueue.Push("assim");

	// alternativa 1: método
	auto worker{ParallelWorker(*dataQueue)};
	thread parallelThread{&amp;ParallelWorker::Work, worker};

	// alternativa 2: função
	thread functionThread{parallelWorkerFunction, ref(*dataQueue)};

	// alternativa 3: lambda
	thread lambdaThread{[](Model&amp; dataQueue){
		string element;
		auto sair = false;
		while (!sair) {
			element = dataQueue.Next();
			// deixa a thread terminar naturalmente
			if (element == "") {
				sair = true;
				continue;
			}
			boost::to_upper(element);
			cout_mutex.lock();
			cout &lt;&lt; element &lt;&lt; endl;
			cout_mutex.unlock();
		}
	}, ref(*dataQueue)};

	// espera as threads terminarem antes de prosseguir
	parallelThread.join();
	functionThread.join();
	lambdaThread.join();

}</code
>

<code class='cpp'
><strong>// TODO verificar isso tudo</strong>
<strong>// PS: unique_ptr devolve um ponteiro não copiável quando desreferenciado</strong>
auto dataQueue = make_unique&lt;Model&gt;();
auto copia = *dataQueue; // erro: não copiável
<strong>// por isso precisamos passar para as threads, um ponteiro do ponteiro</strong>
<strong class='comment small'>// ou uma referência do ponteiro</strong>
auto referenciaDoPonteiro*&amp; = ref(dataQueue);
<strong>// ou ainda, uma referência copiável do valor apontado</strong>
auto referencia&amp; = ref(*dataQueue);</code
>


	<div class='pair'>

		<div>

		<p>C++ - Model.hpp</p>
<code class='cpp'
>#pragma once

#include &lt;string&gt;
#include &lt;queue&gt;
#include &lt;thread&gt;

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;
	using std::queue;
	using std::mutex;

	// C++ possui classes nativas com acesso
	// sincronizado, mas não as utilizei para
	// demonstrar o uso de locks manuais
	class Model final {

	public:
		Model();
		~Model();
		void Push(string);
		string Next();

	private:

		queue&lt;string&gt; dataQueue;

		/// Lock simples explícita para sincronização
		mutex modelLock;

	};

}
}</code
>

		</div>

		<div>

<p>C++ - Model.cpp</p>
<code class='cpp'
>#include &lt;string&gt;
#include &lt;queue&gt;
#include &lt;thread&gt;
#include "Model.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;
	using std::queue;
	using std::lock_guard;
	using std::mutex;

	Model::Model() {
		dataQueue = queue&lt;string&gt;();
	};

	Model::~Model() {
		//
	};

	void Model::Push(string) {
		// só a main thread insere, então
		// não precisa sincronizar
		dataQueue.push(element);
	};

	string Model::Next() {
		// sincroniza o acesso das threads
		lock_guard&lt;mutex&gt; _{modelLock};
		if (!dataQueue.empty()) {
			string element = dataQueue.front();
			dataQueue.pop();
			return element;
		}
		// string não pode ser nullptr em c++
		return "";
	};

}
}</code
>

		</div>

	</div>

	<div class='pair'>

		<div>

<p>C++ - ParallelWorker.hpp</p>
<code class='cpp'
>#pragma once

namespace MarcoLuglio {
namespace ThreadExample {

	class Model;

	class ParallelWorker final {

	public:
		explicit ParallelWorker(Model&amp; model);
		~ParallelWorker();
		void Work();

	private:
		Model* dataQueue;
		std::string element;

		/// Flag para término da thread
		bool sair;

	};

}
}</code
>

		</div>

		<div>

<p>C++ - ParallelWorker.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;boost/algorithm/string.hpp&gt;
#include "cout_mutex.hpp" // para simplicidade do exemplo
#include "Model.hpp"
#include "ParallelWorker.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::cout;
	using std::endl;

	ParallelWorker::ParallelWorker(Model&amp; model) {
		dataQueue = &amp;model;
		sair = false;
	};

	ParallelWorker::~ParallelWorker() {
		//
	};

	void ParallelWorker::Work() {
		while (!sair) {
			element = dataQueue-&gt;Next();
			// deixa a thread terminar naturalmente
			if (element == "") {
				sair = true;
				continue;
			}
			boost::to_upper(element);
			cout_mutex.lock();
			cout &lt;&lt; element &lt;&lt; endl;
			cout_mutex.unlock();
		}
	};

}
}</code
>

		</div>

	</div>

	<div class='pair'>

		<div>

<p>C++ - parallelWorkerFunction.hpp</p>
<code class='cpp'
>#pragma once

namespace MarcoLuglio {
namespace ThreadExample {

	class Model;

	void parallelWorkerFunction(Model&amp; dataQueue);

}
}</code
>

		</div>

		<div>

<p>C++ - parallelWorkerFunction.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;boost/algorithm/string.hpp&gt;
#include "cout_mutex.hpp" // para simplicidade do exemplo
#include "Model.hpp"
#include "parallelWorkerFunction.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;
	using std::cout;
	using std::endl;

	void parallelWorkerFunction(Model&amp; dataQueue) {
		string element;
		auto sair = false;
		while (!sair) {
			element = dataQueue.Next();
			// deixa a thread terminar naturalmente
			if (element == "") {
				sair = true;
				continue;
			}
			boost::to_upper(element);
			cout_mutex.lock();
			cout &lt;&lt; element &lt;&lt; endl;
			cout_mutex.unlock();
		}
	}

}
}</code
>

		</div>

	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
<!--
http://www.cs.umd.edu/class/spring2010/cmsc498i/files/lectures/21_PerfConcurrency.pdf

https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html
https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html
https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html

https://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/pthread.3.html
-->
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>

<p>Swift - Cocoa threads</p>
<code class='swift'>import Foundation

func join(thread:NSThread) {
	while !thread.finished { /**/ }
}

public final class NSParallelWorker {

	@objc public func work() {
		// deixa a thread terminar naturalmente
		while !self.sair {
			print("parallel worker")
			self.sair = true
		}
	}

	private var sair:Bool = false

}

// foundation thread com métodos
let nsParallelWorker = NSParallelWorker()
let selector = #selector(NSParallelWorker.work)
let nsThread:NSThread = NSThread.init(
	target: nsParallelWorker,
	selector: selector,
	object: nil
	)
nsThread.start()

// espera as threads terminarem antes de prosseguir
join(nsThread)</code
>

<p>Swift - POSIX threads</p>
<code class='swift'>//int threadError = pthread_create(
//	&amp;posixThreadID,
//	&amp;attr,
//	&amp;PosixThreadMainRoutine,
//	NULL
//	);

let pThread:pthread_t;
let pThreadAttr:pthread_attr_t;
pthread_attr_init(UnsafeMutablePointer&lt;pthread_attr_t&gt;(pThreadAttr))
let threadError = pthread_create(
	UnsafeMutablePointer&lt;pthread_t&gt;(pThread),
	UnsafePointer&lt;pthread_attr_t&gt;(pThreadAttr),
	{(UnsafeMutablePointer&lt;Void&gt;) -&gt; UnsafeMutablePointer&lt;Void&gt; in
		//code
	}, nil)
// let modelLock:pthread_mutex_t =
// pthread_join(
//	pThread,
//	UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Void&gt;&gt;
//	);</code
>
<!--
usar semáforos para controlar acesso à coleção
dispatch tasks para uma única queue
usar uma queue que não modifica a coleção até processar tudo


dispatch_group_t myGroup = dispatch_group_create();
dispatch_group_async(myGroup, dispatch_get_global_queue(), ^{
	//stuff to do in the background
});

//do some stuff

dispatch_group_wait(myGroup, DISPATCH_TIME_FOREVER);
dispatch_release(myGroup);

NSTask executa um novo processo
override NSOperation :(

-->

</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// queue
use std::collections::vec_deque::VecDeque;

// threads
use std::thread;

// channels
use std::sync::mpsc::{Sender, Receiver};
use std::sync::mpsc;

fn uppercase(c:char) -&gt; char {
	c.to_uppercase().next().unwrap()
}

fn main() {

	let mut model = VecDeque::new();
	model.push_back("dislexicos");
	model.push_back("devem");
	model.push_back("ler");
	model.push_back("frases");
	model.push_back("assim");

	let (senderChannel, receiverChannel)
		:(Sender&lt;&amp;str&gt;, Receiver&lt;&amp;str&gt;)
		= mpsc::channel();

	// envia dados pelo canal
	for element in model {
		senderChannel.send(element);
	}

	// fecha o canal
	drop(senderChannel);

	// alternativa 1: thread e lambda
	let mut lambdaElement = "lambda";
	let lambda_thread = thread::spawn(move || {

		let mut element:&amp;str;
		let mut elementUppercase:String;

		// roda até o canal ser fechado
		for element in receiverChannel {
			let uppercase:String = element
				.chars()
				.map(uppercase)
				.collect();
			println!("{:?}", uppercase);
		}

		// poderíamos usar receiverChannel.recv().unwrap()
		// e receiverChannel.try_recv().unwrap()

	});

	// alternativa 2: Builder e lambda
	let mut builderElement = "builder";
	let builder_thread = thread::Builder::new()
		.name("builder thread".to_string())
		.spawn(move || {

		let uppercase:String = builderElement
			.chars()
			.map(uppercase)
			.collect();
		println!("{:?}", uppercase);

	});

	// espera as threads terminarem antes de prosseguir
	lambda_thread.join();
	builder_thread.unwrap().join();

}</code
>
</div>

<div class='codeblock'>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;
using System.Threading;

namespace MarcoLuglio.ThreadExample {

	public class MainClass {

		public static void Main(string[] args) {

			// memória compartilhada entre as threads
			var dataQueue = new Model();
			dataQueue.Push("dislexicos");
			dataQueue.Push("devem");
			dataQueue.Push("ler");
			dataQueue.Push("frases");
			dataQueue.Push("assim");





			// alternativa 1: método
			var worker = new ParallelWorker(dataQueue);
			var parallelThread = new Thread(worker.Work);
			parallelThread.Start();


			// alternativa 2: lambda
			var lambdaThread = new Thread(() =&gt; {
				string element;
				var sair = false;
				while (!sair) {
					// dataQueue capturado pelo lambda
					element = dataQueue.Next();
					// deixa a thread terminar naturalmente
					if (element == null) {
						sair = true;
						continue;
					}
					Console.WriteLine(element.ToUpper());
				}
			});
			lambdaThread.Start();


			// espera as threads terminarem antes de prosseguir
			parallelThread.Join();
			lambdaThread.Join();

		}

	}

}



</code
>

<p>C# - Model.cs</p>
<code class='cs'
>using System.Collections.Generic;

namespace MarcoLuglio.ThreadExample {

	// C# possui classes nativas com acesso
	// sincronizado, mas não as utilizei para
	// demonstrar o uso de locks manuais
	public sealed class Model {

		public Model() {
			this.modelLock = new object();
			this.dataQueue = new Queue&lt;string&gt;();
		}

		public void Push(string element) {
			// só a main thread insere, então
			// não precisa sincronizar
			this.dataQueue.Enqueue(element);
		}

		public string Next() {
			// sincroniza o acesso das threads
			lock (this.modelLock) {
				if (this.dataQueue.Count == 0) {
					return null;
				}
				return this.dataQueue.Dequeue();
			}
		}

		private readonly Queue&lt;string&gt; dataQueue;

		/// &lt;summary&gt;
		/// Lock simples explícita para sincronização
		/// &lt;/summary&gt;
		private readonly object modelLock;

	}

}</code
>

<p>C# - ParallelWorker.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.ThreadExample {

	public sealed class ParallelWorker {

		public ParallelWorker(Model dataQueue) {
			this.dataQueue = dataQueue;
		}

		// método "Main" da thread
		public void Work() {
			while (!this.sair) {
				this.element = this.dataQueue.Next();
				// deixa a thread terminar naturalmente
				if (this.element == null) {
					this.sair = true;
					continue;
				}
				Console.WriteLine(this.element.ToUpper());
			}
		}

		private Model dataQueue;
		private string element;

		/// &lt;summary&gt;
		/// Flag para término da thread
		/// &lt;/summary&gt;
		private bool sair = false;

	}

}</code
>

</div>

<div class='codeblock'>

<p>Java - Main.java</p>
<code class='java'
>




public class Main {

	public static void main(String[] args) {

		// memória compartilhada entre as threads
		Model dataQueue = new Model();
		dataQueue.push("dislexicos");
		dataQueue.push("devem");
		dataQueue.push("ler");
		dataQueue.push("frases");
		dataQueue.push("assim");

		// alternativa 1: subclasse de Thread
		ParallelThread parallelThread = new ParallelThread(dataQueue);
		parallelThread.start();

		// alternativa 2: interface Runnable
		Runnable parallelRunnable = new ParallelRunnable(dataQueue);
		Thread parallelRunnableThread = new Thread(parallelRunnable);
		parallelRunnableThread.start();

		// alternativa 3: lambda Runnable
		// ou interface funcional Runnable
		Runnable lambda = () -&gt; {
			String element;
			boolean sair = false;
			while (!sair) {
				// dataQueue capturado pelo lambda
				element = dataQueue.next();
				// deixa a thread terminar naturalmente
				if (element == null) {
					sair = true;
					continue;
				}
				System.out.println(element.toUpperCase());
			}
		};
		Thread lambdaRunnable = new Thread(lambda);
		lambdaRunnable.start();

		// espera as threads terminarem antes de prosseguir
		try {
			parallelThread.join();
			parallelRunnable.join();
			lambdaRunnable.join();
		} catch (InterruptedException e) {
			// fazer alguma coisa
		}

	}

}</code
>

<p>Java - Model.java</p>
<code class='java'
>package marcoluglio.threadexample;

import java.util.LinkedList;

// Java possui classes nativas com acesso
// sincronizado, mas não as utilizei para
// demonstrar o uso de locks manuais
public final class Model {

	public Model() {
		this.modelLock = new Object();
		this.dataQueue = new LinkedList&lt;String&gt;();
	}

	public void push(String element) {
		// só a main thread insere, então
		// não precisa sincronizar
		this.dataQueue.add(element);
	}

	public String next() {
		// sincroniza o acesso das threads
		synchronized(this.modelLock) {
			return this.dataQueue.poll();
		}
	}

	private LinkedList&lt;String&gt; dataQueue;

	/** Lock simples explícita para sincronização */
	private final Object modelLock; // TODO testar o final

}







</code
>

<p>Java - ParallelThread.java</p>
<code class='java'
>

package marcoluglio.threadexample;

public final class ParallelThread extends Thread {

	public ParallelThread(Model dataQueue) {
		this.dataQueue = dataQueue;
	}

	// método "main" da thread
	@Override
	public void run() {
		while (!this.sair) {
			this.element = this.dataQueue.next();
			// deixa a thread terminar naturalmente
			if (this.element == null) {
				this.sair = true;
				continue;
			}
			System.out.println(this.element.toUpperCase());
		}
	}

	private Model dataQueue;
	private String element;

	/** Flag para término da thread */
	private boolean sair = false;

}</code
>

<p>Java - ParallelRunnable.java</p>
<code class='java'
>package marcoluglio.threadexample;

public final class ParallelRunnable implements Runnable {

	public ParallelRunnable(Model dataQueue) {
		this.dataQueue = dataQueue;
	}

	// método "main" da thread
	@Override
	public void run() {
		while (!this.sair) {
			this.element = this.dataQueue.next();
			// deixa a thread terminar naturalmente
			if (this.element == null) {
				this.sair = true;
				continue;
			}
			System.out.println(this.element.toUpperCase());
		}
	}

	private Model dataQueue;
	private String element;

	/** Flag para término da thread */
	private boolean sair = false;

}</code
>

</div>

<div class='codeblock'>

<p>JavaScript - main.js</p>
<code class='javascript'
>'use strict';

// cria a worker thread de uso exclusivo
// da main thread
let webWorker = new Worker('worker.js');

// web workers não compartilham memória
// apenas trocam mensagens entre si
// e não podem acessar o DOM

// envia mensagens para a worker thread
webWorker.postMessage(['algum', 'valor']);
webWorker.postMessage([10, 20]);

// callback para recepção de mensagens
// da worker thread
webWorker.onmessage = (event) =&gt; {
	console.log(event.data);
};

// mata a thread imediatamente se quiser
// webWorker.terminate();</code
>

<p>JavaScript - worker.js</p>
<code class='javascript'
>'use strict';

// callback para recepção de mensagens
// da main thread (ui thread)
onmessage = (event) =&gt; {

	console.log(event.data[0]);
	console.log(event.data[1]);
	let result = event.data.join(' ');

	// envia mensagens para a main thread
	postMessage(result);

	// termina a thread se quiser
	// close();

};</code
>

</div>

<div class='codeblock'>

<p>JavaScript - sharedThread1.js</p>
<code class='javascript'
>'use strict';

<strong>// cria uma worker thread compartilhada</strong>
let <strong class='small'>webWorkerOp1</strong> = new <strong class='small'>SharedWorker(</strong>'worker.js'<strong class='small'>);</strong>

// envia mensagens para a worker thread compartilhada
webWorkerOp1<strong>.port</strong>.postMessage(['algum', 'valor']);
webWorkerOp1<strong>.port</strong>.postMessage([10, 20]);

// callback para recepção de mensagens
// da worker thread
webWorkerOp1<strong>.port</strong>.onmessage = (event) =&gt; {
	console.log(event.data);
};</code
>

<p>JavaScript - sharedThread2.js</p>
<code class='javascript'
>'use strict';

// cria uma worker thread compartilhada
let <strong>webWorkerOp2</strong> = new <strong>SharedWorker(</strong>'worker.js'<strong>);</strong>

// envia mensagens para a worker thread compartilhada
webWorkerOp2<strong>.port</strong>.postMessage(['misturar', 2]);
webWorkerOp2<strong>.port</strong>.postMessage([10, 20]);

// callback para recepção de mensagens
// da worker thread
webWorkerOp2<strong>.port</strong>.onmessage = (event) =&gt; {
	console.log(event.data);
};</code
>

<p>JavaScript - worker.js</p>
<code class='javascript'
>'use strict';

<strong>onconnect = (event) =&gt; {</strong>

	<strong>let port = event.ports[0];</strong>

	// callback para recepção de mensagens
	// da main thread (ui thread)
	<strong>port.</strong>onmessage = (event) =&gt; {

		console.log(event.data[0]);
		console.log(event.data[1]);
		let result = event.data.join(' ');

		// envia mensagens para a main thread
		<strong>port.</strong>postMessage(result);

		// termina a thread se quiser
		// close();

	};

<strong>};</strong></code
>

</div>

</div>



<ol>
	<li>C#</li>
	<li>C++</li>
	<li>JavaScript</li>
	<li>Java</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='diretivas'>Diretivas</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>/*
os() OSX, iOS, watchOS, tvOS, Linux
arch() x86_64, arm, arm64, i386
swift() &gt;= followed by a version number
*/

#if os(iOS) &amp;&amp; !swift(&gt;= 2)
	// statements
#elseif os(OSX)
	// statements
#else
	// statements
#endif</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO rust tem vários atributos

// compilação condicional com #cfg é um deles

// copiado de <a rel='external nofollow' href='http://rustbyexample.com/attribute/cfg.html'>rust by example</a> e <a rel='external nofollow' href='http://doc.rust-lang.org/reference.html#conditional-compilation'>docs oficiais</a>

#[cfg(...)]
#[cfg(target_os = "macos")]
#[cfg(any(foo, bar))]
#[cfg(all(unix, target_pointer_width = "32"))]
#[cfg(not(foo))]

#[cfg(target_os = "linux")]
fn are_you_on_linux() {
	println!("You are running linux!")
}

// function only gets compiled if target OS is *not* linux
#[cfg(not(target_os = "linux"))]
fn are_you_on_linux() {
	println!("You are *not* running linux!")
}

fn main() {
	are_you_on_linux();

	println!("Are you sure?");
	if cfg!(target_os = "linux") {
		println!("Yes. It's definitely linux!");
	} else {
		println!("Yes. It's definitely *not* linux!");
	}
}

/*
debug_assertions - Enabled by default when compiling
without optimizations. This can be used to enable extra
debugging code in development but not in production.
For example, it controls the behavior of the
standard library's debug_assert! macro.

target_arch = "..." - "x86", "x86_64", "mips",
"powerpc", "powerpc64", "arm", or "aarch64".

target_endian = "..." - "little", "big".
target_env = ".." - musl, msvc, gnu or blank
target_family = "..." - "unix" or "windows".

target_os = "..." - "windows", "macos", "ios", "linux",
"android", "freebsd", "dragonfly", "bitrig" , "openbsd"
or "netbsd".

target_pointer_width = "..." - "32" or "64"
target_vendor = "..." - apple, pc, "unknown".

test - Enabled when compiling the test harness
(using the --test flag).

unix - See target_family.
windows - See target_family.
*/</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// não podem ter whitespace antes!

#if DEBUG
	//
#elif TRACE
	//
#else
	//
#endif

// TODO ver oq o visual studio fornece

#define TESTE

#if TESTE

#warning TESTE is defined
// ou
#error TESTE is defined

#endif

#undef TESTE

// desabilitar avisos do compilador
#pragma warning disable 414, 3021
[CLSCompliant(false)]
public class C {
	static void Main() {}
}
#pragma warning restore 414, 3021

// garantir checksums de arquivos
#pragma checksum "filename.cs" "{3673e4ca-6098-4ec1-890f-8fceb2a794a2}" "{012345678AB}"
//                                         guid --^           checksum bytes --^

// #line é mais usado por source generators

// força step over pelo debugger
#line hidden

#line 837 "Meio inútil"
#line default</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict'; // modo estrito</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tuples'>Tuples</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;tuple&gt;

auto valores{std::make_tuple(3.8, 'A', "Lisa Simpson")};
auto valoresCpp17{1, -1};

std::get&lt;0&gt;(valores);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let someTuple: (Double, Double, Double) = (3.14159, 2.71828, 1.1)
someTuple.0
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let some_tuple = (1u8, 2u16, 2f32);
some_tuple.0;</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var population = new Tuple<string, int, int>("New York", 7891957, 7781984);
population.Item1;</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>

<ol>
	<li>Rust / Swift</li>
	<li>C++ / C#</li>
</ol>

<p>Rust e Swift lidam com <em>tuples</em> de modo bastante integrado à linguagem.<br />
C++ e C# tratam <em>tuples</em> como se fossem uma funcionalidade construída sobre o paradigma de orientaçµão à objetos.
</p>

</section>



<section>

<h2 id='objetos'>Objetos</h2>



<h3 id='structs'>Structs</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// funciona com herança e interfaces?
struct S {
	// idem classe, mas
	// padrão é public?
};

S s1;
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>struct S {
	//
};

struct S s1;</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>struct S : P, Q {

	// para structs, o padrão dos métodos
	// é ser const
	func constMethod() {
		//
	}

	mutating func structMethod() {
		//
	}

}

let s1 = S()</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>struct S {
	//
}

impl S {
	fn structMethod(&amp;self) {
		//
	}
}

let s1 = S {x:0, y:0};
s1.structMethod();</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// funciona com herança e interfaces?
public struct S {
	public void method() {
		//
	}
}

var s1 = new S();
var s2 = S(); // assim tem que inicializar os campos manualmente</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>



<h3>Classes</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>class C {

	static func myStaticMethod() {
		//
	}

	static var myStaticProp:S

	init() {
		//
	}

	deinit {
		//
	}

	private func myMethod() {
		self.prop
	}

	var getter:S {
		return ...
	}

	var getterSetter:S {

		get {
			return self._getterSetter
		}

		set(newValue) { // ou newValue implícito set {
			self._getterSetter = newValue
		}

	}

	lazy var prop:S

	private _getterSetter:S

	// setter pode ser menos visível que o getter
	public private(set) var numberOfEdits = 0

	// internal
	private(set) var numberOfEdits = 0

}

final class D : C, P, Q {

	override init() {
		super.init()
	}

	init?() {
		return nil
	}

	convenience init() {
		//
	}

	// o override pode ser mais visível!
	override internal func myMethod() {
		super.myMethod()
	}

}

final class R {

	required init() {
		//
	}

}

let o1 = C()
let o2 = D()</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>



<h3>Traits</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// Herança múltipla tem
// funcionalidade similar
// às traits</code
>
</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>Objective-C - Classe.h</p>
			<code class='objectivec'
			>@interface Classe : NSObject

@property (readonly) NSMutableArray* friends;
@property (copy) NSString* name;

-(void) sayHello;
-(void) sayGoodbye;

@end</code
			>
		</div>

		<div>
			<p>Objective-C - Classe.m</p>
			<code class='objectivec'
			>@implementation Person

@synthesize name = _name;
@synthesize friends = _friends;

-(id) init {

	self = [super init];

	if (self) {
		_friends = [[NSMutableArray alloc] init];
	}

	return self;

}

-(void) sayHello {
	NSLog(@"Hello, says %@.", _name);
}

-(void) sayGoodbye {
	NSLog(@"Goodbye, says %@.", _name);
}
@end</code
			>
		</div>

	</div>

	<div class='pair'>

		<div>
			<p>Objective-C - Traits.h</p>
			<code class='objectivec'
			>@interface Person (Traits)
-(void) addFriend:(Person *)aFriend;
-(void) removeFriend:(Person *)aFriend;
-(void) sayHelloToFriends;
@end</code
			>
		</div>

		<div>
			<p>Objective-C - Traits.m</p>
			<code class='objectivec'
			>#import "Person+Relations.h"

@implementation Person (Traits)

-(void) addFriend:(Person*)aFriend {
	[[self friends] addObject:aFriend];
}

-(void) removeFriend:(Person*)aFriend {
	[[self friends] removeObject:aFriend];
}

-(void) sayHelloToFriends {
	for (Person* friend in [self friends]) {
		NSLog(@"Hello there, %@!", [friend name]);
	}
}

@end</code
			>
		</div>

	</div>

</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>extension C {
	// posso adicionar initializers
	// métodos
	// e propriedades
}</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>trait HasArea {
	fn is_invalid(&amp;self) -&gt; bool { !self.is_valid() }
}

impl HasArea for Circle {
	// is_invalid "herdado"
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public static class MyExtensions {
	public static int WordCount(this String str) {
		//
	}
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='cpp'
>public interface Desenhavel {
	default void desenhar() {
		//
	}
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>



<h3>Interfaces</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// public internal private

// interfaces

protocol P {
	// pode conter variáveis e métodos
}

protocol Q {
	//
}

// structs

struct S : P, Q {

	// para structs, o padrão dos métodos
	// é ser const
	func constMethod() {
		//
	}

	mutating func structMethod() {
		//
	}

}

final class D : C, P, Q {

	override init() {
		super.init()
	}

	init?() {
		return nil
	}

	convenience init() {
		//
	}

	// o override pode ser mais visível!
	override internal func myMethod() {
		super.myMethod()
	}

}

let o2 = D()</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>trait HasArea {
	fn area(&amp;self) -&gt; f64;
}

impl HasArea for Circle {
	fn area(&amp;self) -&gt; f64 {
		std::f64::consts::PI * (self.radius * self.radius)
	}
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>



<h3>Herança</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>class C {

	static func myStaticMethod() {
		//
	}

	static var myStaticProp:S

	init() {
		//
	}

	deinit {
		//
	}

	private func myMethod() {
		self.prop
	}

	var getter:S {
		return ...
	}

	var getterSetter:S {

		get {
			return self._getterSetter
		}

		set(newValue) { // ou newValue implícito set {
			self._getterSetter = newValue
		}

	}

	lazy var prop:S

	private _getterSetter:S

	// setter pode ser menos visível que o getter
	public private(set) var numberOfEdits = 0

	// internal
	private(set) var numberOfEdits = 0

}

final class R {

	required init() {
		//
	}

}

let o1 = C()
let o2 = D()</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>trait Foo {
	fn foo(&amp;self);
}

trait FooBar : Foo {
	fn foobar(&amp;self);
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2>Resolução de tipos</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// dynamic dispatch
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// static e dynamic dispatch
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// ver "trait objects" na doc oficial
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tipogenerico'>Tipo Genérico</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// TODO esperar Swift 3
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// tipagem dinâmica
</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='operatoroverload'>Operator Overload</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO ver
// <a href='https://doc.rust-lang.org/std/ops/'>https://doc.rust-lang.org/std/ops/</a>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='indexing'>Indexing <span>Coleções de Objetos como Arrays</span></h2>

<div class='comparison'>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>C++ - OpOvCollection.hpp</p>
			<code class='cpp'
			>#pragma once

#include &lt;string&gt;

namespace MarcoLuglio {
namespace IndexerExample {

	using std::size_t;
	using std::string;
	using std::to_string;

	/// type alias para simplificar a sintaxe
	/// do retorno da função getArray
	using arrayReference = int[10];


	class OpOvCollection final {

	public:

		/// Classe auxiliar que permite alteração
		/// dos valores da coleção
		class Proxy final {

		public:

			Proxy(OpOvCollection&amp; collection, const size_t index)
				: collection{collection}, index{index} {}

			/// Overload do operador = para alteração
			/// dos valores da coleção
			int&amp; operator= (int newValue) {
				collection.array[index] = newValue;
				return collection.array[index]; // FIXME
			}

			/// C++ não possui uma classe base comum
			/// então as conversões para string devem ser
			/// implementadas sempre
			operator string() const {
				return to_string(collection.array[index]);
			}

		private:

			/// Referência da coleção original, para alteracão
			/// dos valores nos índices
			OpOvCollection &amp;collection;

			size_t index;

		};

		OpOvCollection();

		/// Overload do operador [] para obtenção
		/// dos valores da coleção
		/// Esse overload só possibilita retornar valores,
		/// portanto é necessário que ele retorne um objeto
		/// proxy ao invés do valor real, pois o proxy
		/// possibilita a alteração do valor na coleção
		/// original
		OpOvCollection::Proxy operator[](const size_t index);

	private:

		/// Coleção original
		int array[10];

	}

}
}</code
			>
		</div>

		<div>
			<p>C++ - OpOvCollection.cpp</p>
			<code class='cpp'
			>#include "OpOvCollection.hpp"

namespace MarcoLuglio {
namespace IndexerExample {

	using CollectionProxy = OpOvCollection::Proxy;
	using std::size_t;

	/// type alias para simplificar a sintaxe
	/// do retorno da função getArray
	using arrayReference = int[10];


	OpOvCollection::OpOvCollection() {
		// inicia a array com valores 0
		std::fill(this-&gt;array, this-&gt;array + 9, 0);
	}

	CollectionProxy OpOvCollection::operator[](const size_t index) {
		return CollectionProxy(*this, index);
	}

}
}</code
			>
		</div>

	</div>

	<p>C++ - main.cpp</p>
	<code class='cpp'
	>#include &lt;iostream&gt;
#include &lt;string&gt;
#include "OpOvCollection.hpp"

int main(int argc, const char * argv[]) {

	using std::cout;
	using std::endl;
	using std::string;

	using MarcoLuglio::IndexerExample::OpOvCollection;


	auto opOvCollection = OpOvCollection();
	opOvCollection[0] = 7;
	opOvCollection[1] = 45;
	opOvCollection[2] = 83;

	string value = (string)opOvCollection[2];

	// 83
	cout &lt;&lt; value &lt;&lt; endl;

	return 0;

}</code
	>

</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// pode ser indexada por inteiros
- (id)objectAtIndexedSubscript:(int)index;
- (void)setObject:(id)obj atIndexedSubscript:(int)index;

// ou por outros tipos
- (id)objectForKeyedSubscript:(NSString)key;
- (void)setObject:(id)obj forKeyedSubscript:(NSString)key;</code
>
</div>

<div class='codeblock'>

<p>Swift - SubscriptCollection.swift</p>
<code class='swift'
>// Swift não tem valores padrão para tipos, nem tem uma classe base comum
// Então usamos um protocolo que o tipo genérico deve seguir
public final class SubscriptCollection&lt;T:StringLiteralConvertible&gt; {

	init() {
		self.array = [T](count:10, repeatedValue:"")
	}

	// pode ser indexada por inteiros
	subscript(index:Int) -&gt; T {
		get {
			return self.array[index]
		}
		set(newValue) {
			self.array[index] = newValue
		}
	}

	// ou por outros tipos
	subscript(key:String) -&gt; T {
		get {
			var string:String
			var stringStart:String
			var stringIndex:String.Index
			for item in self.array {
				string = String(item)
				if string.isEmpty || string == "nil" {
					continue
				}
				stringIndex = string.startIndex.advancedBy(key.characters.count)
				stringStart = string.substringToIndex(stringIndex)
				if stringStart == key {
					return item
				}
			}
			// retorna uma string vazia se não encontrar um item pela chave
			// já que o tipo deve poder ser convertido para string
			return ""
		}
	}

	// e ainda por mais de um índice
	subscript(key:String, index:Int) -&gt; T {
		get {
			var string:String
			var stringStart:String
			var stringIndex:String.Index
			var currentIndex = 0
			for item in self.array {
				string = String(item)
				if string.isEmpty || string == "nil" {
					continue
				}
				stringIndex = string.startIndex.advancedBy(key.characters.count)
				stringStart = string.substringToIndex(stringIndex)
				if stringStart == key {
					if currentIndex == index {
						return item
					} else {
						currentIndex = currentIndex + 1
					}
				}
			}
			return ""
		}
	}

	var array:Array&lt;T&gt;

}</code
>

<p>Swift - main.swift</p>
<code class='swift'
>var subscriptCollection = SubscriptCollection&lt;String&gt;()
subscriptCollection[0] = "sundays are slow";
subscriptCollection[1] = "mondays are mediocre";
subscriptCollection[2] = "tuesday and wednesday too";
subscriptCollection[3] = "monday again";

// "tuesday and wednesday too"
print(subscriptCollection["tuesday"]);

// "monday again"
print(subscriptCollection["monday", 1]);</code
>

</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO ver
// <a href='https://doc.rust-lang.org/std/ops/trait.Index.html'>https://doc.rust-lang.org/std/ops/trait.Index.html</a>
// <a href='https://doc.rust-lang.org/std/ops/trait.IndexMut.html'>https://doc.rust-lang.org/std/ops/trait.IndexMut.html</a>
</code
>
</div>

<div class='codeblock'>

<p>C# - IndexedCollection.cs</p>
<code class='cs'
>namespace MarcoLuglio.IndexerExample {

	public sealed class IndexedCollection&lt;T&gt; {

		public IndexedCollection() {
			this.array = new T[10];
		}

		// pode ser indexada por inteiros
		public T this[int index] {
			get {
				return this.array [index];
			}
			set {
				this.array [index] = value;
			}
		}

		// ou por outros tipos
		public T this[string key] {
			get {
				foreach(var item in this.array) {
					if (item.ToString().StartsWith(key)) {
						return item;
					}
				}
				// retorna valor padrão para o tipo
				// se não encontrar um item pela chave
				return default(T);
			}
		}

		private T[] array;

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.IndexerExample {

	public class MainClass {
		public static void Main(string[] args) {

			var indexedCollection = new IndexedCollection&lt;string&gt;();
			indexedCollection[0] = @"sunday";
			indexedCollection[1] = @"monday I'm in love";
			indexedCollection[2] = @"tuesday and wednesday too";

			// "tuesday and wednesday too"
			Console.WriteLine(indexedCollection[@"tuesday"]);

		}
	}

}</code
>

</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

const indexingProxy = {

	get(alvo, propriedade, receiver) {

		// pode ser indexada por inteiros
		if (/^\d+$/.test(propriedade)) {
			return Reflect.get(alvo._array, propriedade, receiver);
		}

		// ou por outros tipos
		for (let valor of alvo._array) {
			if (valor.startsWith(propriedade)) {
				return valor;
			}
		}

		// retorna null
		// se não encontrar um item pela chave
		return null;

	},

	set(alvo, propriedade, valor, receiver) {

		// pode ser indexada por inteiros
		if (/^\d+$/.test(propriedade)) {
			alvo._array[propriedade] = valor;
			return true;
		}

		// ou por outros tipos
		alvo._array.push(valor);
		return true;

	}

};

class Collection {
	constructor() {
		Object.defineProperty(this, '_array', {value: []});
	}
}

const collection = new Collection();
const indexedCollection = new Proxy(collection, indexingProxy);

indexedCollection[0] = "sunday";
indexedCollection[1] = "monday I'm in love";
indexedCollection[2] = "tuesday and wednesday too";

// "tuesday and wednesday too"
console.log(indexedCollection["tuesday"]);</code
>
</div>

</div>

<ol>
	<li>C# / Swift</li>
	<li>JavaScript</li>
	<li>C++</li>
</ol>

<p>C# possibilita a criação de indexers de maneira relativamente simples. Swift requer passos extras devido ao fato de que não existe uma maneira rápida de obter o valor padrão de um tipo genérico, mas isso é compensado pelo fato de que é simples utilizar mais de um índice com o operador <code class='swift'>[]</code>.
<br />JavaScript não diferencia os operadores <code class='javascript'>.</code> e <code class='javascript'>[]</code>, mas se os utilizarmos ingenuamente, deixaremos o código lento, criando propriedades nos objetos em tempo de execução. Por isso o uso de um <code class='javascript'>Proxy</code> se faz necessário.
<br />C++ Também requer um proxy, mas por outros motivos. O operador <code class='cpp'>[]</code> em C++ só retorna valores, então devemos retornar um proxy que possui uma referência para a posição desejada na coleção original, e por meio dele alterar o valor nessa posição. Para que isso seja possível, o proxy também deve ter alguns overloads de operadores, tornando tudo mais verborrágico e complicado do que nas outras linguagens.</p>

</section>



<section>

<h2 id='templateid'>Interface Binária C <span>Foreign Function Interface</span></h2>



<h3>Exportar para C</h3>

<div class='comparison'>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>C++ - TabelaNutricional.hpp</p>
			<code class='cpp'
			>#pragma once

#ifdef __cplusplus
namespace MarcoLuglio {
namespace FFIExample {
extern "C" {
#endif

		struct TabelaNutricional {
			float valorEnergetico;
			float carboidratos;
			float proteinas;
			float gordurasTotais;
			float gordurasSaturadas;
			float gordurasTrans;
			float fibraAlimentar;
			float sodio;
		};

#ifdef __cplusplus
}
}
}
#endif</code
			>
		</div>

		<div>
			<p>C++ - TabelaNutricional.cpp</p>
			<code class='cpp'
			>#include "TabelaNutricional.hpp"

namespace MarcoLuglio {
namespace FFIExample {

	// TODO ver se esse arquivo
	// é realmente necessário

}
}</code
			>
		</div>

	</div>

	<div class='pair'>

		<div>
			<p>C++ - TabelaNutricionalBiblioteca.hpp</p>
			<code class='cpp'
			>#pragma once

#ifdef _MSC_VER // Visual Studio specific macro
#define DLLEXPORT __declspec(dllexport)
#else
#define DLLEXPORT __attribute__((visibility("default")))
#endif

#include "TabelaNutricional.hpp"

#ifdef __cplusplus
namespace MarcoLuglio {
namespace FFIExample {
extern "C" {
#endif

		DLLEXPORT struct TabelaNutricional calcular(float porcao);

#ifdef __cplusplus
}
}
}
#endif</code
			>
		</div>

		<div>
			<p>C++ - TabelaNutricionalBibliteca.cpp</p>
			<code class='cpp'
			>#include "TabelaNutricional.hpp"
#include "TabelaNutricionalBibliteca.hpp"

namespace MarcoLuglio {
namespace FFIExample {

	TabelaNutricional calcular(const float porcao) {

		TabelaNutricional tabela{};
		// ...
		return tabela;

	}

}
}</code
			>
		</div>

	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>-</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>-</code
>
</div>

<div class='codeblock'>
<p>Rust - TabelaNutricional.rs</p>
<code class='rust'
>#[repr(C)]
pub struct TabelaNutricional {
	valorEnergetico: f32,
	carboidratos: f32,
	proteinas: f32,
	gordurasTotais: f32,
	gordurasSaturadas: f32,
	gordurasTrans: f32,
	fibraAlimentar: f32,
	sodio: f32
}

#[no_mangle]
pub extern fn calcular(porcao:f32) -&gt; TabelaNutricional {
	let mut tabela = TabelaNutricional{
		valorEnergetico: 1_f32,
		carboidratos: 1_f32,
		proteinas: 1_f32,
		gordurasTotais: 1_f32,
		gordurasSaturadas: 1_f32,
		gordurasTrans: 1_f32,
		fibraAlimentar: 1_f32,
		sodio: 2_f32
	};
	// TODO usar porcao
	return tabela;
}

// compilar com
// rustc --crate-type dylib TabelaNutricional.rs
// vai gerar libTabelaNutricional.dylib</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>-</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>-</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>-</code
>
</div>

</div>



<h3>Importar do C</h3>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// usar LoadLibrary/GetProcAddress/FreeLibrary no Windows
// ou dlopen/dlsym/dlclose no Mac e Linux
// ou linkar as bibliotecas em tempo de compilação
// ou adicionar as referências nas IDEs respectivas</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>#[link(name = "TabelaNutricionalBiblioteca")]
extern "C" {
	fn calcular(porcao:f32) -&gt; i32;
}

fn main() {
	unsafe {
		calcular(20);
	}
}</code
>
</div>

<div class='codeblock'>
<p>C# - TabelaNutricionalBibliotecaNative.cs</p>
<code class='cs'
>// Adicionar a referência ao arquivo na IDE e:

using System.Runtime.InteropServices;

namespace MarcoLuglio.FFIExample {

	[StructLayout(LayoutKind.Sequential)]
	public struct TabelaNutricional {
		public float valorEnergetico;
		public float carboidratos;
		public float proteinas;
		public float gordurasTotais;
		public float gordurasSaturadas;
		public float gordurasTrans;
		public float fibraAlimentar;
		public float sodio;
	};

	public static class SalarioBibliotecaNative {

		[DllImport(
			"TabelaNutricionalBiblioteca.dll",
			CallingConvention = CallingConvention.Cdecl,
			EntryPoint = @"calcular"
		)]
		public static extern TabelaNutricional calcular(float porcao);

	}

}</code
>
</div>

<div class='codeblock'>

<p>Java - TabelaNutricional.java</p>
<code class='java'
>package marcoLuglio.ffiExample;

public final class TabelaNutricional {
	public float valorEnergetico;
	public float carboidratos;
	public float proteinas;
	public float gordurasTotais;
	public float gordurasSaturadas;
	public float gordurasTrans;
	public float fibraAlimentar;
	public float sodio;
}</code
>

<p>Java - TabelaNutricionalBibliotecaNative.java</p>
<code class='java'
>package marcoLuglio.ffiExample;

public final class TabelaNutricionalBibliotecaNative {

	static {System.loadLibrary("TabelaNutricionalBiblioteca");}

	private native TabelaNutricional calcular(float porcao);

}</code
>

<p>C - ?.c</p>
<code class='c'
>// TODO</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// No navegador não existe, mas veja
// <a href='https://webassembly.github.io/'>Web Assembly</a>
// Já usando node.js veja o <a href='https://github.com/node-ffi/node-ffi'>plug-in FFI</a></code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



</section>



<!--
<section>

<h2 id='templateid'>Template</h2>

<div class='comparison'>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>
-->

<!--
switch fallthrough
rust loop {}
swift lazy
c# explicit e implicit keywords
named breaks
goto?
enums
pass by reference, inout, ref, etc
unions?
guard e match
conversão de números com ? : e com += ver https://blog.jooq.org/2014/11/03/10-things-you-didnt-know-about-java/
observer ou eventos customizados
default parameter values, compare strings, valores não iniciados, null pointer exception, type erasure, linq, traits, extension methods, if (a = 1) if let while let, macros, floata == floatb ou Math.abs(floata - floatb) < 0.001

Laços for
Sobrecarga de função
Pointers, references, pointer to references, pointer to pointer, cast pointers to references
Classes, herança e controle de visibilidade
Eventos e setTimeout
Observar objetos KVO, notification center, etc.
Enums

Requisições http


Certificação
Overload pode ter visibilidade diferente?
Operator mess?
Cast um tipo para string chama tostring?

Functional interface exemplo com métodos possíveis default overwrite object etc.

Type erasure
Inicializar arrays
-->

</body>
</html>