<!DOCTYPE html>
<html lang="pt-br">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Filas (Queues)</title>
	<link rel='stylesheet' href='../../compartilhado/css/main.css' />
	<script type='module' src='../../compartilhado/js/utils.js'></script>
	<script type='module' src='../../compartilhado/js/index.js'></script>
	<script type='module' src='../../compartilhado/js/highlighter.js'></script>
	<script type='module' src='../../compartilhado/js/highlightEnhancer.js'></script>
	<script type='module' src='js/home.js'></script>
</head>
<body>

	<h1>Filas (Queues)</h1>
	<p>
		Pra melhorar responsividade das consultas...
	</p>



	<section>
		<h2>Índice</h2>
		<nav id='indice'></nav>
	</section>



	<section>

		<h2 id='tabela'>Tabela de banco relacional como fila</h2>

		<p>TODO</p>

		<div class='codeblock bubaloop'>
			<p>SQL</p>
			<code class='sql bubaloop'
><span class='keyword'>set</span> <span class='keyword'>nocount</span> <span class='boolean'>on</span>
<span class='keyword'>declare</span> <span class='symbol'>@queueid</span> <span class='type'>int</span>

<span class='keyword'>while</span> (<span class='keyword'>select</span> <span class='function'>count</span>(*) <span class='keyword'>from</span> <span class='symbol'>dbo</span>.<span class='symbol'>Queue</span> <span class='keyword'>with</span> (<span class='keyword'>updlock</span>, <span class='keyword'>readpast</span>)) >= 1

<span class='keyword'>begin</span>

	<span class='keyword'>begin</span> <span class='keyword'>tran</span> <span class='symbol'>Tran1</span>

	<span class='keyword'>select</span> <span class='keyword'>top</span> <span class='number'>1</span>
		<span class='symbol'>@queueid</span> = <span class='symbol'>QueueId</span>
	<span class='keyword'>from</span>
		<span class='comment'>-- updlock impede updates e deletes nas linhas selecionadas, mas permite leitura</span>
		<span class='comment'>-- readpast ignora linhas com lock</span>
		<span class='symbol'>dbo</span>.<span class='symbol'>Queue</span> <span class='keyword'>with</span> (<span class='keyword'>updlock</span>, <span class='keyword'>readpast</span>)

	<span class='keyword'>print</span> <span class='string'>'processing queueid # '</span> + <span class='function'>cast</span>(<span class='symbol'>@queueid</span> <span class='keyword'>as</span> <span class='type'>varchar</span>)

	<span class='comment'>-- account for delay in processing time</span>
	<span class='keyword'>waitfor</span> <span class='keyword'>delay</span> <span class='string'>'00:00:05'</span>

	<span class='keyword'>delete</span>
	<span class='keyword'>from</span>
		<span class='symbol'>dbo</span>.<span class='symbol'>Queue</span>
	<span class='keyword'>where</span>
		QueueId = <span class='symbol'>@queueid</span>

	<span class='keyword'>commit</span>

<span class='keyword'>end</span></code
			>
		</div>

		<!--
		Usar tabela como fila, usando updlock e readpast
Exemplo completo em: https://www.mssqltips.com/sqlservertip/1257/processing-data-queues-in-sql-server-with-readpast-and-updlock/
Algo como:
		-->

	</section>



	<section>

		<h2 id='servicebroker'>Service Broker (Corretor de Serviços)</h2>

		<p>TODO</p>

		<div class='codeblock bubaloop'>
				<p>SQL - Preparar para criar fila</p>
				<code class='sql bubaloop'
><span class='comment'>-- Create a Basic Queue</span>

<span class='comment'>-- Create a KEY. This is *required* in order to send / receive messages</span>
<span class='comment'>-- The database master key is a symmetric key used to protect the private keys</span>
<span class='comment'>-- of certificates and asymmetric keys that are present in the database</span>
<span class='keyword'>create</span> MASTER KEY ENCRYPTION BY PASSWORD = <span class='string'>'Password1'</span><span class='operator'>;</span>

<span class='comment'>-- Create a message type</span>
<span class='comment'>-- This could enforce a schema, but in this case enforces that it is well formed xml</span>
<span class='keyword'>create</span> MESSAGE TYPE
	MyMessage
VALIDATION <span class='operator'>=</span> WELL_FORMED_XML<span class='operator'>;</span>

<span class='comment'>-- Create a contract</span>
<span class='comment'>-- This defines the messages that can be sent in a conversation</span>
<span class='comment'>-- and defines which side of the conversation can send what.</span>
<span class='comment'>-- In this case only 1 type of message can be sent,</span>
<span class='comment'>-- but both by the INITIATOR and the TARGET</span>
<span class='keyword'>create</span> CONTRACT
	MyContract <span class='operator'>(</span>MyMessage SENT BY ANY<span class='operator'>);</span></code
	>
				<p>SQL - Criar fila de envio</p>
				<code class='sql bubaloop'
><span class='comment'>-- Creates a queue for sending the message, which is required to send a message</span>
<span class='keyword'>create</span> <span class='keyword'>queue</span>
	MySendingQueue
<span class='keyword'>with</span>
	STATUS <span class='operator'>=</span> <span class='boolean'>on</span><span class='operator'>,</span>
	RETENTION <span class='operator'>=</span> <span class='boolean'>off</span><span class='operator'>;</span>

<span class='comment'>-- Creates a sending service. This defines the queue that will send/receive</span>
<span class='comment'>-- messages, as defined by the contract.</span>
<span class='comment'>-- In this case it allows MySendingService to send (and receive) MyMessage</span>
<span class='keyword'>create</span> <span class='keyword'>service</span>
	MySendingService
<span class='keyword'>on</span> <span class='keyword'>queue</span>
	MySendingQueue <span class='operator'>(</span>MyContract<span class='operator'>);</span></code
	>
				<p>SQL - Criar fila de recebimento</p>
				<code class='sql bubaloop'
><span class='comment'>-- Creates a queue which will receive the message. In this case it is local,</span>
<span class='comment'>-- but this could equally be a remote queue. In this case we could create</span>
<span class='comment'>-- a route to the queue using create route</span>
<span class='keyword'>create</span> <span class='keyword'>queue</span>
	MyReceivingQueue
<span class='keyword'>with</span>
	STATUS <span class='operator'>=</span> <span class='boolean'>on</span><span class='operator'>,</span>
	RETENTION <span class='operator'>=</span> <span class='boolean'>off</span><span class='operator'>;</span>

<span class='comment'>-- Creates a receiving service.</span>
<span class='comment'>-- In this case it allows MyReceiveService to receive (and send) MyMessage</span>
<span class='keyword'>create</span> <span class='keyword'>service</span>
	MyReceivingService
<span class='keyword'>on</span> <span class='keyword'>queue</span>
	MyReceivingQueue <span class='operator'>(</span>MyContract<span class='operator'>);</span>

<span class='comment'>-- Creates a route to a service. This is not strictly required for local services</span>
<span class='comment'>-- but should be used to route to services on remote sql instances</span>
<span class='keyword'>create</span> <span class='keyword'>route</span>
	MyRoute
<span class='keyword'>with</span>
	SERVICE_NAME <span class='operator'>=</span> <span class='string'>'MyReceivingService'</span><span class='operator'>,</span>
	ADDRESS <span class='operator'>=</span> <span class='string'>'LOCAL'</span><span class='operator'>;</span></code
				>
				<p>SQL - Inserir na fila</p>
				<code class='sql bubaloop'
><span class='keyword'>declare</span> @handle <span class='type'>uniqueidentifier</span><span class='operator'>;</span>

<span class='keyword'>begin</span>
	<span class='keyword'>dialog</span> <span class='keyword'>conversation</span> <span class='symbol'>@handle</span>
<span class='keyword'>from</span>
	<span class='keyword'>service</span> MySendingService
<span class='keyword'>to</span>
	<span class='keyword'>service</span> <span class='string'>'MyReceivingService'</span>
<span class='keyword'>on</span>
	<span class='keyword'>contract</span> <span class='symbol'>MyContract</span><span class='operator'>;</span>

SEND ON <span class='keyword'>conversation</span> <span class='symbol'>@handle</span>
MESSAGE TYPE MyMessage
(<span class='string'>'&lt;message&gt;hello world&lt;/message&gt;</span>')</code
>
				<p>SQL - Ler a fila</p>
				<code class='sql bubaloop'
><span class='comment'>-- espia a fila</span>
<span class='keyword'>select</span> <span class='operator'>*</span> <span class='keyword'>from</span> <span class='symbol'>MyReceivingQueue</span>;

<span class='comment'>-- remove da fila</span>
<span class='keyword'>receive</span> <span class='keyword'>top</span> <span class='number'>1</span> <span class='operator'>*</span> <span class='keyword'>from</span> <span class='symbol'>MyReceivingQueue</span><span class='operator'>;</span></code
				>

				<p>SQL - Fechar a fila</p>
				<code class='sql bubaloop'
><span class='keyword'>end</span> <span class='keyword'>conversation</span> @handle <span class='keyword'>with</span> <span class='keyword'>cleanup</span>;</code
				>
			</div>

		<!--
Usar service broker do SQL Server
Exemplo completo em:https://blogs.msdn.microsoft.com/steven_bates/2006/01/05/service-broker-example-creation-of-a-simple-queue-and-posting-a-message/

Documentação conceitual:
https://technet.microsoft.com/en-us/library/ms345108(v=sql.90).aspx
https://msdn.microsoft.com/en-us/library/bb522893.aspx
		-->

	</section>



	<section>

			<h2 id='mesagequeue'>Message Queue (Mensageria)</h2>

			<p>TODO</p>

			<h3>Filas com Microsoft Message Queueing (MSMQ)</h3>

			<p>Primeiramente instalar no computador o MSMQ.</p>

			<div class='codeblock'>
				<p>Escrever numa fila</p>
				<code class='cs'
>using System;
using System.Messaging; // incluir nas referências System.Messaging

namespace MSMQ {

	class Program {

		static void Main(string[] args) {

			const string messageQueuePath = @".\Private$\nomeDaFila";
			MessageQueue messageQueue = null;
			var messageQueueLabel = @"this is a test queue";
			object message = @"This is a test message. Can it be anything?";
			var messageLabel = @"label for the message";

			try {
				if (MessageQueue.Exists(messageQueuePath)) {
					messageQueue = new MessageQueue(messageQueuePath);
					messageQueue.Label = messageQueueLabel;
				} else {
					MessageQueue.Create(messageQueuePath);
					messageQueue = new MessageQueue(messageQueuePath);
					messageQueue.Label = messageQueueLabel;
				}
				messageQueue.Send(message, messageLabel);
			} catch {
				throw;
			} finally {
				messageQueue.Dispose();
			}

		}

	}

}</code
				>
			</div>

			<div class='codeblock'>
				<p>Ler uma fila</p>
				<code class='cs'
>using System;
using System.Messaging; // incluir nas referências System.Messaging

namespace MSMQ {

	class Program {

		static void Main(string[] args) {

			const string messageQueuePath = @".\Private$\nomeDaFila";
			using (MessageQueue messageQueue = new MessageQueue(messageQueuePath)) {
				// usamos mensagem do tipo string, mas pode ser de qualquer classe, desde que ela seja marcada com o atributo [Serializable]
				messageQueue.Formatter = new XmlMessageFormatter(
					new Type[] { typeof(string) }
				);
				Message[] messages = messageQueue.GetAllMessages();
				foreach (var message in messages)
				{
					System.Diagnostics.Debug.WriteLine(message.Label);
					System.Diagnostics.Debug.WriteLine((string)message.Body); // fazer o cast equivalente se usar um tipo diferente de string
				}
				messageQueue.Purge();
			}

		}

	}

}</code
				>
			</div>

			<!--

Usar serviço de mensageria + C# como Apache Active MQ
http://activemq.apache.org/nms/examples.html

Exemplos em:
http://elemarjr.com/pt/2012/01/25/trocando-mensagens-entre-aplicaes-usando-msmq-usando-c/

documentação conceitual:
https://msdn.microsoft.com/en-us/library/ms711472(v=vs.85).aspx
		-->

	</section>



	<section>

		<h2 id='cloud'>Cloud</h2>

		<p>TODO</p>

		<p><a href='https://docs.microsoft.com/en-us/azure/storage/queues/storage-dotnet-how-to-use-queues'>Microsoft Azure queues</a></p>

		<div class='codeblock'>
			<p>App.config</p>
			<code class='html'
>&lt;configuration&gt;
	&lt;startup&gt;
		&lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" /&gt;
	&lt;/startup&gt;
	&lt;appSettings&gt;
		&lt;add key="StorageConnectionString" value="DefaultEndpointsProtocol=https;AccountName=account-name;AccountKey=account-key" /&gt;
	&lt;/appSettings&gt;
&lt;/configuration&gt;

&lt;-- ou se dev --&gt;

&lt;add key="StorageConnectionString" value="UseDevelopmentStorage=true;" /&gt;</code
			>
		</div>

		<p></p>


		<div class='codeblock'>
			<p>C#</p>
			<code class='cs'
>using Microsoft.Azure; // Namespace for CloudConfigurationManager
using Microsoft.WindowsAzure.Storage; // Namespace for CloudStorageAccount
using Microsoft.WindowsAzure.Storage.Queue; // Namespace for Queue storage types

// Parse the connection string and return a reference to the storage account.
CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
	CloudConfigurationManager.GetSetting("StorageConnectionString")
);

CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

// Retrieve storage account from connection string.
CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
	CloudConfigurationManager.GetSetting("StorageConnectionString")
);

// Create the queue client.
CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

// Retrieve a reference to a container.
CloudQueue queue = queueClient.GetQueueReference("myqueue");

// Create the queue if it doesn't already exist
queue.CreateIfNotExists();

// insert message

// Retrieve storage account from connection string.
CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
	CloudConfigurationManager.GetSetting("StorageConnectionString")
);

// Create the queue client.
CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

// Retrieve a reference to a queue.
CloudQueue queue = queueClient.GetQueueReference("myqueue");

// Create the queue if it doesn't already exist.
queue.CreateIfNotExists();

// Create a message and add it to the queue.
CloudQueueMessage message = new CloudQueueMessage("Hello, World");
queue.AddMessage(message);

// peek next message

// Retrieve storage account from connection string
CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
	CloudConfigurationManager.GetSetting("StorageConnectionString")
);

// Create the queue client
CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

// Retrieve a reference to a queue
CloudQueue queue = queueClient.GetQueueReference("myqueue");

// Peek at the next message
CloudQueueMessage peekedMessage = queue.PeekMessage();

// Display message.
Console.WriteLine(peekedMessage.AsString);

// de-queue (shift)

// Retrieve storage account from connection string
CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
	CloudConfigurationManager.GetSetting("StorageConnectionString")
);

// Create the queue client
CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();

// Retrieve a reference to a queue
CloudQueue queue = queueClient.GetQueueReference("myqueue");

// Get the next message
CloudQueueMessage retrievedMessage = queue.GetMessage();

//Process the message in less than 30 seconds, and then delete the message
queue.DeleteMessage(retrievedMessage);


// use async await

// Create the queue if it doesn't already exist
if(await queue.CreateIfNotExistsAsync()) {
	Console.WriteLine("Queue '{0}' Created", queue.Name);
} else {
	Console.WriteLine("Queue '{0}' Exists", queue.Name);
}

// Create a message to put in the queue
CloudQueueMessage cloudQueueMessage = new CloudQueueMessage("My message");

// Async enqueue the message
await queue.AddMessageAsync(cloudQueueMessage);
Console.WriteLine("Message added");

// Async dequeue the message
CloudQueueMessage retrievedMessage = await queue.GetMessageAsync();
Console.WriteLine("Retrieved message with content '{0}'", retrievedMessage.AsString);

// Async delete the message
await queue.DeleteMessageAsync(retrievedMessage);
Console.WriteLine("Deleted message");

</code
			>
		</div>

		<p><a href='https://docs.aws.amazon.com/sdk-for-net/v2/developer-guide/sqs-apis-intro.html'>AWS Simple Queue Service</a></p>
		<div class='codeblock'>
			<p>App.config</p>
			<code class='html'
>&lt;configuration&gt;
	&lt;startup&gt;
	&lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.0"/&gt;
	&lt;/startup&gt;
	&lt;configSections&gt;
	&lt;section name="aws" type="Amazon.AWSSection, AWSSDK"/&gt;
	&lt;/configSections&gt; &lt;aws profileName="{my_profile}"/&gt;
&lt;/configuration&gt;</code
			>
		</div>

		<p></p>


		<div class='codeblock'>
			<p>C#</p>
			<code class='cs'
>AmazonSQSConfig amazonSQSConfig = new AmazonSQSConfig();
amazonSQSConfig.ServiceURL = "http://sqs.us-west-2.amazonaws.com";

// AmazonSQSConfig amazonSQSConfig = new AmazonSQSConfig();
// amazonSQSConfig.ServiceURL = "http://sqs.cn-north-1.amazonaws.com";

amazonSQSClient = new AmazonSQSClient(amazonSQSConfig);

CreateQueueRequest createQueueRequest = new CreateQueueRequest();
createQueueRequest.QueueName = "MySQSQueue";
createQueueRequest.DefaultVisibilityTimeout = 10;

CreateQueueResponse createQueueResponse = amazonSQSClient.CreateQueue(createQueueRequest);


sendMessageRequest.QueueUrl = myQueueURL;
sendMessageRequest.MessageBody = "{YOUR_QUEUE_MESSAGE}"; // mensagem até 64kb de tamanho

SendMessageResponse sendMessageResponse = amazonSQSClient.SendMessage(sendMessageRequest);

ReceiveMessageRequest receiveMessageRequest = new ReceiveMessageRequest();
receiveMessageRequest.QueueUrl = myQueueURL;
ReceiveMessageResponse receiveMessageResponse = amazonSQSClient.ReceiveMessage(receiveMessageRequest);

if (result.Message.Count != 0) {
	for (int i = 0; i < result.Message.Count; i++)   {
		if (result.Message[i].Body == messageBody) {
		receiptHandle = result.Message[i].ReceiptHandle;
		}
	}
}

DeleteMessageRequest deleteMessageRequest = new DeleteMessageRequest();
deleteMessageRequest.QueueUrl = queueUrl;
deleteMessageRequest.ReceiptHandle = recieptHandle;
DeleteMessageResponse response = amazonSQSClient.DeleteMessage(deleteMessageRequest);</code
			>
		</div>

	</section>



</body>
</html>