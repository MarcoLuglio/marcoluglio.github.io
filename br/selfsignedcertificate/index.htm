<!DOCTYPE html>
<html
	xmlns='http://www.w3.org/1999/xhtml'
	lang='pt-BR'
	xml:lang='pt-br'
	>
<head>
	<title>Do zero</title>
	<meta charset='utf-8' />
	<link rel='stylesheet' href='../../compartilhado/css/main.css' />
</head>
<body>



	<h1>Do zero <span>projeto web desde o começo</span></h1>

	<p><strong>WORK IN PROGRESS como de sempre ;)</strong></p>

	<section>

	<h2>Índice</h2>
	<nav id='indice'>
	</nav>

	</section>



	<section>

	<h2>Instale</h2>

	<ul>
		<li><a href='https://git-scm.com/'>Git</a></li>
		<li><a href='https://www.docker.com/'>Docker</a></li>
		<li><a href='https://code.visualstudio.com/'>VS Code</a></li>
	</ul>

	<p>É tudo gratuito porque sabe como é no Brasil, com a economia e tal...</p>

	</section>



	<section>

	<h2 id='git'>Controle de versão - Git</h2>

	<p>
		Abra seu terminal.
		Eu estou usando um terminal sh like como sh, bash ou zsh.
		Se estiver no Windows, pode usar o terminal que vem com o Git, ou o <a href='https://docs.microsoft.com/en-us/windows/wsl/about'>Windows Subsystem for Linux</a>.
	</p>

	<p>Se você nunca usou git antes, vai ter que configurar o nome e email que vai em cada alteração de código que você realizar.</p>
	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>config</span> <span class='parameter'>--global</span> user.name "Marco Luglio"    <span class='comment'># comentários no terminal começam com #</span>
<span class='keyword'>git</span> <span class='keyword'>config</span> <span class='parameter'>--global</span> user.email marco@gmail.com  <span class='comment'># em cada quebra de linha pressione a tecla "Return" ↩︎ ou "Enter" ⌅ pra executar a linha ;)</span></code
		>
	</div>

	<p>Se precisar, verifique a documentação das <a href='https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup'>configurações iniciais</a>.</p>

	<p>
		Agora vamos criar pastas e repositórios separados para cada projeto.
		O motivo de separarmos cada projeto em repositórios diferentes vai ficar mais claro quando eu falar sobre <em>continuous integration / continuous deploy</em>.
	</p>
	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>cd</span> ~             <span class='comment'># cd = change directory e ~ = pasta do usuário atual</span>
<span class='keyword'>mkdir</span> dozero     <span class='comment'># mkdir = make directory</span>
<span class='keyword'>cd</span> dozero        <span class='comment'># tente digitar só as primeiras letras da pasta e pressionar tab ;)</span>

<span class='keyword'>mkdir</span> front-end  <span class='comment'># pressione a seta para cima, para trazer os comandos digitados anteriormente</span>
<span class='keyword'>cd</span> front-end
<span class='keyword'>git</span> <span class='keyword'>init</span>         <span class='comment'># inicia um repositório git na pasta atual</span>
<em>Initialized empty Git repository in /Users/marco/dozero/front-end/.git/</em>
<span class='keyword'>cd</span> ..            <span class='comment'># .. = pasta superior e . = pasta atual</span>

<span class='keyword'>mkdir</span> mobile
<span class='keyword'>cd</span> mobile
<span class='keyword'>git</span> <span class='keyword'>init</span>
<em>Initialized empty Git repository in /Users/marco/dozero/mobile/.git/</em>
<span class='keyword'>cd</span> ..

<span class='keyword'>mkdir</span> back-end
<span class='keyword'>cd</span> back-end
<span class='keyword'>git</span> <span class='keyword'>init</span>
<em>Initialized empty Git repository in /Users/marco/dozero/back-end/.git/</em>
<span class='keyword'>cd</span> ..

<span class='keyword'>ls</span> <span class='parameter'>-a</span> <span class='parameter'>-R</span>         <span class='comment'># ls = list, -a = all, -R = recursivo</span></code
		>
	</div>
	<p>
		Isso deve mostrar as pastas escondidas <code class='shell'>.git</code> que indicam quais pastas são repositórios.
		É dentro das pastas <code class='shell'>.git</code> que ficam todo o histórico de alterações do seu código.
		Os arquivos <code class='shell'>config</code> dentro das pastas <code class='shell'>.git</code> são de interesse especial para nós.
		Vamos dar uma olhada neles daqui a pouco quando fizermos mais coisas com nosso repositório.
		Pra vermos o conteúdo de um arquivo texto como o <code class='shell'>config</code>, usamos o comando <code class='bubaloop shell'><span class='keyword'>cat</span></code>.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>cat</span> ./front-end/.git/config  <span class='comment'># cat = concatenate and show result, mas só temos um arquivo então o resultado é igual ao arquivo</span>
<em>[core]</em>
<em>repositoryformatversion = 0</em>
<em>filemode = true</em>
<em>bare = false</em>
<em>logallrefupdates = true</em>
<em>ignorecase = true</em>
<em>precomposeunicode = true</em></code
		>
	</div>

	<p>
		Para saber mais sobre um comando que digitamos no terminal, podemos digitar <code class='bubaloop shell'><span class='keyword'>man</span> comando</code>, por exemplo, <code class='bubaloop shell'><span class='keyword'>man</span> ls</code> ou <code class='bubaloop shell'><span class='keyword'>man</span> cat</code>.
		Para sair do <code class='bubaloop shell'><span class='keyword'>man</span></code>, digite <code class='shortcut'>Q</code>.
	</p>

	<p>
		Agora podemos criar um arquivo e editá-lo, tudo pelo terminal!
		Um arquivo comum em todos os repositórios é o .gitignore, ele lista quais pastas e arquivos nunca devem ser versionados.
		Muitos lugares como <abbr>IDE</abbr>s e o github de fato irão criar este arquivo para você ao criar um projeto novo.
	</p>

	<p>
		Na maioria dos casos os arquivos que queremos ignorar são os mesmos para todos os repositórios, então se quiser fazer esta configuração geral, veja a <a href='https://help.github.com/en/github/using-git/ignoring-files'>documentação oficial</a>.
		Eu vou demonstrar como fazer isso para cada repositório individualmente, já que em nosso caso, os projetos web e mobile tem tipos de arquivos diferentes.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>cd</span> front-end
<span class='keyword'>touch</span> .gitignore  <span class='comment'># touch cria um arquivo vazio</span>
<span class='keyword'>nano</span> .gitignore   <span class='comment'># o nano (e o pico tb) é mais amigável que o vi, mas na boa, use o VS Code...</span></code
		>
	</div>

	<p>Pra sair do nano pressione <span class='shortcut'>Ctrl</span> ou <span class='shortcut'>⌃</span> + <span class='shortcut'>X</span>.</p>

	<p>
		Ou, podemos abrir o VS Code do terminal na pasta que quisermos com os comandos abaixo.
		Se você estiver num Mac, <a href='https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line'>siga esses passos antes</a>.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>code</span> .  <span class='comment'># se lembre que . = pasta atual</span></code
		>
	</div>

	<p>No arquivo .gitignore, vou listar os arquivos pastas muito comuns que nunca queremos versionar.</p>

	<div class='codeblock'>
		<p>.gitignore</p>
		<code
			>Thumbs.db
.DS_Store
.vscode</code
		>
	</div>

	<p>
		Salve o arquivo.
		Pra não perdermos nosso trabalho incrivelmente árduo até agora de criar esse arquivo .gitignore (pelo menos pra escrever até aqui já deu um trabalhão), vamos salvá-lo no Git também.
		Mais precisamente, vamos salvar a versão atual dele no Git, pra termos um histórico futuro das alterações que fizermos no arquivo.
		Consulte a <a href='https://rogerdudler.github.io/git-guide/'>lista básica de comandos do Git</a>.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>status</span>                                            <span class='comment'># mostra index.html como untracked (não versionado)</span>
<span class='keyword'>git</span> <span class='keyword'>add</span> .gitignore                                    <span class='comment'># adiciona index.html para a área de staging (ensaio)</span>
<span class='keyword'>git</span> <span class='keyword'>status</span>                                            <span class='comment'># mostra que index.html será adicionado quando efetuarmos o commit (executar o que ensaiamos)</span>
<span class='keyword'>git</span> <span class='keyword'>commit</span> <span class='parameter'>--message</span> "Adição de arquivo .gitignore"   <span class='comment'># efetua o commit com uma mensagem</span>
<span class='keyword'>git</span> <span class='keyword'>status</span>                                            <span class='comment'># mostra que não há nenhuma nova alteração para ser salva</span>
<span class='keyword'>git</span> <span class='keyword'>log</span>                                               <span class='comment'># mostra o histórico de alterações</span>
</code
		>
	</div>

	</section>



	<section>

	<h2 id='frontendsimplessetup'>Front-end web simples</h2>

	<p>
		Vamos criar uma página estática simples pra você ficar mais confortável com o Git, Docker e VS Code.
		Logo em seguida fazemos uma mais elaborada, ok?
	</p>

	<p>
		Já que estamos usando o Git, vamos criar um branch (galho) separado pra fazermos nosso trabalho sem atrapalhar o resto do time.
		Se você prefere passar o máximo de tempo fora de um editor de texto ou <abbr title='Integrate Development Environment'>IDE</abbr>, pode usar o comando no terminal.
		Vou entrar mais em detalhes sobre o Git mais abaixo.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>branch</span>                                       <span class='comment'># lista os branches existentes, por enquanto só temos o master, que é o padrão</span>
<span class='keyword'>git</span> <span class='keyword'>checkout</span> <span class='parameter'>-b</span> features/static-html             <span class='comment'># cria e muda para um novo branch chamado static-html</span>
<em>Switched to a new branch 'features/static-html'</em>
<span class='keyword'>git</span> <span class='keyword'>branch</span>                                       <span class='comment'># lista nossos dois branches</span></code
		>
	</div>

	<p>Na tela do VS Code, crie um novo arquivo que será nosso index.html, com <span class='shortcut'>Ctrl</span> ou <span class='shortcut'>⌘</span> + <span class='shortcut'>N</span>.</p>

	<p>
		Por padrão o VS Code vai criar um arquivo de texto simples (text/plain).
		Vamos dizer para ele que queremos um arquivo html (text/html).
		Poderíamos salvar o arquivo primeiro e o VS Code saberia qual o tipo pela extensão que selecionamos, porém existe outro jeito que não necessita salvar o arquivo, e pode ser útil em outras situações.
		Abrimos a barra de comandos do VS Code  pressionando <span class='shortcut'>Ctrl</span> + <span class='shortcut'>Shift</span> + <span class='shortcut'>P</span> ou <span class='shortcut'>⌘</span> + <span class='shortcut'>⇧</span> + <span class='shortcut'>P</span>.
	</p>

	<p>
		A barra vai abrir já com um <code>&gt;</code> preenchido.
		É a indicação que queremos rodar um comando.
		Se você apagar este <code>&gt;</code>, o VS Code só vai mostrar uma lista dos arquivos abertos.
	</p>

	<p>
		Na barra de comandos, digite ou selecione (ou digite parte, use as setas do teclado e selecione, ou use o mouse, fique bem á vontade...) o comando <code>Change Language Mode</code> e pressione <span class='shortcut'>Return</span> ou <span class='shortcut'>↩︎</span>.
		Depois selecione <code>HTML</code> na lista de opções.
		Isto vai habilitar para nós alguns atalhos para escrever <abbr title='Hypertext Markup Language'>HTML</abbr> de um plug-in chamado <a href='https://emmet.io/'>Emmet</a> (ou <a href='https://code.google.com/archive/p/zen-coding/'>Zen Coding</a> se você for velho o suficiente pra lembrar).
	</p>

	<p>
		O primeiro atalho que vamos aprender do Emmet é o <code>!</code>. Digite <code>!</code> dentro do arquivo <abbr title='Hypertext Markup Language'>HTML</abbr> do VS Code e ele vai te dar uma sugestão:
		<br /><img src='imagens/emmetbang.png' alt='atalho Emmet !' />
	</p>

	<p>Pressione <span class='shortcut'>Return</span> ou  <span class='shortcut'>↩︎</span> para aceitar a sugestão e <em>voilà</em> (isso é francês, se não der certo vc pode usar <em>merde</em>). Temos um html mínimo.</p>

	<div class='codeblock'>
		<p>Mágica do Emmet - Modelo de HTML</p>
		<code class='html'
			>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8" /&gt;
	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
	&lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;</code
		>
	</div>

	<p>
		Salve este arquivo como <code>index.html</code> na raiz da pasta <code>front-end</code>.
		Ele será nosso arquivo inicial.
		O que define na verdade que ele é o arquivo inicial é a configuração do nosso servidor.
		Por padrão, servidores como Nginx, Apache, <abbr title='Internet Information Services'>IIS</abbr>, WildFly e por aí vai aceitam <code>index.html</code>.
	</p>

	<p>
		Quando você abre um arquivo existente o VS Code adivinha qual a linguagem pela extensão.
		Se ele não conseguir adivinhar, ou se você quiser sobrescrever a decisão do VS Code, pode usar o comando que mencionei acima, o <code>Change Language Mode</code>.
	</p>

	<h3 id='releaseflow'>Controle de Versão - Release Flow</h3>

	<p>
		Existem vários fluxos que as pessoas foram inventando ao longo do tempo pra tentar deixar o uso do Git um pouco menos complicado e simplificar o histório das alterações dentro de um projeto.
		Vou usar aqui um fluxo chamado <a href='https://docs.microsoft.com/en-us/azure/devops/learn/devops-at-microsoft/release-flow'>release flow</a> + squash + rebase.
	</p>

	<p>
		A primeira parte desse fluxo já fizemos lá em cima, com:
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>checkout</span> <span class='parameter'>-b</span> features/static-html  <span class='comment'># cria e muda para um novo branch chamado static-html</span></code
		>
	</div>

	<p>
		Se você não quiser usar uma janela separada com o terminal pra digitar o restante, o VS Code tem um terminal integrado.
		Acesse pelo menu View, Terminal, ou pelo atalho <span class='shortcut'>Ctrl</span> + <span class='shortcut'>'</span> ou <span class='shortcut'>⌃</span> + <span class='shortcut'>⇧</span> + <span class='shortcut'>'</span>
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>add</span> index.html
<span class='keyword'>git</span> <span class='keyword'>commit</span> <span class='parameter'>--message</span> "Adição de arquivo inicial"</code
		>
	</div>

	<p>
		Vamos melhorar um pouquinho nosso projeto e salvar uma nova versão.
		Criamos um arquivo <abbr title='Cascading Style Sheet'>CSS</abbr> para melhorar a aparência da nossa página.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>mkdir</span> css
<span class='keyword'>cd</span> css

<span class='comment'># vamos criar e inserir conteúdo num arquivo pequeno com cat</span>
<span class='keyword'>cat</span> &gt;&gt; index.css
/* Digite o conteúdo do arquivo aqui, quando terminar, pressione Ctrl + d ou ⌃ + d */
h1 {
	color: #505B66;
}</code
		>
	</div>

	<p>E incluímos um pouco de conteúdo.</p>

	<div class='codeblock'>
		<p>index.html</p>
		<code class='html'
			>&lt;!DOCTYPE html&gt;
&lt;html lang=<strong>"pt-br"</strong>&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8" /&gt;
	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
	&lt;title&gt;<strong class='small'>Olá mundo</strong>&lt;/title&gt;
	<strong class='comment small'>&lt;!-- estilos vão no cabeçalho da página --&gt;</strong>
	<strong class='small'>&lt;link rel='stylesheet' href='css/index.css' /&gt;</strong>
&lt;/head&gt;
&lt;body&gt;
	<strong>&lt;h1&gt;Pra quem não sabe&lt;/h1&gt;</strong>
	<strong>&lt;p&gt;Hipertexto é feito de &lt;a href='https://en.wikipedia.org/wiki/Hypertext'&gt;links&lt;/a&gt; ;)&lt;/p&gt;</strong>
&lt;/body&gt;
&lt;/html&gt;</code
		>
	</div>

	<p>
		Abra esse arquivo no navegador, clicando duas vezes nele.
		O navegador vai mostrar na barra de endereços algo como <em>file:///Users/marco/dozero/front-end/index.html</em>
		O <em>file://</em> significa que ele está abrindo um arquivo local, do sistema de arquivos.
		O título deve ficar num cinza ligeiramente diferente do preto original (design está nos detalhes).
		Mas que você quiser verificar com certeza, inspecione o título TODO.
	</p>

	<p>
		Já que tudo parece certo, vamos salvar novamente nosso progresso.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='comment'># tínhamos parado dentro da pasta css se lembra?</span>
<span class='comment'># então o git mostra ../index.html como modificado e ./ como não versionado</span>
<span class='keyword'>git</span> <span class='keyword'>status</span>

<span class='comment'># podemos adicionar todas as pendências de uma vez na área de ensaio com *</span>
<span class='keyword'>git</span> <span class='keyword'>add</span> *

<span class='comment'># mostra que index.html e css/index.css serão inclusos no commit</span>
<span class='keyword'>git</span> <span class='keyword'>status</span>

<span class='keyword'>git</span> <span class='keyword'>commit</span> <span class='parameter'>--message</span> "Adição de arquivo css"
<span class='keyword'>git</span> <span class='keyword'>status</span></code
		>
	</div>

	<p>
		Por último vamos colocar um pouquinho de programação nessa página.
		Agora criamos um arquivo JavaScript para melhorar a aparência da nossa página.
	</p>

	<div class='codeblock'>
		<p>js/index.js</p>
		<code class='javascript'
			>'use strict';

const titulo = document.querySelector('h1');
titulo.innerText = 'Rodou';</code
		>
	</div>

	<p>E incluímos um pouco de conteúdo.</p>

	<div class='codeblock'>
		<p>index.html</p>
		<code class='html'
			>&lt;!DOCTYPE html&gt;
&lt;html lang="pt-br"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8" /&gt;
	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
	&lt;title&gt;Olá mundo&lt;/title&gt;
	&lt;!-- estilos vão no cabeçalho da página --&gt;
	&lt;link rel='stylesheet' href='css/index.css' /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;Pra quem não sabe&lt;/h1&gt;
	&lt;p&gt;Hipertexto é feito de &lt;a href='https://en.wikipedia.org/wiki/Hypertext'&gt;links&lt;/a&gt; ;)&lt;/p&gt;
	<strong class='comment'>&lt;!-- scripts vão no final da página --&gt;</strong>
	<strong class='small'>&lt;script src='js/index.js'&gt;&lt;/script&gt;</strong>
&lt;/body&gt;
&lt;/html&gt;</code
		>
	</div>

	<p>
		Veja novamente a página no navegador.
	</p>

	<p>
		Se estiver tudo ok, vamos salvar as alterações de novo.
		A boa prática diz para fazer commits com códigos que funcionem sempre.
		Se tiver algum erro, corrija antes de comitar.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>status</span> <span class='comment'># O comando status é opcional, mas é interessante para acompanhar o que está acontecendo</span>
<span class='keyword'>git</span> <span class='keyword'>add</span> *
<span class='keyword'>git</span> <span class='keyword'>status</span>
<span class='keyword'>git</span> <span class='keyword'>commit</span> <span class='parameter'>--message</span> "Adição de arquivo js"
<span class='keyword'>git</span> <span class='keyword'>status</span></code
		>
	</div>

	<p>
		Como nossa funcionalidade está completa, vamos jogar as alterações de volta na master e criar uma tag.
		Isto é, no meio de todas as alterações que fizemos, vamos congelar um estado específico que esteja completo ou estável, e dar um nome pra ele.
	</p>

	<p>
		Dando uma olhada no nosso histório, podemos ver quatro commits.
		O primeiro feito ainda no master branch, e os demais no nosso próprio branch.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>log</span>
<strong>commit</strong> ff63d353dc98bb6a667523eacb5eb6310ec595f5 <strong>(HEAD -> features/static-html)</strong>
Author: Marco Luglio &lt;marcodejulho@gmail.com&gt;
Date:   Wed May 13 23:29:24 2020 -0300

	<strong>Adição de arquivo js</strong>

<strong>commit</strong> e723dd356571d0c71b124f3678471917d9826279
Author: Marco Luglio &lt;marcodejulho@gmail.com&gt;
Date:   Wed May 13 23:28:12 2020 -0300

	<strong>Adição de arquivo css</strong>

<strong>commit</strong> 1b94ef3834278e25ab27b1718ae2cdeb6ef2a2a6
Author: Marco Luglio &lt;marcodejulho@gmail.com&gt;
Date:   Wed May 13 23:26:45 2020 -0300

	<strong>Adição de arquivo inicial</strong>

<strong>commit</strong> 299a808ae84a3b08ca8c84c6f374d065cf4da822 <strong>(master)</strong>
Author: Marco Luglio &lt;marcodejulho@gmail.com&gt;
Date:   Wed May 13 23:15:52 2020 -0300

	<strong>Adição de arquivo .gitignore</strong></code
		>
	</div>

	<p>
		As mensagens de commit nesse caso são relevantes enquanto estamos desenvolvendo a funcionalidade, mas podem não ser muito úteis uma vez que ela já está terminada.
		Nesse caso seria melhor ter uma única mensagem com um resumo das alterações e o código no estado final.
		Pelo menos essa é a filosofia do squash + rebase.
		Então vamos achatar nossos três últimos commits em um só.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
		><span class='comment'># maneira compacta de mostrar as alterações</span>
<span class='keyword'>git</span> <span class='keyword'>log</span> <span class='parameter'>--oneline</span>
ff63d35 (HEAD -> features/static-html) Adição de arquivo js
e723dd3 Adição de arquivo css
1b94ef3 Adição de arquivo inicial
299a808 (master) Adição de arquivo .gitignore

<span class='comment'># achata todos os commits após o commit com o hash indicado em um só, também podemos usar --root que achataria tudo, mas perderíamos o histórico do master branch</span>
<span class='keyword'>git</span> <span class='keyword'>rebase</span> <span class='parameter'>--interactive</span> <span class='parameter'>299a808</span></code
		>
	</div>

	<p>
		Isso vai abrir o editor padrão do git (vi provavelmente, mas tem como trocar).
		Preste atenção nas linhas não comentadas no topo, são elas que serão executadas e que precisamos alterar de acordo com o que quisermos fazer com cada commit.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			>pick 1b94ef3 Adição de arquivo inicial
pick e723dd3 Adição de arquivo css
pick ff63d35 Adição de arquivo js</code
		>
	</div>

	<p>
		Vamos mudar o <code>pick</code> para <code>fixup</code>.
		No vi, aperte <span class='shortcut'>i</span> para entrar no modo de edição.
		Neste modo ele se comporta quase como um editor normal.
		Altere o texto com abaixo:
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			>pick 1b94ef3 Adição de arquivo inicial
<strong>fixup</strong> e723dd3 Adição de arquivo css
<strong>fixup</strong> ff63d35 Adição de arquivo js</code
		>
	</div>

	<p>
		Agora pressione <span class='shortcut'>Esc</span> para sair do modo de edição e digite <code>:</code> para entrar no modo de comando.
		Digite <code>wq</code> e pressione <span class='shortcut'>Return</span> ou <span class='shortcut'>↩︎</span>.
		Isso vai executar o comando <em>write</em> e o comando <em>quit</em>.
		Se quiser sair sem salvar, digite <code>q!</code> que descarta as alterações e fecha o arquivo.
	</p>

	<p>Se verificarmos o histórico de commits novamente:</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>log</span> <span class='parameter'>--oneline</span>
ac490ce (HEAD -> features/static-html) Adição de arquivo inicial
299a808 (master) Adição de arquivo .gitignore</code
		>
	</div>

	<p>
		Vemos que agora temos novamente só dois commits, mas nossos arquivos estão com as alterações dos quatro.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>cat</span> index.html  <span class='comment'># note que o CSS e JavaScript ainda estão lá</span></code
		>
	</div>

	<p>
		Podemos ainda alterar a mensagem deste commit, para descrever tudo o que foi feito.
		Fazemos isso digitando:
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>commit</span> <span class='parameter'>--amend</span> <span class='parameter'>--message</span> "Alteração de título por JavaScript"</code
		>
	</div>

	<p>E no log, note que o hash do commit ainda é o mesmo, mas a mensagem não:</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>log</span> <span class='parameter'>--oneline</span>
ac490ce (HEAD -> features/static-html) Alteração de título por JavaScript
299a808 (master) Adição de arquivo .gitignore</code
		>
	</div>

	<p>Vamos pegar esta única mudança e aplicar no master branch.</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>git</span> <span class='keyword'>checkout</span> master                   <span class='comment'># muda para o master branch</span>
<span class='keyword'>git</span> <span class='keyword'>branch</span>                            <span class='comment'># confirma que estamos no master branch</span>
<span class='keyword'>git</span> <span class='keyword'>diff</span> master features/static-html  <span class='comment'># mostra oq será alterado, pressione q pra sair</span>
<span class='keyword'>git</span> <span class='keyword'>rebase</span> features/static-html       <span class='comment'># coloca as alterações do branch na master</span>
<span class='keyword'>git</span> <span class='keyword'>log</span>                               <span class='comment'># confirma que as alterações estão lá</span>
<span class='keyword'>git</span> <span class='keyword'>tag</span> 1.0.0 0296a7f                 <span class='comment'># dá um nome para esse ponto específico da história do repositório</span>
<span class='keyword'>git</span> <span class='keyword'>log</span>                               <span class='comment'># note que o nome da tag aparece ao lado do commit</span>
<span class='keyword'>git</span> <span class='keyword'>branch</span> <span class='parameter'>-d</span> features/static-html    <span class='comment'># apaga o branch que já foi reintegrado no master</span></code
		>
	</div>

	<h3 id='servidoreshttp'>Servidores <abbr>HTTP</abbr></h3>

	<p>
		Alguns recursos não funcionam quando abrimos a página direto do sistema de arquivos.
		Nesses casos precisamos configurar um servidor local para testes.
		Se este servidor for igual ao que vamos publicar nosso site, melhor.
	</p>

	<p>
		A maneira como carregamos os arquivos JavaScript é um desses recursos que dependem de um servidor.
		Hoje separamos os arquivos em módulos.
	</p>

	<div class='codeblock'>
		<p>js/biblioteca.js</p>
		<code class='javascript'
			>'use strict';

function mudarTitulo(novoTitulo) {
	const titulo = document.querySelector('h1');
	titulo.innerText = novoTitulo;
}

// módulos só conseguem expor o que é exportado explicitamente
export { mudarTitulo };</code
		>
	</div>

	<div class='codeblock'>
		<p>js/index.js</p>
		<code class='javascript'
			>'use strict';

// do que é exportado nos módulos, só é visível o que for importado explicitamente
import { mudarTitulo } from './biblioteca.js';

mudarTitulo('Rodou');</code
		>
	</div>

	<div class='codeblock'>
		<p>index.html</p>
		<code class='html'
			>&lt;!DOCTYPE html&gt;
&lt;html lang="pt-br"&gt;
&lt;head&gt;
	&lt;meta charset="UTF-8" /&gt;
	&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
	&lt;title&gt;Olá mundo&lt;/title&gt;
	&lt;!-- estilos vão no cabeçalho da página --&gt;
	&lt;link rel='stylesheet' href='css/index.css' /&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;Pra quem não sabe&lt;/h1&gt;
	&lt;p&gt;Hipertexto é feito de &lt;a href='https://en.wikipedia.org/wiki/Hypertext'&gt;links&lt;/a&gt; ;)&lt;/p&gt;
	&lt;!-- scripts vão no final da página --&gt;
	<strong>&lt;!-- módulos são indicados pelo atributo type, e são carregados de maneira diferente --&gt;</strong>
	<strong class='small'>&lt;script</strong> src='js/index.js' <strong class='small'>type='module'</strong>&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code
		>
	</div>

	<p>
		Se você abrir este arquivo como fizermos anteriormente, vai notar que nossa programação não vai funcionar.
		O carregamento destes módulos requer um servidor <abbr>HTTP</abbr>.
		A Mozilla tem uma página com instruções de como <a href='https://developer.mozilla.org/en-US/docs/Learn/Common_questions/set_up_a_local_testing_server'>rodar um servidor simples de teste</a> com Python.
		Basicamente:
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			><span class='keyword'>python</span> <span class='parameter'>-m</span> SimpleHTTPServer 8000  <span class='comment'># para python v2, que já vem no Mac</span></code
		>
	</div>

	<p>
		Para páginas simples e testes rápidos isso é suficiente, mais pra frente vou mostrar uma ferramenta mais completa, chamada Docker.
		Por enquanto quero fazer mais uma alteração em nossa
	</p>






	<p>Vamos usar o Docker para resolver nosso problema, rodando um servidor <abbr title='Hypertext Transfer Protocol'>HTTP</abbr> simples.</p>

	<p>
		Por padrão os servidores <abbr title='Hypertext Transfer Protocol'>HTTP</abbr> usam a porta 80.
		Se você já estiver usando a porta 80 para alguma coisa, pode mudar no comando abaixo o <code class='shell bubaloop'>80:80</code> para <code class='shell bubaloop'>8080:80</code>, <code class='shell bubaloop'>8081:80</code> e por aí vai.
		 O número antes do <code class='shell bubaloop'>:</code> é da porta que você deseja usar.
	</p>

	<p>
		Outro detalhe no comando abaixo é como indicamos o diretório atual dentro do shell.
		No Powershell ou Unix <code class='shell bubaloop'>${PWD}</code> é um variável que contém o diretório onde estamos no terminal.
		O Unix também suporta <code class='shell bubaloop'>$PWD</code>, que não funciona no Windows.
		E o Winndows também suporta <code class='shell bubaloop'>%cd%</code>, que não funciona no Unix.
	</p>


	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
		><span class='comment'># A</span>
<span class='keyword'>docker</span> <span class='keyword'>container</span> <span class='keyword'>run</span> <span class='parameter'>-d</span> <span class='parameter'>-p</span> 80:80 <span class='parameter'>-v</span> "${PWD}":/usr/share/nginx/html <span class='parameter'>--name</span> nginx nginx:alpine

<span class='comment'># lista os contêineres rodando atualmente, para listar todos use o parâmetro -a</span>
<span class='keyword'>docker</span> <span class='keyword'>container</span> <span class='keyword'>ls</span></code
		>
	</div>

	<p><a href='https://www.johnmackenzie.co.uk/post/creating-self-signed-ssl-certificates-for-docker-and-nginx/'>https://www.johnmackenzie.co.uk/post/creating-self-signed-ssl-certificates-for-docker-and-nginx/</a></p>

	<p>Versionamos nosso exemplo de novo.</p>

	<h3 id='webassemblybonus'>Bonus: Web Assembly</h3>

	</section>



	<section>

	<h2 id='frontendblazorsetup'>Front-end web Blazor</h2>

	</section>



	<section>

	<h2 id='mobilesetup'>Mobile React Native</h2>

	</section>



	<section>

	<h2 id='backendsetup'>Back-end APIs</h2>

	</section>



	Checkout master branch
git checkout -b master
Pull master branch
git pull origin master
Checkout bug/feature branch
git checkout branchName
Rebase from master
git rebase master
Handle any conflicts and make sure your code builds and all tests pass. Force push branch to remote.
git push origin branchName --force

Checkout, merge, and push into master
git checkout -b master # nosso master estava vazio então não foi salvo, geralmente isso não vai acontecer, eu devia ter colocado um .gitignore e um readme.md no master...
git branch
git merge branchName
git tag 1.0.0 commithashere
git push origin master</code
		>
	</div>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			>git checkout master
git fetch --prune
git pull
git diff source_branch target_branch
git merge features/static-html
git commit --message "Merge de features/static-html para master"
git tag 1.0.0 commithashere
git branch -d features/static-html</code
		>
	</div>

	<p>
		If you have previously pushed your code to a remote branch, you will need to force push.
	</p>

	<div class='codeblock'>
		<p>terminal (sh like)</p>
		<code class='shell'
			>git push origin branchName --force</code
		>
	</div>



	<script type='module' src='../../compartilhado/js/utils.js'></script>
	<script type='module' src='../../compartilhado/js/index.js'></script>
	<script type='module' src='../../compartilhado/js/highlighter.js'></script>
	<script type='module' src='../../compartilhado/js/highlightEnhancer.js'></script>
	<script type='module' src='js/home.js'></script>



</body>
</html>