<!DOCTYPE html>
<html
	xmlns='http://www.w3.org/1999/xhtml'
	lang='pt-BR'
	xml:lang='pt-br'
	>
<head>
	<title>Cheat Sheet para programadores full stack</title>
	<meta charset='utf-8' />
	<link rel='stylesheet' href='../../compartilhado/css/main.css' />
	<link rel='stylesheet' href='css/home.css' />
</head>
<body>



<h1>Cheat Sheet <span>para programadores full stack</span></h1>

<p><strong>WORK IN PROGRESS ;)</strong></p>

<p>
	Artigo criado por necessidades práticas no desenvolvimento de aplicativos para dispositivos móveis.
	Porém, com o tempo, fui adicionando mais linguagens para comparação, migração de código ou interesse histórico.
	Fui parcialmente inspirado no <a rel='external nofollow' href='http://www.25hoursaday.com/CsharpVsJava.html'>artigo icônico de Dare Obasanjo comparando C# e Java</a>.
</p>
<p>
	É quase como um Rust vs Go vs C++ vs Swift vs Kotlin vs Java vs C# vs JavaScript vs Dart vs Python :P
	Mas também estou começando a comparar duas linguagens funcionais (Lisp e Haskell) e linguagens de mais baixo nível como Web Assembly text format (AssemblyScript), LLVM e Assembly.
	E linguagens que de algum modo foram ou ainda são populares como TypeScript, ActionScript, Ada, Objective-C, Object Pascal (Delphi), <abbr title='Visual Basic 6'>VB6</abbr> e PHP.
</p>

<p>
	Não viu a linguagem que você queria aqui ou gostaria de contribuir com alguma nova linguagem?
	Esta página é um esforço individual, mas você pode tentar o site colaborativo <a rel='external nofollow' href='http://www.rosettacode.org'>http://www.rosettacode.org</a>.
</p>

<ul>

	<li>
		<ul>
			<li>First generation programming languages &lt; 1949</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Assembly 1949</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Fortran 1957</li>
			<li>Lisp 1958</li>
			<li>Algol 1958</li>
			<li>FLOW-MATIC 1959</li>
			<li>Cobol 1959</li>
			<li>Simula first oo language 1962</li>
			<li>Basic 1964</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Pascal 1970</li>
			<li>C 1972</li>
			<li>Smalltalk 72 1972</li>
			<li>CLU 1975 iterators, abstract types, parallel assignment</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Ada 1980</li>
			<li>Smalltalk 80 oo language 1980</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Common Lisp dialect 1984</li>
			<li>Objective-C 1984</li>
			<li>C++ 1985</li>
			<li>Object Pascal 1986</li>
			<li>Erlang 1986</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Python 1990</li>
			<li>Haskell 1990</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Java 1995</li>
			<li>JavaScript 1995</li>
			<li>Php 1995</li>
			<li>Ruby 1995</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Visual Basic 6 1998</li>
			<li>C# 2000</li>
			<li>LLVM 2003</li>
			<li>ActionScript 2 rewrite 2003</li>
			<li>F# 2005</li>
			<li>ActionScript 3 rewrite 2006</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Go 2009</li>
			<li>Rust 2010</li>
			<li>Kotlin 2011</li>
			<li>Dart 2011</li>
			<li>TypeScript 2012</li>
		</ul>
	</li>

	<li>
		<ul>
			<li>Swift 2014</li>
			<li>JavaScript ES6 rewrite 2015</li>
			<li>Web Assembly 2017</li>
			<li>Dart 2 rewrite 2018</li>
		</ul>
	</li>

</ul>

<section class='indice'>

<h2>Índice</h2>
<nav id='indice'>
</nav>

</section>



<section>

<h2 id='olamundo'>Olá Mundo</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust - Olá Mundo - main.rs</p>
<code class='rust'
>// requer uma função main
fn main() {
	println!("Olá Mundo");
}</code
>
</div>

<div class='codeblock'>
<p>Go - Olá Mundo - main.go</p>
<code class='go'
>// requer um pacote
package main

// requer uma biblioteca para IO
import ("fmt")

// requer uma função main
func main() {
	fmt.Println("Olá Mundo")
}</code
>
</div>

<div class='codeblock'>
<p>C++ - Olá Mundo - main.cpp</p>
<code class='cpp'
>// requer uma biblioteca para IO
#include &lt;iostream&gt;

// requer uma função main na raiz
int main(int argc, const char* argv[]) {
	std::cout &lt;&lt; "Olá Mundo";
	// requer um código de retorno
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C - Olá Mundo - main.m</p>
<code class='objectivec'
>// requer uma biblioteca para IO
#import &lt;Foundation/Foundation.h&gt;

// requer uma função main
int main(int argc, const char* argv[]) {
	NSLog(@"Olá Mundo");
	// requer um código de retorno
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Swift - Olá Mundo - main.swift</p>
<code class='swift'
>print("Olá Mundo")</code
>
</div>

<div class='codeblock'>
<p>Kotlin - Olá Mundo - main.kt</p>
<code class='kotlin'
>// requer uma função main
fun main(args: Array&lt;String&gt;) {
	println("Hello, world!")
}</code
></div>

<div class='codeblock'>
<p>Java - Olá Mundo - OlaMundo.java</p>
<code class='java'
>public class OlaMundo {
	// requer um método estático main em uma classe
	public static void main(String[] args) {
		System.out.println("Olá Mundo");
	}
}</code
>
</div>

<div class='codeblock'>
<p>C# - Olá Mundo - OlaMundo.cs</p>
<code class='cs'
>// C# 9+
System.Console.WriteLine("Olá Mundo");

// C# 8-
public class OlaMundo {
	// requer um método estático main em uma classe
	public static void Main(string[] args) {
		System.Console.WriteLine("Olá Mundo");
	}
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript - Olá Mundo - main.js</p>
<code class='javascript'
>console.log('Olá Mundo')</code
>
</div>

<div class='codeblock bubaloop'>
<p>ActionScript - Olá Mundo - main.as</p>
<code class='actionscript generic bubaloop'
><span class='symbol'>trace</span><span class='operator'>(</span><span class='string'>'Olá Mundo'</span><span class='operator'>)</span></code
>
</div>

<div class='codeblock bubaloop'>
<p>TypeScript - Olá Mundo - main.ts</p>
<code class='typescript generic bubaloop'
>console.log('Olá Mundo')</code
>
</div>

<div class='codeblock'>
<p>Dart - Olá Mundo - main.dart</p>
<code class='dart'
>// requer uma função main
void main() {
	print('Olá Mundo');
}</code
>
</div>

<div class='codeblock'>
<p>Python - Olá Mundo - main.py</p>
<code class='python'
>print('Olá Mundo')</code
>
</div>

<div class='codeblock bubaloop'>
<p>PHP - Olá Mundo - index.php</p>
<code class='php generic bubaloop'
><span class='tag openTag'>&lt;?=</span> <span class='string'>'Olá Mundo'</span> <span class='tag closeTag'>?&gt;</span>

ou

<span class='tag openTag'>&lt;?php</span> <span class='keyword'>echo</span> <span class='string'>'Olá Mundo'</span> <span class='tag closeTag'>?&gt;</span>

ou

<span class='tag openTag'>&lt;?php</span> <span class='keyword'>echo</span> <span class='string'>&lt;&lt;&lt;'EOD'
Olá Mundo
EOD;</span> <span class='tag closeTag'>?&gt;</span>

embora o primeiro código que você
vai escrever provavelmente seja

<span class='tag openTag'>&lt;?php</span> <span class='symbol'>phpinfo</span><span class='operator'>();</span> <span class='tag closeTag'>?&gt;</span></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr> - Olá Mundo - main.bas</p>
<code class='visualbasic'
>Debug.Print "Olá Mundo"</code
>
</div>

<div class='codeblock'>
<p>Ada - Olá Mundo - main.adb</p>
<code class='ada'
>-- requer uma biblioteca para IO
with Ada.Text_IO; use Ada.Text_IO;

-- requer uma função main
-- mas pode ter um nome diferente
procedure Main is
begin
	Put_Line("Olá Mundo");
end Main;</code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi) - Olá Mundo - main.dpr</p>
<code class='objectpascal'
>{
	requer uma função main
	mas pode ter um nome diferente
}
program Main;

begin
	WriteLn('Olá Mundo');
end.</code
>
</div>

<div class='codeblock bubaloop'>
<p>Ruby - Olá Mundo - main.rb</p>
<code class='ruby generic bubaloop'
>puts <span class='string'>"Olá Mundo"</span></code
>
</div>

<div class='codeblock bubaloop'>
<p>SmallTalk - Olá Mundo - main.st</p>
<code class='smalltalk generic bubaloop'
>Transcript show<span class='operator'>:</span> <span class='string'>'Olá Mundo'</span><span class='operator'>.</span></code
>
</div>

<div class='codeblock bubaloop'>
<p>Common Lisp - Olá Mundo - main.lisp</p>
<code class='commonlisp'
>(print "Olá Mundo")
; ou para retornar uma string do programa
"Olá Mundo"</code
>
</div>

<div class='codeblock bubaloop'>
<p>Haskell - Olá Mundo - main.hs</p>
<code class='haskell'
>putStrLn "Olá Mundo"
-- ou para retornar uma string do programa
"Olá Mundo"</code
>
</div>

<div class='codeblock'>

	<p>Web Assembly text format (AssemblyScript) - main.wasm</p>
	<code class='webassembly'
>(<span class='keyword'>module</span>

	<span class='comment'>;; web assembly does not interact with the DOM</span>
	<span class='comment'>;; so we must import certain browser functions</span>
	(<span class='keyword'>import</span> <span class='string'>"console"</span> <span class='string'>"log"</span> (<span class='keyword'>func</span> <span class='symbol'>$log</span> (<span class='keyword'>param</span> <span class='type'>i32</span> <span class='type'>i32</span>)))
	(<span class='keyword'>import</span> <span class='string'>"js"</span> <span class='string'>"mem"</span> (<span class='keyword'>memory</span> <span class='number'>1</span>))

	(<span class='keyword'>data</span> (<span class='type'>i32</span>.const <span class='number'>0</span>)
		<span class='string'>"Hello World"</span>
	)

	(<span class='keyword'>func</span> (<span class='keyword'>export</span> <span class='string'>"main"</span>)
		<span class='type'>i32</span>.const <span class='number'>0</span> <span class='comment'>;; pass offset 0 to log</span>
		<span class='type'>i32</span>.const <span class='number'>11</span> <span class='comment'>;; pass length 11 to log</span>
		<span class='keyword'>call</span> <span class='symbol'>$log</span>
	)

)</code
>

	<p>JavaScript</p>
	<code class='javascript'
>let memory = new WebAssembly.Memory({ initial: 1 });

// object to be imported by web assembly
let importObject = {
	console: {
		// web assembly can only send numbers and bytes
		// so it requires a special console.log
		log: function(offset, length) {
			var bytes = new Uint8Array(memory.buffer, offset, length);
			var string = new TextDecoder('utf8').decode(bytes);
			console.log(string);
		}
	},
	js: {
		mem: memory
	}
};

WebAssembly
	.instantiateStreaming(
		fetch('main.wasm'),
		importObject
	)
	.then(obj => {
		obj.instance.exports.main();
	});</code
>

</div>


<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
>source_filename <span class='operator'>=</span> <span class='string'>"main"</span>

<span class='comment lineComment'>; requer uma função externa para IO</span>
<span class='keyword'>declare</span> <span class='type'>i32</span> <span class='symbol globalSymbol'>@puts</span><span class='operator'>(</span><span class='type'>i8*</span> <span class='keyword'>nocapture</span><span class='operator'>)</span> <span class='keyword'>nounwind</span>

<span class='symbol globalSymbol'>@helloWorld</span> <span class='operator'>=</span> <span class='keyword'>private</span> <span class='keyword'>constant</span> <span class='operator'>[</span><span class='number'>10</span> <span class='operator'>x</span> <span class='type'>i8</span><span class='operator'>]</span> <span class='string'>c"Olá Mundo\00"</span>

<span class='comment lineComment'>; requer um bloco main</span>
<span class='keyword'>define</span> <span class='type'>void</span> <span class='symbol globalSymbol'>@main</span><span class='operator'>() {</span>

	<span class='label'>entry:</span>

	<span class='symbol localsymbol'>%cast210</span> <span class='operator'>=</span> <span class='symbol'>getelementptr</span> <span class='operator'>[</span><span class='number'>10</span> <span class='operator'>x</span> <span class='type'>i8</span><span class='operator'>]</span><span class='operator'>,</span> <span class='operator'>[</span><span class='number'>10</span> <span class='operator'>x</span> <span class='type'>i8</span><span class='operator'>]*</span> <span class='symbol globalSymbol'>@helloWorld</span><span class='operator'>,</span> <span class='type'>i64</span> <span class='number'>0</span><span class='operator'>,</span> <span class='type'>i64</span> <span class='number'>0</span>
	<span class='keyword'>call</span> <span class='type'>i32</span> <span class='symbol globalSymbol'>@puts</span><span class='operator'>(</span><span class='type'>i8*</span> <span class='symbol localsymbol'>%cast210</span><span class='operator'>)</span>

	<span class='comment lineComment'>; requer um código de retorno TODO testar</span>
	<span class='keyword'>ret</span> <span class='type'>i32</span> <span class='number'>0</span>

<span class='operator'>}</span></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
><span class='keyword'>section</span> <span class='section segment'>.text</span>
	<span class='keyword'>global</span> <span class='label'>_start</span> <span class='comment lineComment'>; requer um bloco "main"</span>

<span class='label'>_start:</span>
	<span class='keyword instruction' title='pushes current address and jumps to label'>call</span> <span class='label'>io</span>
	<span class='keyword instruction' title='pushes current address and jumps to label'>call</span> <span class='label'>exit</span>

<span class='label'>io:</span>
	<span class='comment lineComment'>; requer um system call para IO</span>
	<span class='keyword instruction' title='copy data to destination (register or memory) from source (register, memory or literal)'>mov</span> <span class='register' title='32 bits accumulator register'>eax</span><span class='operator'>,</span> <span class='symbol'>system_interrupt_write</span>
	<span class='keyword instruction' title='copy data to destination (register or memory) from source (register, memory or literal)'>mov</span> <span class='register' title='32 bits base register'>ebx</span><span class='operator'>,</span> <span class='symbol'>standard_output</span>
	<span class='keyword instruction' title='copy data to destination (register or memory) from source (register, memory or literal)'>mov</span> <span class='register' title='32 bits count register'>ecx</span><span class='operator'>,</span> <span class='symbol'>message</span>
	<span class='keyword instruction' title='copy data to destination (register or memory) from source (register, memory or literal)'>mov</span> <span class='register' title='32 bits data register'>edx</span><span class='operator'>,</span> <span class='symbol'>message_length</span>
	<span class='keyword instruction' title='generates a software interrupt'>int</span> <span class='symbol'>system_call_interrupt</span>
	<span class='keyword instruction' title='pops address and jumps there'>ret</span>

<span class='label'>exit:</span>
	<span class='comment lineComment'>; requer um código de retorno</span>
	<span class='keyword instruction' title='copy data to destination (register or memory) from source (register, memory or literal)'>mov</span> <span class='register' title='32 bits accumulator register'>eax</span><span class='operator'>,</span> <span class='symbol'>system_interrupt_exit</span>
	<span class='keyword instruction' title='generates a software interrupt'>int</span> <span class='symbol'>system_call_interrupt</span>
	<span class='keyword instruction' title='pops address and jumps to it'>ret</span>


<span class='keyword'>section</span> <span class='section segment'>.data</span>

	<span class='comment lineComment'>; dados do programa</span>
	<span class='symbol'>message</span> <span class='type' title='define byte'>db</span> <span class='string'>'Olá Mundo'</span><span class='operator'>,</span> <span class='number'>0xa</span>
	<span class='symbol'>message_length</span> <span class='keyword' title='define a constant'>equ</span> <span class='operator'>$</span> <span class='operator'>-</span> <span class='symbol'>message</span>

	<span class='comment lineComment'>; dados padrões do sistema</span>
	<span class='symbol'>standard_output</span> <span class='keyword' title='define a constant'>equ</span> <span class='number'>1</span>
	<span class='symbol'>system_interrupt_write</span> <span class='keyword' title='define a constant'>equ</span> <span class='number'>4</span>
	<span class='symbol'>system_interrupt_exit</span> <span class='keyword' title='define a constant'>equ</span> <span class='number'>1</span>
	<span class='symbol'>system_call_interrupt</span> <span class='keyword' title='define a constant'>equ</span> <span class='number'>0x80</span
	></code
>
</div>

</div>

<ol>
	<li>Python / Swift / <abbr title='Visual Basic 6'>VB6</abbr></li>
	<li>JavaScript / PHP</li>
	<li>Rust</li>
	<li>Dart / Kotlin / Object Pascal (Delphi)</li>
	<li>C# / Java</li>
	<li>Go</li>
	<li>Ada</li>
	<li>C++ / Objective-C</li>
	<li>LLVM <abbr title='Intermediate representation'>IR</abbr></li>
	<li>Assembly</li>
	<li>Web Assembly text format (AssemblyScript)</li>
</ol>

<p>
	Python e Swift são as mais simples de todas.
	Nem <code class='swift'>;</code> elas precisam, e seu uso nem é recomendado no caso do Swift.<br />
	Curioso encontrar <abbr title='Visual Basic 6'>VB6</abbr> aqui na mesma posição.<br />
	JavaScript perde por pouco.
	Também não requer <code class='javascript'>;</code> embora ao contrário do que ocorre com Swift, seu uso seja recomendado.
	Seu <code class='javascript'>console.log</code> também é um pouco maior que o método <code class='swift'>print</code>.<br />
	C# 9+ vem logo atrás, pois tem mais um namespace a ser digitado antes da função.<br />
	PHP foi criado para ser utilizado em conjunto com HTML, e por isso requer tags para abrir e fechar os blocos de código.
	Possui uma tag de atalho para casos simples e uma alternativa para textos longos, que acho confusa e pessoalmente nunca vi ser usada.
	Usos mais complexos tendem a utilizar frameworks ou mecanismos de template<br />
	Rust ainda requer uma função <code class='rust'>main</code>, mas o retorno dela não precisa ser declarado explicitamente.
	Diferente das demais linguagens, usa um macro para IO, por isso <code class='rust'>print!</code> leva uma exclamação (não, não era porque eu estava entusiasmado quando escrevi o código).<br />
	Dart, Kotlin e Object Pascal (Delphi) tem uma ou outra coisa a mais qua deve ser digitada a mais do qua Rust.
	Object Pascal (Delphi), assim como Ada e <abbr title='Visual Basic 6'>VB6</abbr> utilizam mais palavras reservadas do que símbolos.<br />
	C# 8- e Java são idênticos, ambos requerendo uma classe que contenha o método <code class='generic'>main</code>.
	Sentiu uma leve pressão para escrever orientado a objeto aqui?
	Também é recomendado que o nome do arquivo tenha o mesmo nome da classe.<br />
	Go é quase tão comprido quanto C++ e Objective-C.
	Não requer que a função <code class='go'>main</code> retorne um inteiro, mas requer um pacote.<br />
	Ada<br />
	C++ e Objective-C são bastante parecidos pois possuem forte influência do C.<br />
	LLVM <abbr title='Intermediate representation'>IR</abbr> TODO<br />
	Assembly é completamente diferente dos demais. Se bem organizado para este exemplo simples, até fica bastante legível, embora verboso.
	A ordem invertida dos argumentos e nome da função é pouco intuitiva.<br />
	Web Assembly text format (AssemblyScript)
</p>

</section>



<section>

<h2 id='tipolinguagem'>Tipo da linguagem</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
Nativa compilada
<br />Usa LLVM
</div>

<div class='codeblock'>
<p>Go</p>
Nativa compilada
</div>

<div class='codeblock'>
<p>C++</p>
Nativa compilada
</div>

<div class='codeblock'>
<p>Objective-C</p>
Nativa compilada
</div>

<div class='codeblock'>
<p>Swift</p>
Nativa compilada
<br />Usa LLVM
</div>

<div class='codeblock'>
<p>Kotlin</p>
Process virtual machine
<br />Register based vm
<br />* Kotlin native é nativo
</div>

<div class='codeblock'>
<p>Java</p>
Process virtual machine (JVM)
<br />Stack based vm
<br />No Android utiliza Ahead of time compilation (AOT),
<br />Em versões mais antigas utilizava register based vm (Dalvik)
</div>

<div class='codeblock'>
<p>C#</p>
Process virtual machine (<abbr title='Common language runtime'>CLR</abbr>)
<br />Stack based vm
<br />* .NET native é nativo
</div>

<div class='codeblock'>
<p>JavaScript</p>
Interpretada + Just in time compiler
<br />Runtime dentro dos navegadores ou Node.js
<br />Spidermonkey para Firefox - stack based
<br />V8 para Chrome/Opera/Edge Chromium/Node.js - register based
<br />JavaScriptCore (também Nitro ou Squirrel Fish) para Safari - register based
<br />Chakra para Edge antigo e Internet Explorer - ?? based
</div>

<div class='codeblock'>
<p>ActionScript</p>
Process virtual machine (<abbr title='ActionScript Virtual Machine'>AVM2</abbr>)
</div>

<div class='codeblock'>
<p>TypeScript</p>
É transcompilada para JavaScript
<br />Não é executada diretamente
</div>

<div class='codeblock'>
<p>Dart</p>
<br />Stack based vm (Dart VM)
<br />com Ahead of time (AOT) ou Just in Time (JIT) compilation</div>

<div class='codeblock'>
<p>Python</p>
Interpretada (versão oficial sem just in time compiler)
<br />Process virtual machine (PVM)
<br />Stack based
</div>

<div class='codeblock'>
<p>PHP</p>
Versões mais novas usams Zend Virtual Machine, mas o código é recompilado a cada execução
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
Nativa compilada
<br />Pode ser executada em modo interpretado
</div>

<div class='codeblock'>
<p>Ada</p>
Nativa compilada
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
Nativa compilada
</div>

<div class='codeblock'>
<p>Ruby</p>
Process virtual machine (YARV)
<br />Stack based vm
</div>

<div class='codeblock'>
<p>Smalltalk</p>
Interpretada
</div>

<div class='codeblock'>
<p>Common Lisp</p>
Interpretada
</div>

<div class='codeblock'>
<p>Haskell</p>
Nativa compilada via GHC (realiza transpilação, depois compilação)
ou interpretada
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>
Stack based vm
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
Instruções baixo nível que serão compiladas
</div>

<div class='codeblock'>
<p>Assembly</p>
Nativa compilada
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='comentarios'>Comentários <span>e documentação inline</span></h2>

<h3>Comentários básicos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// linha

/*
bloco
*/

fn someFunction(/* bloco */ arg1:i32) -&gt; i32 {
	0
}</code
>
</div>

<div class='codeblock'>
	<p>Go</p>
	<code class='go'
	>// linha

/*
bloco
*/

func someFunction(/* bloco */ x int) int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// linha

/*
bloco
*/

int someFunction(/* bloco */ int arg) {
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// linha

/*
bloco
*/

int someFunction(/* bloco */ int arg) {
	return 0;
}

@implementation SomeClass

- (int) someMethod /* bloco */ :(int)arg {
	return 0;
}

@end</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// linha

/*
bloco
*/

func someFunction(/* bloco */ arg1:Int) -&gt; Int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// linha

/*
bloco
*/

fun someFunction(/* bloco */ arg:Int): Int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// linha

/*
bloco
*/

int someMethod(/* bloco */ int arg) {
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// linha

/*
bloco
*/

int someFunction(/* bloco */ int arg) {
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// linha

/*
bloco
*/

function someFunction(/* bloco */ arg) {
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>// linha

/*
bloco
*/</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>// linha

/*
bloco
*/</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>// linha

/*
bloco
*/</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># linha

"""
string sendo usada como comentário de bloco
"""</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>// linha
# linha

/*
bloco
*/</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>' linha</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
>-- linha</code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
>// linha

{
bloco
}

(*
bloco
*)
</code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
># linha

=begin
bloco
=end</code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
>"bloco"</code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
>; linha

#|
bloco
|#</code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
>-- linha

{-
bloco
-}</code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>
<code class='webassembly'
><span class='comment'>;; linha</span>
</code
>
</div>


<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
><span class='comment lineComment'>; linha</span></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
><span class='comment lineComment'>; linha</span>
</code
>
</div>

</div>

<h3>Comentários aninhados</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>/*

bloco

/*
bloco aninhado
*/

bloco

*/</code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>/*

bloco

/*
bloco aninhado
*/

bloco

*/</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>ActionScript</p>
-
</div>

<div class='codeblock'>
<p>TypeScript</p>
-
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>/*

bloco

/*
bloco aninhado
*/

bloco

*/</code
>
</div>

<div class='codeblock'>
<p>Python</p>
-
</div>

<div class='codeblock'>
<p>PHP</p>
-
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
-
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
>// Turbo Pascal and Delphi do not support
// Free Pascal supports it
// better not use</code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
-
</div>

<div class='codeblock'>
<p>Smalltalk</p>
-
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
>#|

bloco

#|
bloco aninhado
|#

bloco

|#</code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
>{-

bloco

{-
bloco aninhado
-}

bloco

-}</code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>
-
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
-
</div>

<div class='codeblock'>
<p>Assembly</p>
-
</div>

</div>

<h3>Agrupamentos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// region idea intellij foldable
// endregion</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// TODO talvez seja suportado
// por GoLand ou extensão
// do VS Code</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#pragma region vscode foldable
#pragma endregion</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>#pragma mark - XCode section with dash
#pragma mark XCode section</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// MARK: - XCode section with dash
// MARK: XCode section</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// region idea intellij foldable
// endregion</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// region idea intellij foldable
// endregion

// #region vs code foldable
// #endregion</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>#region foldable
#endregion</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// #region vs code foldable
// #endregion</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>#region foldable (pycharm, visual studio and vs code)
#endregion</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>#Region vs code foldable
#End Region</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<p>Documentação de <a href='https://code.visualstudio.com/docs/editor/codebasics#_folding'>folding do VS Code</a>.</p>

<h3>Documentação inline</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>/// Rustdoc para o item que segue **com markdown**
/// # Arguments
/// * `arg1` - The argument of the function
/// # Examples
/// ```
/// let result = some_function(2);
/// ```
fn some_function(arg1:i32) -&gt; i32 {
	0
}

mod foo {
	//! Rustdoc para o contêiner externo
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// someFunction Comentários simples logo antes das declarações
func someFunction(/* bloco */ x int) int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>/// &lt;summary&gt;Visual Studio XML Documentation alt 1&lt;/summary&gt;
/// &lt;param&gt;The argument of the function&lt;/param&gt;
/// &lt;returns&gt;The result of the function call&lt;/returns&gt;
/// &lt;example&gt;
/// &lt;code&gt;
/// auto result{someFunction(2)};
/// &lt;/code&gt;
/// &lt;/example&gt;
int someFunction(int arg) {
	return 0;
}

/**
&lt;summary&gt;Visual Studio XML Documentation alt 2&lt;/summary&gt;
&lt;param&gt;The argument of the function&lt;/param&gt;
&lt;returns&gt;The result of the function call&lt;/returns&gt;
&lt;example&gt;
&lt;code&gt;
auto result{someFunction(2)};
&lt;/code&gt;
&lt;/example&gt;
*/
int someFunction(int arg) {
	return 0;
}

/// XCode Doxygen / Header Doc alt 1
/// \param arg The argument of the function
/// \returns The result of the function call
/// \code
/// auto result{someFunction(2)};
int someFunction(int arg) {
	return 0;
}

//! XCode Doxygen / Header Doc alt 2
//! @param arg The argument of the function
//! @return The result of the function call
//! @code
//! auto result{someFunction(2)};
int someFunction(int arg) {
	return 0;
}

/**
XCode Doxygen / Header Doc alt 3
\param arg The argument of the function
\return The result of the function call
\code
auto result{someFunction(2)};
*/
int someFunction(int arg) {
	return 0;
}

/*!
XCode Doxygen / Header Doc alt 4
@param arg The argument of the function
@returns The result of the function call
@code
auto result{someFunction(2)};
*/
int someFunction(int arg) {
	return 0;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// C style

/// XCode Doxygen / Header Doc alt 1
/// \param arg The argument of the function
/// \returns The result of the function call
/// \code
/// int result = someFunction(2);
int someFunction(int arg) {
	return 0;
}

//! XCode Doxygen / Header Doc alt 2
//! @param arg The argument of the function
//! @return The result of the function call
//! @code
//! int result = someFunction(2);
int someFunction(int arg) {
	return 0;
}

/**
XCode Doxygen / Header Doc alt 3
\param arg The argument of the function
\return The result of the function call
\code
int result = someFunction(2);
*/
int someFunction(int arg) {
	return 0;
}

/*!
XCode Doxygen / Header Doc alt 4
@param arg The argument of the function
@returns The result of the function call
@code
int result = someFunction(2);
*/
int someFunction(int arg) {
	return 0;
}

// Objective-C style

@implementation SomeClass

/// XCode Doxygen / Header Doc alt 1
/// \param arg The argument of the function
/// \returns The result of the function call
/// \code
/// SomeClass *someObject = [SomeClass alloc];
/// int result = [someObject someMethod:2];
- (int) someMethod /* bloco */ :(int)arg {
	return 0;
}

//! XCode Doxygen / Header Doc alt 2
//! @param arg The argument of the function
//! @return The result of the function call
//! @code
//! SomeClass *someObject = [SomeClass alloc];
//! int result = [someObject someMethod:2];
- (int) someMethod /* bloco */ :(int)arg {
	return 0;
}

/**
XCode Doxygen / Header Doc alt 3
\param arg The argument of the function
\return The result of the function call
\code
SomeClass *someObject = [SomeClass alloc];
int result = [someObject someMethod:2];
*/
- (int) someMethod /* bloco */ :(int)arg {
	return 0;
}

/*!
XCode Doxygen / Header Doc alt 4
@param arg The argument of the function
@returns The result of the function call
@code
SomeClass *someObject = [SomeClass alloc];
int result = [someObject someMethod:2];
*/
- (int) someMethod /* bloco */ :(int)arg {
	return 0;
}

@end</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>/**
XCode markdown
- Parameter arg1: The argument of the function
- Returns: The result of the function call
	let result = someFunction(2)
*/
func someFunction(arg1:Int) -&gt; Int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>/**
KDoc
{@code
	var result = someFunction()
}
@param arg1 The argument of the function
@return The result of the function call
*/
fun someFunction(arg1:Int): Int {
	return 0
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public class SomeClass {

	/**
	JavaDoc
	{@code
		SomeClass someObject = new SomeClass();
		int result = someObject.someMethod();
	}
	@param arg1 The argument of the function
	@return The result of the function call
	*/
	public int someMethod(int arg1) {
		return 0;
	}

}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public class SomeClass {

	/// &lt;summary&gt;Visual Studio XML Documentation alt 1&lt;/summary&gt;
	/// &lt;param name="arg1"&gt;The argument of the function&lt;/param&gt;
	/// &lt;returns&gt;The result of the function call&lt;/returns&gt;
	/// &lt;example&gt;
	/// &lt;code&gt;
	/// var someObject = SomeClass();
	/// var result = someObject.SomeMethod(2);
	/// &lt;/code&gt;
	/// &lt;/example&gt;
	public int SomeMethod(int arg1) {
		return 0;
	}

	/**
	&lt;summary&gt;Visual Studio XML Documentation alt 2&lt;/summary&gt;
	&lt;param name="arg1"&gt;The argument of the function&lt;/param&gt;
	&lt;returns&gt;The result of the function call&lt;/returns&gt;
	&lt;example&gt;
	&lt;code&gt;
	var someObject = SomeClass();
	var result = someObject.SomeMethod(2);
	&lt;/code&gt;
	&lt;/example&gt;
	*/
	public int SomeOtherMethod(int arg1) {
		return 0;
	}

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>/**
JSDoc
@param {number} arg1 The argument of the function
@returns {number} The result of the function call
@example
let result = someFunction(2);
*/
function someFunction(arg1) {
	return 0;
}

/**
para indicar overloads, usamos uma mistura de tipos
e argumentos opcionais que fica com uma péssima
legibilidade
@param {(number|string)} arg1 número ou string
@param {number} [arg2] opcional
@returns {(number|string)} número ou string

para cobrir a falta de suporte da linguagem para
certas funcionalidades, podemos usar também
@private, @override, @enum etc.
*/


function someFunction(arg1) {
	/// &lt;signature&gt;
	/// &lt;summary&gt;Visual Studio XML Documentation&lt;/summary&gt;
	/// &lt;param name="arg1" type="Number"&gt;The argument of the function&lt;/param&gt;
	/// &lt;returns type="Number"&gt;The result of the function call&lt;/returns&gt;
	/// &lt;/signature&gt;

	return 0;
}

// &lt;signature&gt; é opcional, e permite separar claramente
// os overloads da função, pois podemos ter mais de uma signature</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>some_function.__doc__ = ".__doc__ guarda um texto de ajuda"

def some_function(arg1: int):
	"""Ou então logo após a linha de definição.

	If the argument `sound` isn't passed in, the default Animal
	sound is used.

	Parameters
	----------
	arg1 : int
		Primeiro argumento
	"""</code>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>Objective-C / Swift / C#</li>
	<li>C++</li>
	<li>Rust / Java</li>
	<li>JavaScript</li>
</ol>

<p>Objective-C, Swift e C# possuem ferramentas padrão nas respectivas <abbr title='Integrated Development Environment'>IDE</abbr>s.<br />
C++ não possui uma ferramenta oficial. Varia de acordo com a <abbr title='Integrated Development Environment'>IDE</abbr> ou ferramenta externa e permite a mistura de muitos estilos e palavras alternativas.<br />
Rust possui documentação inline padronizada, mas as possibilidades são bastante simples.<br />
Java usa JavaDoc, que só permite documentação usando <code class='java'>/** */</code>. Aliado com o fato de que Java não suporta comentários de bloco aninhados, um trecho de código devidamente documentado é impossível de se comentar com <code class='java'>/* */</code>.<br />
JavaScript, assim como C++ não possui padrão de documentação. Porém, o caso do JavaScript é mais grave pois as sintaxes variam bastante entre si, inclusive quanto ao seu posicionamento no código. A ferramenta mais amplamente difundida JSDoc possui sintaxe confusa quanto à <em>overloads</em>.</p>

</section>



<section>

<h2 id='declaracaodevariaveis'>Declaração de Variáveis</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let x = 5; // tipo implícito
let x:i32 = 5; // tipo explícito


let mut x = 5; // variável
let x = 5; // constante

let a:i32 = 1;
let ponteiro_de_int_const:*const i32 = &amp;a;
let mut b:i32 = 1;
let ponteiro_de_int_var:*mut i32 = &amp;mut b;</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>var x = 5 // tipo implícito
var x int32 = 5 // tipo explícito
x := 5 // atalho para declaração

const x = 5 // constante

var a = 1
var ponteiroDeInt *int = &a // ponteiro

// variáveis relacionadas
// podem ser declaradas juntas
var (
	countLock   sync.Mutex
	inputCount  uint32
	outputCount uint32
	errorCount  uint32
)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>auto x{5}; // tipo implícito
int x{5}; // tipo explícito
int x(5); // estilo antigo
int x = 5; // estilo c

const int z{5}; // constante
constexpr int x{5}; // expressão constante

int&amp; referenciaDeInt; // referência
int* ponteiroDeInt{&amp;x}; // ponteiro</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>



int x = 5; // variável
const int x = 5; // constante



int* x; // ponteiro</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let x = 5 // tipo implícito
let x:Int = 5 // tipo explícito


var x = 5 // variável
let x = 5 // constante

// Swift tem lazy properties declaradas com
// lazy var x = ...
// veja classes para exemplos dessa declaração</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>val x = 5 // tipo implícito
val x:Int = 5 // tipo explícito


var x = 5 // variável
val x = 5 // constante

// não precisa ser inicializada na declaração
val x:Int
x = 5

// constante em tempo de compilação
// precisa ser inicializada na declaração
const val x = 5</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>var x = 5; // tipo implícito - java 10+
int x = 5; // tipo explícito


int x = 5; // variável
final int x = 5; // constante

// não precisa ser inicializada na declaração
final int x;
x = 5;</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var x = 5; // tipo implícito
int a = 5; // tipo explícito


var x = 5; // variável
const int x = 5; // constante

// tipo ignorado em tempo de compilação
dynamic x = 5;

unsafe {
	int* ponteiroDeInt = &amp;x; // ponteiro
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';



let x = 5; // variável
const x = 5; // constante

let x = 5; // tipo dinâmico
var x = 5; // estilo antigo

// lança exceção em modo estrito
// mas é aceito em modo normal
useSemDeclarar = 5;</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>var x = 5 // tipo implícito
int x = 5 // tipo explícito

int x = 5; // variável
final int x = 5; // assign only once constant
const int x = 5; // compile time constant

// não precisa ser inicializada na declaração
final int x;
x = 5;

// lazy
late int x = expensiveCall();</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># não existe uma declaração explícita
# erros de digitação podem introduzir bugs
# indesejados...
x = 5
x = 'dynamic type'</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>// não existe uma declaração explícita
// erros de digitação podem introduzir bugs
// indesejados...
$x = 5; // variável
const x = 5; // constante
define('x', '5'); // constante

$referenciaDeX =&amp;$x; // referência

global $g; // variável global

// variáveis Variáveis
$Bar = "a";
$Foo = "Bar";
$World = "Foo";
$Hello = "World";
$a = "Hello";

$a; // retorna Hello
$$a; // retorna World
$$$a; // retorna Foo
$$$$a; // retorna Bar
$$$$$a; // retorna a

$$$$$$a; // retorna Hello
$$$$$$$a; // retorna World
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Option Explicit



Dim x As Integer: x = 5 ' variável
Const x As Integer = 5 ' constante

Dim x: x = 5 ' tipo dinâmico
Dim x As Variant: x = 5 ' tipo dinâmico

' lança exceção com Option Explicit
' caso contrário é aceito
useSemDeclarar = 5

' Datas tem uma literal especial, em formato americano...
' Podemos digitar no formato #yyyy-mm-dd# e a IDE troca automaticamente para nós
Const dataLimite As Date = #12/30/2017#</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
>procedure Main is
	<strong>-- variáveis são declaradas</strong>
	<strong>-- num bloco separado</strong>
	<strong class='small'>X:Integer := 0; -- variável</strong>
	<strong>Y:constant Integer := 0; -- constante</strong>
begin

	<strong>-- variáveis são declaradas</strong>
	<strong>-- num bloco separado</strong>
	<strong class='small'>declare</strong>
		<strong>Y:Integer := 0;</strong>
	begin
		null;
	end;

end Main;</code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
>program Main;
	<strong>// variáveis são declaradas</strong>
	<strong>// num bloco separado</strong>
	<strong class='small'>var x:Integer = 0; // variável</strong>
	<strong>const y:Integer = 0; // constante</strong>
begin
	//
end.</code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
># não existe uma declaração explícita
# erros de digitação podem introduzir bugs
# indesejados...
x = 0 # variável
X = 0 # constante (maiúscula, lança warning apenas)</code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
>"variáveis são declaradas"
"num bloco separado?"
|x|
x := 5</code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
>; variáveis
(let(
	(x 0)
	(y 0)
	z
))

(let*(
	(x 0)
	(y 0)
	z
))

(defvar *x* 0)

(defparameter *x* 0.001)

; constante
(defconstant x 0 "constante")</code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
>x &lt;- return 0 -- variável
x = 0 -- constante
let x = 0 -- constante

{-
identificadores são declarados
num bloco separado <q>where</q>
se o escopo for local

Além disso, como os identificadores
nunca mudam de valor, a declaração
pode ser feita depois do seu uso
-}
minhaFuncao paramA = paramA * valorB
	where
	-- valorB declarado depois
	valorB = paramA + 1</code
>
</div>

</div>

<h3>Desestruturação</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
let (x, y) = (1, 2);</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// não suporta, mas as funções
// podem retornar valores múltiplos
min, max := getBounds(points)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// C++ 17+
auto [x, y] = std::make_tuple(1, 2);

struct Point {
	int x;
	int y;
};

Point p {1, 2};
auto [x, y] = p;</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
let (x, y) = (1, 2)</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
var (x, y) = Pair(1, 2)</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// C# 7+
(var x, var y) = (1, 2);

// TODO deconstructors</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
[x, y] = [1, 2];</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>// <a href='https://github.com/dart-lang/language/issues/207'>check progress</a>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
x, y = (1, 2)
head, *tail = [1, 2, 3, 4, 5]
a, b, *other, z = [1, 2, 3, 4, 5]

a, _ = [1, 2]
print(a)
# Prints: 1
a, _, c = (1, 2, 3)
print(a)
# Prints: 1
print(c)
# Prints: 3

a, *_ = [1, 2, 3, 4, 5]
a, *_, b = [1, 2, 3, 4, 5]
a, _, b, _, c, *_ = [1, 2, 3, 4, 5, 6]</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>// list() style
list($x, $y) = [1, 2];

// [] style
[$x, $y] = [1, 2];</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
-
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
-
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
>x, y = 1, 2</code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
>(destructuring-bind (x y) (list 1 2)
	;...
)</code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
-
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<h3 id='nomesvalidos'>Nomes Válidos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let eu1:i32;
let _ = "bem sucinto";
let _123 = "meio confuso";
let _if = "meio confuso";

// podemos ainda usar r# na frente
// do nome pra evitar colisões
// com palavras-chave e tipos
let r#if = "muito confuso";
let r#int = "muito confuso";

// a diferença de r# ao invés de _
// é que r# foi introduzido para
// suportar códigos de edições anteriores
// por exemplo, a palavra-chave try
// foi criado na edição 2018,
// invalidando a macro try! da edição 2015
// que pode ser chamada com r#try! se necessário</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>var _123 = 1
var _if = 1
var π = 3.14159
var 你好 = "你好世界"
// letras unicode, números e _</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>int eu1;
auto _ = "bem sucinto";
auto _123 = "meio confuso";
auto _if = "meio confuso";</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>int eu1;
int _ = "bem sucinto";
int _123 = "meio confuso";
int _if = "meio confuso";</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// TODO

// ignorar a variável
let _ = 1

let π = 3.14159
let 你好 = "你好世界"
let 🐶🐮 = "dogcow"
// cannot contain
// whitespace characters
// mathematical symbols
// arrows
// private-use (or invalid)
// Unicode code points
// line- and box-drawing
// cannot begin with a number</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>int eu1;
int _ = "bem sucinto"; // deprecated
int _123 = "meio confuso";
int _if = "meio confuso";

int $ = "bem sucinto";
int $123 = "meio confuso";
int $if = "meio confuso";

// TODO posso usar $$ ou misturar $?</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>int eu1;
var _ = "bem sucinto";
var _123 = "meio confuso";
var _if = "meio confuso";

// podemos ainda usar @ na frente
// do nome pra evitar colisões
// com palavras-chave e tipos
var @if = "muito confuso";
var @int = "muito confuso";

// TODO
// a diferença de @ ao invés de _
// é que...</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let eu1;
let _ = "bem sucinto";
let _123 = "meio confuso";
let _if = "meio confuso";

// TODO misturar _

let $ = "bem sucinto";
let $123 = "meio confuso";
let $if = "meio confuso";

// TODO posso usar $$ ou misturar $?

// muitos frameworks utilizam $
// como nome de seus objetos
// principais
// jQuery deve ser o mais
// famoso</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>


</div>

<ol>
	<li>Swift</li>
	<li>Rust</li>
	<li>C#</li>
	<li>JavaScript</li>
	<li>C++</li>
	<li>Java</li>
	<li>Objective-C</li>
	<li>Python</li>
</ol>

<p>Quem diria que um tópico tão simples seria tão diverso entre as linguagens?</p>
<p>
	Fortran usava <code class='generic bubaloop'><span class='operator'>=</span></code> e ALGOL usava <code class='generic bubaloop'><span class='operator'>:=</span></code> para atribuir valores às variáveis.
	Nessa lista, apenas Ada, Object Pascal (Delphi) e Smalltalk utilizam o estilo ALGOL.
	Como consequência, nestas linguagens como podemos ver, usamos <code class='generic bubaloop'><span class='operator'>=</span></code> para comparação, enquanto que as demais precisam usar algo como <code class='generic bubaloop'><span class='operator'>==</span></code>.
	Algumas linguagens como Lisp e SQL usam uma palavra-chave como <code class='generic bubaloop'><span class='keyword'>set</span></code> para atribuição.
</p>
<p>
	Rust e Swift são quase idênticos, mudando apenas uma coisa.
	Swift faz a declaração de variáveis e constantes serem <q>equivalentes</q>, enquanto Rust faz a declaração de variávies mais difíceis que de constantes. Mas porque Swift utilizou <code class='swift'>let</code> ao invés de <code class='cpp'>const</code>?<br />
JavaScript é a única das linguagens comparadas que possibilita mudar os tipos das variáveis dinamicamente. Sua sintaxe de desestruturação não permite declarar e atribuir um valor ao mesmo tempo. As variáveis já devem ser declaradas antes da atribuição. JavaScript possui um estilo legado de declaracão, que cria variáveis com regras de escopo diferentes do que a maioria dos programadores espera, além de possuir um modo estrito para coibir práticas legadas.<br />
C++ é o que tem mais legado de coisas que não deram certo, e sua última sintaxe pode ter regras mais seguras, mas certamente é bastante estranha. Tipagem implícita requer a palavra <code class='cpp'>auto</code>. Para aumentar a performance de nosso código, temos o recurso <code class='cpp'>constexpr</code>.<br />
Java parou no tempo e Objective-C também (mas cá entre nós, a Apple pelo menos admite). Porém, Objective-c ainda tem tipos ponteiro para deixar as coisas mais confusas. Python sequer tem constantes e o sistema de tipos é dinâmico.
</p>

</section>



<section>

<h2 id='nullnullable'>Null e Nullable</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// não existem tipos nullable
// mas existe um tipo std::Option&lt;T&gt;
// que pode conter None ou Some()

// tipo explícito
let mut k:Option&lt;i32&gt; = None;
let mut l:Option&lt;AStruct&gt; = None;

// tipo implícito Option&lt;i32&gt;
let mut m = None::&lt;i32&gt;;
let mut n = Some(10);

// erro, não pode passar um valor diretamente
// tem que usar Some(valor)
let mut o:Option&lt;i32&gt; = 10;

// não possui operador específico para Option
let p = match n { // p será do tipo i32
	Some(some) =&gt; some,
	None =&gt; 10,
};

// ok mas panic se for None
let q = n.unwrap(); // q será do tipo i32</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>*a := nil
// nil para ponteiros
// e tipos que não são structs,
// array, slice, map, string, rune,
// boolean e números</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>std::optional<span>&lt;<span>int</span>&gt;</span> k; // C++17
boost::optional<span>&lt;<span>int</span>&gt;</span> l; // boost</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// nil object
// Nil class
// NSNull singleton to represent null</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// optionals devem ter o tipo especificado
// em sua declaração
var k:Int? = nil
var l:AClass? = nil
let m = l?.propriedade // m recebe nil
let n = l!.propriedade // lança erro se l for nil

// nil coalescing operator
let o = k ?? 10 // o será do tipo Int

// ok mas não é idiomático
let p = k != nil ? k : 10 // p será do tipo Int?

// PS: nullable é chamado de optional
// e null é chamado de nil em Swift</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// nullables devem ter o tipo especificado
// em sua declaração
var k:Int? = null
var l:AClass? = null
val m = l?.propriedade // m recebe null
let n = l!!.propriedade // lança erro se l for null

// null coalescing operator
val o = k ?: 10 // o será do tipo Int</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipos primitivos não podem ser nullable
int a = null; // erro

// qualquer tipo de referência é nullable
Integer k = null;
AClass l = null;
Integer m = (l != null) ? l.propriedade : null;

// não possui operador específico para null
int n = (k != null) ? k : 10; // n aceita ser do tipo int ou Integer</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// nullable não pode ser usado com var
// um tipo deve ser especificado
int? k = null;
AClass? l = null;
int? m = l?.propriedade; // C# 6
int? m = x?[indice]; // C# 6
int? m = (l != null) ? l.propriedade : null;

// null coalescing operator
var n = k ?? 10; // n será do tipo int

// ok mas não é idiomático
var o = (k != null) ? k : 10; // o será do tipo int?</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

// qualquer tipo é sempre nullable
let k = null;
let l = (k &amp;&amp; k.propriedade) ? k.propriedade : null;

// null coalescing operator
let m = k || 10;

// ok mas não é idiomático
let n = (k || k === 0) ? k : 10;</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>

# qualquer tipo é sempre nullable
k = None</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Option Explicit

' qualquer tipo é sempre nullable
' mas o Visual Basic usa as palavras Empty e Nothing para tanto
' a palavra null é reservada para uso com bancos de dados

' Empty é o valor que uma variável não inicializada possui
Dim x: x = Empty

' Nothing só é usado com objetos TODO confirmar isso</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
>nil</code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposboolean'>Tipos Primitivos Boolean</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// tipo bool
let oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// parse
let toParse = "true";
let parsed:bool = toParse.parse().unwrap();</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// tipo bool
oitoOuOitenta := true
oitoOuOitenta = false

// converte para true
oitoOuOitenta = !oitoOuOitenta

// parse
toParse := "true"
parsed, err := strconv.ParseBool(toParse)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// tipo bool
auto oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// TODO #include &lt;boost/spirit/include/qi_bool.hpp&gt;</code
>
</div>
<!-- http://www.boost.org/doc/libs/1_44_0/libs/spirit/doc/html/spirit/qi/reference/numeric/boolean.html -->

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// tipo NSNumber wrapping BOOL
NSNumber* oitoOuOitenta = @YES;

// tipo BOOL
BOOL oitoOuOitenta = YES;

// tipo C bool
bool oitoOuOitenta = true;</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// tipo Bool
var oitoOuOitenta = true
oitoOuOitenta = false

// converte para true
oitoOuOitenta = !oitoOuOitenta

// Skips initial space characters,
// or optional -/+ sign followed by zeroes.
// Returns YES on encountering one of
// "Y", "y", "T", "t", or a digit 1-9.
// It ignores any trailing characters.
var boolValue:Bool { get }</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// tipo Boolean
var oitoOuOitenta = true
oitoOuOitenta = false

// converte para true
oitoOuOitenta = !oitoOuOitenta

// TODO parse boolean</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipo boolean
boolean oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// TODO Boolean.parseBoolean</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tipo bool
var oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// TODO Boolean.Parse
// Boolean.TryParse tb</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// tipo Boolean
let oitoOuOitenta = true;
oitoOuOitenta = false;

// converte para true
oitoOuOitenta = !oitoOuOitenta;

// TODO falar de falsy e truthy e !!

/*
// falsy
var bZero = new Boolean(0);
var bNull = new Boolean(null);
var bEmptyString = new Boolean('');
var bfalse = new Boolean(false);
// undefined e NaN

// truthy
var btrueString = new Boolean('true');
var bfalseString = new Boolean('false');
var bSuLin = new Boolean('Su Lin');
var bArrayProto = new Boolean([]);
var bObjProto = new Boolean({});*/</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># tipo Boolean
oitoOuOitenta = True
oitoOuOitenta = False;

# converte para true
oitoOuOitenta = not oitoOuOitenta

# falsy

bZero = 0
bNone = None
bEmptyString = ''
bFalse = False

0.0
0j
Decimal(0)
Fraction(0, 1)
[] - an empty list
{} - an empty dict
() - an empty tuple
b'' - an empty bytes
set() - an empty set
an empty range, like range(0)
objects for which
	obj.__bool__() returns False
	obj.__len__() returns 0</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Dim oitoOuOitenta: oitoOuOitenta = True
oitoOuOitenta = False

oitoOuOitenta = Not oitoOuOitenta</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section class='tiposprimitivos'>

<h2 id='tiposnumericos'>Tipos Primitivos Numéricos</h2>



<h3 id='integer'>Integer</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>i8</td><td>8 bits</td></tr>
		<tr><td>i16</td><td>16 bits</td></tr>
		<tr><td>i32</td><td>32 bits</td></tr>
		<tr><td>i64</td><td>64 bits</td></tr>
		<tr><td>i128</td><td>128 bits (experimental)</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Go</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int8</td><td>8 bits</td></tr>
		<tr><td>int16</td><td>16 bits</td></tr>
		<tr><td>int32</td><td>32 bits</td></tr>
		<tr><td>int64</td><td>64 bits</td></tr>
		<tr><td>rune</td><td>32 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>char</td><td>8 bits?</td></tr>
		<tr><td>short</td><td>16 bits ou mais</td></tr>
		<tr><td>int</td><td>16 bits ou mais</td></tr>
		<tr><td>long</td><td>32 bits ou mais</td></tr>
		<tr><td>long long</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int8_t</td><td>8 bits</td></tr>
		<tr><td>int16_t</td><td>16 bits</td></tr>
		<tr><td>int32_t</td><td>32 bits</td></tr>
		<tr><td>int64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>int_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>int_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>int_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int_fast8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>int_fast16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>int_fast32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>int_fast64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>char</td><td>8 bits</td></tr>
		<tr><td>short</td><td>16 bits</td></tr>
		<tr><td>int</td><td>32 bits</td></tr>
		<tr><td>long</td><td>32 ou 64 bits</td></tr>
		<tr><td>long long</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int8_t</td><td>8 bits</td></tr>
		<tr><td>int16_t</td><td>16 bits</td></tr>
		<tr><td>int32_t</td><td>32 bits</td></tr>
		<tr><td>int64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>int_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>int_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>int_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>CChar</td><td>8 bits</td></tr>
		<tr><td>CShort</td><td>16 bits</td></tr>
		<tr><td>CInt</td><td>16 bits</td></tr>
		<tr><td>CLong</td><td>32 bits</td></tr>
		<tr><td>CLongLong</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Int8</td><td>8 bits</td></tr>
		<tr><td>Int16</td><td>16 bits</td></tr>
		<tr><td>Int32</td><td>32 bits</td></tr>
		<tr><td>Int64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Kotlin</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Byte</td><td>8 bits</td></tr>
		<tr><td>Short</td><td>16 bits</td></tr>
		<tr><td>Int</td><td>32 bits</td></tr>
		<tr><td>Long</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Java</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>byte</td><td>8 bits</td></tr>
		<tr><td>short</td><td>16 bits</td></tr>
		<tr><td>int</td><td>32 bits</td></tr>
		<tr><td>long</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>sbyte</td><td>8 bits</td></tr>
		<tr><td>short</td><td>16 bits</td></tr>
		<tr><td>int</td><td>32 bits</td></tr>
		<tr><td>long</td><td>64 bits</td></tr>
		<tr><td>decimal</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
-
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>iN</td><td>N bits</td></tr>
		<tr><td>i1</td><td>1 bit</td></tr>
		<tr><td>i8388607</td><td>8388607 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<h3 id='unsignedinteger'>Unsigned Integer</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>u8</td><td>8 bits</td></tr>
		<tr><td>u16</td><td>16 bits</td></tr>
		<tr><td>u32</td><td>32 bits</td></tr>
		<tr><td>u64</td><td>64 bits</td></tr>
		<tr><td>u128</td><td>128 bits (experimental)</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Go</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>uint8</td><td>8 bits</td></tr>
		<tr><td>uint16</td><td>16 bits</td></tr>
		<tr><td>uint32</td><td>32 bits</td></tr>
		<tr><td>uint64</td><td>64 bits</td></tr>
		<tr><td>byte</td><td>8 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>char</td><td>8 bits?</td></tr>
		<tr><td>unsigned short</td><td>16 bits ou mais</td></tr>
		<tr><td>unsigned int</td><td>16 bits ou mais</td></tr>
		<tr><td>unsigned long</td><td>32 bits ou mais</td></tr>
		<tr><td>unsigned long long</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>uint8_t</td><td>8 bits</td></tr>
		<tr><td>uint16_t</td><td>16 bits</td></tr>
		<tr><td>uint32_t</td><td>32 bits</td></tr>
		<tr><td>uint64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>uint_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>uint_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>uint_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>uint_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>uint_fast8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>uint_fast16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>uint_fast32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>uint_fast64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>unsigned char</td><td>8 bits</td></tr>
		<tr><td>unsigned short</td><td>16 bits</td></tr>
		<tr><td>unsigned int</td><td>32 bits</td></tr>
		<tr><td>unsigned long</td><td>32 ou 64 bits</td></tr>
		<tr><td>unsigned long long</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>uint8_t</td><td>8 bits</td></tr>
		<tr><td>uint16_t</td><td>16 bits</td></tr>
		<tr><td>uint32_t</td><td>32 bits</td></tr>
		<tr><td>uint64_t</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>uint_least8_t</td><td>8 bits ou mais</td></tr>
		<tr><td>uint_least16_t</td><td>16 bits ou mais</td></tr>
		<tr><td>uint_least32_t</td><td>32 bits ou mais</td></tr>
		<tr><td>uint_least64_t</td><td>64 bits ou mais</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>CUnsignedChar</td><td>8 bits</td></tr>
		<tr><td>CUnsignedShort</td><td>16 bits</td></tr>
		<tr><td>CUnsignedInt</td><td>16 bits</td></tr>
		<tr><td>CUnsignedLong</td><td>32 bits</td></tr>
		<tr><td>CUnsignedLongLong</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>UInt8</td><td>8 bits</td></tr>
		<tr><td>UInt16</td><td>16 bits</td></tr>
		<tr><td>UInt32</td><td>32 bits</td></tr>
		<tr><td>UInt64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Kotlin</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>byte</td><td>8 bits</td></tr>
		<tr><td>ushort</td><td>16 bits</td></tr>
		<tr><td>uint</td><td>32 bits</td></tr>
		<tr><td>ulong</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
-
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
-

</div>

</div>



<h3 id='pointerinteger'>Pointer Sized Integer</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>isize</td><td>Depende do hardware</td></tr>
		<tr><td>usize</td><td>Depende do hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Go</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>int</td><td>Depende do hardware</td></tr>
		<tr><td>uint</td><td>Depende do hardware</td></tr>
		<tr><td>uintptr</td><td>Depende do hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>intptr_t</td><td>Depende do hardware</td></tr>
		<tr><td>uintptr_t</td><td>Depende do hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>NSInteger</td><td>32 ou 64 bits</td></tr>
		<tr><td>NSUInteger</td><td>32 ou 64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Int</td><td>Depende do Hardware</td></tr>
		<tr><td>UInt</td><td>Depende do Hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Kotlin</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Pointer Sized Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>nint</td><td>Depende do Hardware</td></tr>
		<tr><td>nuint</td><td>Depende do Hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>

<table>
	<caption>Integer</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Integer</td><td>Depende do Hardware</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
-
</div>

</div>



<h3 id='floatingpoint'>Floating Point</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>f32</td><td>32 bits</td></tr>
		<tr><td>f64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Go</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>float32</td><td>32 bits</td></tr>
		<tr><td>float64</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C++</p>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>long double</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Objective-C</p>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>long double</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>CFloat</td><td>32 bits</td></tr>
		<tr><td>CDouble</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Swift</p>

<table>
	<caption>Floating Point (IEEE-754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Float</td><td>32 bits</td></tr>
		<tr><td>Double</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Kotlin</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Java</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>decimal</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Number</td><td>64 bits</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>Python</p>

</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>half</td><td>16 bits</td></tr>
		<tr><td>float</td><td>32 bits</td></tr>
		<tr><td>double</td><td>64 bits</td></tr>
		<tr><td>fp128</td><td>128 bits</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>bfloat</td><td>16 bits</td></tr>
		<tr><td>x86_fp80</td><td>80 bits</td></tr>
		<tr><td>ppc_fp128</td><td>128 bits</td></tr>
	</tbody>
</table>

</div>

</div>



<h3 id='complex'>Complex</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>
<table>
	<caption>Complex</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>complex64</td><td>64 bits</td></tr>
		<tr><td>complex128</td><td>128 bits</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Kotlin</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>

</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
-

</div>

</div>



<h2 id='outrostiposnumericos'>Tipos Numéricos Não Primitivos</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>num::bigint::BigInt</td><td>?</td></tr>
		<tr><td>num::bigint::BigUint</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Go</p>

</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>NSNumber</td><td>cluster de tipos</td></tr>
		<tr><td>CGFloat</td><td>32 ou 64 bits</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Swift (Obj-C)</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>Float80</td><td>80 bits</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>java.math.BigInteger</td><td>?</td></tr>
		<tr><td>java.math.BigDecimal</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Java</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>BigInteger</td><td>?</td></tr>
		<tr><td>BigDecimal</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>C#</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>tamanho</th></tr>
	</thead>
	<tbody>
		<tr><td>BigInteger</td><td>?</td></tr>
		<tr><td>Complex</td><td>?</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>

</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
-

</div>

</div>



<ol>
	<li>Rust</li>
	<li>Swift</li>
	<li>C#</li>
	<li>Java</li>
	<li>C++</li>
	<li>Objective-C</li>
	<li>JavaScript</li>
</ol>

<p>Rust nomeia claramente os tipos numéricos que usa, além de usar nomes curtos.<br />
Swift prefere ser um pouco mais conservador e utilizar nomes como <code class='swift'>Int</code> e <code class='swift'>Double</code>. Possui também tipos para compatibilidade com as <abbr>API</abbr>s em C e Objective-C.<br />
C# mantém os nomes herdados do C (embora seja possível criar <em>type aliases</em> por arquivo). Notem a inconsistência com <code class='cs'>sbyte</code> e <code class='cs'>byte</code> devido a esta decisão. C# possui um tipo de 128 bits. Como roda numa máquina virtual, não possui tipos com tamanhos de memória como Rust e Swift. Não sei ao certo como é feito com <em>Native</em> .NET.<br />
Java não possui tipos sem sinal.<br />
C++ possui uma leve melhoria em relação à C, mas ainda é bem extenso.<br />
Objective-C mistura tipos de C e os próprios, fazendo uma salada só. Os tipos que ele herda de C não possuem tamanho fixo. Existe apenas a garantia de que <code class='objectivec'>short &lt;= int &lt;= long &lt;= long long</code>. Mesma coisa vale para <code class='objectivec'>float &lt;= double &lt;= long double</code>. Então existem tipos de tamanho fixo criados na especificação C99 e os tipos incluídos pelo framework da Apple.<br />
JavaScript só possui um tipo numérico.</p>
<p>Notem que existe uma divergência entre C++ e Objective-C e as demais linguagens em relação à nomeclatura. Para as duas linguagens, <code class='cpp'>int</code> e <code class='cpp'>long</code> possuem tamanhos diferentes das demais. Por isso, ponto para as linguagens que indicam explicitamente o tamanho dos tipos no próprio nome.</p>

</section>



<section class='tiposprimitivos'>

<h2 id='boxtiposnumericos'>Boxing de Tipos Primitivos Numéricos</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>

</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
<table>
	<caption>Numeric</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>?</td><td>NSNumber</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Kotlin</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>byte</td><td>Byte</td></tr>
		<tr><td>short</td><td>Short</td></tr>
		<tr><td>int</td><td>Integer</td></tr>
		<tr><td>long</td><td>Long</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>Float</td></tr>
		<tr><td>double</td><td>Double</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>Java</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>byte</td><td>Byte</td></tr>
		<tr><td>short</td><td>Short</td></tr>
		<tr><td>int</td><td>Integer</td></tr>
		<tr><td>long</td><td>Long</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>Float</td></tr>
		<tr><td>double</td><td>Double</td></tr>
	</tbody>
</table>
</div>

<div class='codeblock'>
<p>C#</p>

<table>
	<caption>Signed Integer</caption>
	<thead>
		<tr><th>tipo</th><th>struct</th></tr>
	</thead>
	<tbody>
		<tr><td>sbyte</td><td>SByte</td></tr>
		<tr><td>short</td><td>Int16</td></tr>
		<tr><td>int</td><td>Int32</td></tr>
		<tr><td>long</td><td>Int64</td></tr>
		<tr><td>decimal</td><td>Decimal</td></tr>
	</tbody>
</table>

<table>
	<caption>Unsigned Integer</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>byte</td><td>Byte</td></tr>
		<tr><td>ushort</td><td>UInt16</td></tr>
		<tr><td>uint</td><td>UInt32</td></tr>
		<tr><td>ulong</td><td>UInt64</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point (IEEE 754)</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>float</td><td>Single</td></tr>
		<tr><td>double</td><td>Double</td></tr>
	</tbody>
</table>

<table>
	<caption>Floating Point</caption>
	<thead>
		<tr><th>tipo</th><th>classe</th></tr>
	</thead>
	<tbody>
		<tr><td>decimal</td><td>Decimal</td></tr>
	</tbody>
</table>

</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>

</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
-

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='literaisnumericas'>Literais Numéricas</h2>



<h3 id='literaisdecimaisinteiros'>Decimais Inteiros</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// i8
let i81 = 1_i8;
let i82 = -1i8;

// u8
let u81 = 1_u8;

// i16
let i161 = 1i16;
let i162 = -1_i16;

// u16
let u161 = 1u16;

// i32
let i1 = 1;
let i2 = -1;
let i3 = 1_i32;

// avisa overflow -2147483648
let i4:i32 = 2_147_483_648;
let i5 = 2_147_483_648_i32;
let i6 = 2_147_483_648;

// avisa underflow 2147483647
let i7:i32 = -2_147_483_649;
let i8 = -2_147_483_649_i32;
let i9 = -2_147_483_649;

// u32
let u1 = 2_147_483_648_u32;

// i64
let i641 = 1_i64;
let i642 = -1_i64;

// u64
let u641 = 1_u64;

// pointer size
let isize1 = 1_isize;
let usize1 = 1_usize;        </code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// pointer size
i1 := 1
i2 := 2_147_483_648 // se x64 ok
i3 := -2_147_483_649 // se x64 ok

// lança exceção
// contant ix overflows int32
var i4 int32 = 2_147_483_648
var i5 int32 = -2_147_483_649

// lança exceção
// contant e1 overflows int
e1 := 9_223_372_036_854_775_808</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// int32_t (x64 LP64)
auto i1{1};
auto i2{-1};

// uint32_t (x64 LP64)
auto u1{1u};
auto u2{2'147'483'648U};


// int64_t (x64 LP64)
auto l1{2'147'483'648};
auto l2{-2'147'483'649};
auto l3{1l};
auto l4{1L};
auto l5{1ll};
auto l6{1LL};

// uint64_t (x64 LP64)
auto ul1{9'223'372'036'854'775'808};
auto ul2{1ul};
auto ul3{1UL};
auto ul4{1ull};
auto ul5{1ULL};</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// TODO

NSNumber* myBool = @YES;
NSNumber* myBool = [[NSNumber alloc] initWithBOOL:YES];

// int
NSInteger i1 = 42; // NSLog(@"%zd", i1);
NSNumber* i2 = @42; // NSLog(@"%@", i2);
NSNumber* i3 = [[NSNumber alloc] initWithInt:42];

// uint
NSUInteger u1 = 42u; // NSLog(@"%tu", u1);
NSNumber* u2 = @42u; // NSLog(@"%@", u2);
NSNumber* u3 = [[NSNumber alloc] initWithUnsignedInt:42u];

// long
NSNumber* l1 = @42L;
NSNumber* l1 = [[NSNumber alloc] initWithLong:42L];

// long long
NSNumber* ll1 = @42LL;
NSNumber* ll1 = [[NSNumber alloc] initWithLong:42LL];</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Int (x64)
let i1 = 1
let i2 = -1
let i3 = 2_147_483_648
let i4 = -2_147_483_649












// UInt (x64)
let u1:UInt = 9_223_372_036_854_775_808

// lança exceção
// does not fit inside Int (x64)
let e1 = 9_223_372_036_854_775_808
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// Int
val i1 = 1
val 12 = -1
val i3 = 2_147_483_648
val i4 = -2_147_483_649




// Long
val l1 = 1L</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// int
Object i1 = 1;
Object i2 = -1;






// long
Object l1 = 2_147_483_648l;
Object l2 = -2_147_483_649L;
Object l3 = 1l;
Object l4 = 1L;


// lança exceção
// integer number too large
Object l5 = 9_223_372_036_854_775_808L;</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// int
var i1 = 1;
var i2 = -1;

// uint
var u1 = 1u;
var u2 = 2147483648U;
var u3 = 2147483648;

// long
var l1 = 2147483648L;
var l2 = -2147483649;
var l3 = -2147483649L;
var l4 = 1l;
var l5 = 1L;


// ulong
// terminal com ul ou lu
// TODO                      </code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

</div>



<h3 id='literaisdecimaisfloatingpoint'>Decimais Floating Point</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// f32 (float)
let f1 = 1f32;


// f64 (double)
let d1 = 1f64;
let d2 = 1.0;                </code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// float32
f1 := float32(1)

// float64
d1 := 1.0
d2 := .7                         </code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
                                    </code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// NSNumber wrapping float
NSNumber* f1 = @1f;
NSNumber* f1m = [NSNumber numberWithFloat:1f];

// NSNumber wrapping double
NSNumber *d1 = @1.0;
NSNumber *d1m = [NSNumber numberWithDouble:1.0];          </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Float
let f1:Float = 1


// Double
let d1 = 1.0
let d2 = 0.7 // não aceita .7          </code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// Float
val f1 = 1f
val f2 = 1F

// Double
val d1 = 1.0
val d2 = .7                 </code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// float
Object f1 = 1f;
Object f2 = 1F;

// double
Object d1 = 1d;
Object d2 = 1D;
Object d3 = 1.0;
Object d4 = .7;              </code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// float
var f1 = 1f;
var f2 = 1F;

// double
var db1 = 1d;
var db2 = 1D;
var db3 = 1.0;
var db4 = .7;

// decimal
var dc = 1m;                 </code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// double
let d1 = 1;
let d2 = -1;
let d3 = 2147483648;
let d4 = -2147483649;
let d5 = 1.0;
let d6 = .7;                 </code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<h3 id='notacoesnumericas'>Notações</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// notação científica
let c1 = 1e_0;
let c2 = 1e-1;
let c3 = -0.7_e-2;

// notação binária
let b1 = 0b_0000_0001;
let b2 = -0b0000_0010;

// notação octal
let o1 = 0o_01234567;
let o2 = -0o1234567;

// notação hexadecimal
let cor = 0x_ff_00_00;
let x1 = -0x0123456789ABCDEF;

// TODO misturar notações
// com sufixos</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// notação científica
c1 := 1e0
c2 := 1e-1
c3 := -.7e-2

// notação binária
b1 := 0b_0000_0001
b2 := -0B0000_0010

// notação octal
o1 := 0o_01234567
o2 := -0O1234567

// notação hexadecimal
cor := 0x_ff_00_00
x1 := -0X0123456789ABCDEF

// notação hexadecimal científica
xc1 := 0x1p-2       // == 0.25
xc2 := 0x2.p10      // == 2048.0
xc3 := 0x1.Fp+0     // == 1.9375 </code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
                                    </code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
                                                          </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// notação científica
let c1 = 1e0
let c2 = 1e-1
let c3 = -0.7_e-2

// notação binária
let b1 = 0b0000_0001
let b2 = -0b0000_0010

// notação octal
let o1 = 0o01234567
let o2 = -0o1234567

// notação hexadecimal
let cor = 0xff_00_00
let x1 = -0x0123456789ABCDEF

// notação hexadecimal científica
let xc1 = 0xff0000p0
let xc2 = -0x0123456789ABCDEF_p9       </code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// notação científica
val c1 = 1e0
val c2 = 1e-1
val c3 = -.7e-2

// notação binária
val b1 = 0b0000_0001
val b2 = -0B0000_0010





// notação hexadecimal
val cor = 0xff_00_00
val x1 = -0X0123456789ABCDEF</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// notação científica
double c1 = 1e0;
double c2 = 1e-1;
double c3 = -.7e-2;

// notação binária
int b1 = 0b0000_0001;
int b2 = -0B00000010;

// notação octal
int o1 = 01_234_567;
int o2 = -01234567;

// notação hexadecimal
int cor = 0xff_00_00;
int x1 = -0X0123456789ABCDEF;

// TODO misturar notações
// com sufixos</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// notação científica
double c1 = 1e0;
double c2 = 1e-1;
double c3 = -.7e-2;

// notação binária - C# 7+
val b1 = 0b0000_0001
val b2 = -0B0000_0010



// notação hexadecimal
int cor = 0xff0000;
int x1 = -0X0123456789ABCDEF;

// TODO misturar notações
// com sufixos</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// notação científica
let c1 = 1e0;
let c2 = 1e-1;
let c3 = -.7e-2;

// notação binária
let b1 = 0B0000_0001;
let b2 = -0b0000_0010;

// notação octal
let o1 = 0o0123_4567;
let o2 = -0O123_4567;

// notação hexadecimal
let cor = 0xff_00_00;
let x1 = -0X0123456789ABCDEF;

// separadores _ requerem
// Chrome 75+
// Firefox 70+
// Safari 13+</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<h3 id='paddingnumerico'>Padding</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let i1 = 10;
let p1 = 01;
let p2 = 00.1;               </code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>i1 := 10

// desde go 1.13, antes era
// considerado octal
p1 := 01
p2 := 00.1                       </code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// números começando com 0
// são considerados notação
// octal                            </code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
                                                          </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let i1 = 10
let p1 = 01
let p2 = 00.1                          </code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>

val p2 = 00.1                </code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// números começando com 0
// são considerados notação
// octal                     </code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var i1 = 10;
var p1 = 01;
var p1 = 00.1;               </code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let i1 = 10;
let p1 = 01;                 </code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='conversoesnumericas'>Conversão entre Tipos Numéricos</h2>



<h3 id='operacoesnumericas'>Operações</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// Requer compilação com flag -O
// Compilações sem otimização panic no overflow

let i32_1:i32 = 2;
let i32_2:i32 = 4;
let i32_min:i32 = std::i32::MIN;
let i32_max:i32 = std::i32::MAX;

let i64_1:i64 = i32_max as i64; // explicit conversion 2147483647 (i64)
let i16_1:i16 = i32_max as i16; // explicit conversion -1 (i16)

// explicit conversion
let adicao1 = i32_max + 1; // -2147483648 (i32)
let adicao2 = i64_1 + (i32_1 as i64); // 2147483649 (i64)
let adicao3 = i64_1 + (i32_max as i64); // 4294967294 (i64)

// explicit conversion
let subtracao1 = i32_min - 1; // 2147483647 (i32)
let subtracao2 = (i16_1 as i32) - i32_1; // -3 (i32)
let subtracao3 = (i16_1 as i32) - i32_max; // -2147483648 (i32)

// explicit conversion
let multiplicacao1 = i32_1 * i32_2; // 8 (i32)
let multiplicacao2 = i32_max * i32_1; // -2 (i32)
let multiplicacao3 = (i32_1 as i64) * i64_1; // 4294967294 (i64)

// explicit conversion
let divisao1 = i32_2 / i32_1; // 2 (i32)
let divisao2 = i32_1 / i32_2; // 0 (i32)
let divisao3 = (i16_1 as i32) / i32_1; // 0 (i32)

// NOTA
// literais numéricas sem sufixo possuem o tipo _
// e não realizam operações matemáticas

// TODO converte para char e boolean</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// requer import "math"

// integer literals without type are int by default, not int32
var i32_1 int32 = 2
var i32_2 int32 = 4
var i32_min int32 = math.MinInt32
var i32_max int32 = math.MaxInt32

i64 := int64(i32_max) // explicit conversion 2147483647 (int64)
i16 := int16(i32_max) // explicit conversion -1 (int16)

// implicit conversion
adicao1 := i32_max + 1 // 2147483648 (int64)
subtracao1 := i32_min - 1 // -2147483649 (int64)

// explicit conversion
adicao2 := i64 + int64(i32_1) // 2147483649 (int64)
adicao3 := i64 + int64(i32_max) // 4294967294 (int64)
subtracao2 := int32(i16) - i32_1 // -3 (int32)
subtracao3 := int32(i16) - i32_max // -2147483648 (int32)

// explicit conversion
multiplicacao1 := i32_1 * i32_2 // 8 (int32)
multiplicacao2 := i32_max * i32_1 // -2 (int32)
multiplicacao3 := int64(i32_1) * i64 // 4294967294 (int64)

// explicit conversion
divisao1 := i32_2 / i32_1 // 2 (int32)
divisao2 := i32_1 / i32_2 // 0 (int32)
divisao3 := int32(i16) / i32_1 // 0 (int32)

intVar := 1
doubleVar := 0.1

// requer conversão explícita
somaVar := float64(intVar) + doubleVar
doubleVar += float64(intVar)

// não requer
somaLiteral := 1 + 0.1
doubleVar += 1</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Conversão explícita é sempre requerida para
// operações com variáveis

let i32_1:Int32 = 2
let i32_2:Int32 = 4
let i32_min:Int32 = Int32.min
let i32_max:Int32 = Int32.max

let i64:Int64 = Int64(i32_max) // explicit conversion 2147483647 (Int64)
let i16:Int16 = Int16(truncatingBitPattern: i32_max) // explicit conversion -1 (Int16)

// explicit conversion and overflow operator &amp;+
var adicao1 = i32_max &amp;+ 1 // -2147483648 (Int32)
var adicao2 = i64 + Int64(i32_1) // 2147483649 (Int64)
var adicao3 = i64 + Int64(i32_max) // 4294967294 (Int64)

// explicit conversion and overflow operator &amp;-
var subtracao1 = i32_min &amp;- 1 // 2147483647 (Int32)
var subtracao2 = Int32(i16) &amp;- i32_1 // -3 (Int32)
var subtracao3 = Int32(i16) &amp;- i32_max // -2147483648 (Int32)

// explicit conversion and overflow operator &amp;*
var multiplicacao1 = i32_1 * i32_2 // 8 (Int32)
var multiplicacao2 = i32_max &amp;* i32_1 // -2 (Int32)
var multiplicacao3 = Int64(i32_1) * i64 // 4294967294 (Int64)

// explicit conversion
var divisao1 = i32_2 / i32_1 // 2 (Int32)
var divisao2 = i32_1 / i32_2 // 0 (Int32)
var divisao3 = Int32(i16) / i32_1 // 0 (Int32)

// NOTA
// Literais numéricas não possuem tipo específico,
// apenas variáveis possuem. Portanto realizar
// operações com variáveis requer conversões
// explícitas, enquanto que operações com literais
// não requer

let intVar = 1
var doubleVar = 0.1

// requer conversão explícita
let somaVar = Double(intVar) + doubleVar
doubleVar += Double(intVar)

// não requer
let somaLiteral = 1 + 0.1
doubleVar += 1</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>

int i32_1 = 2;
int i32_2 = 4;
int i32_min = Integer.MIN_VALUE;
int i32_max = Integer.MAX_VALUE;

long i64 = i32_max; // implicit conversion 2147483647 (long)
short i16 = (short)i32_max; // explicit conversion -1 (short)

// usa o tipo maior
Object adicao1 = i32_max + 1; // -2147483648 (int)
Object adicao2 = i64 + i32_1; // 2147483649 (long)
Object adicao3 = i64 + i32_max; // 4294967294 (long)

// usa o tipo maior
Object subtracao1 = i32_min - 1; // 2147483647 (int)
Object subtracao2 = i16 - i32_1; // -3 (int)
Object subtracao3 = i16 - i32_max; // -2147483648 (int)

// usa o tipo maior
Object multiplicacao1 = i32_1 * i32_2; // 8 (int)
Object multiplicacao2 = i32_max * i32_1; // -2 (int)
Object multiplicacao3 = i32_1 * i64; // 4294967294 (long)

// usa o tipo maior
Object divisao1 = i32_2 / i32_1; // 2 (int)
Object divisao2 = i32_1 / i32_2; // 0 (int)
Object divisao3 = i16 / i32_1; // 0 (int)

// TODO char converte tb</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>unchecked {

	int i32_1 = 2;
	int i32_2 = 4;
	int i32_min = Int32.MinValue;
	int i32_max = Int32.MaxValue;

	long i64 = i32_max; // implicit conversion 2147483647 (long)
	short i16 = (short)i32_max; // explicit conversion -1 (short)

	// usa o tipo maior
	var adicao1 = i32_max + 1; // -2147483648 (int)
	var adicao2 = i64 + i32_1; // 2147483649 (long)
	var adicao3 = i64 + i32_max; // 4294967294 (long)

	// usa o tipo maior
	var subtracao1 = i32_min - 1; // 2147483647 (int)
	var subtracao2 = i16 - i32_1; // -3 (int)
	var subtracao3 = i16 - i32_max; // -2147483648 (int)

	// usa o tipo maior
	var multiplicacao1 = i32_1 * i32_2; // 8 (int)
	var multiplicacao2 = i32_max * i32_1; // -2 (int)
	var multiplicacao3 = i32_1 * i64; // 4294967294 (long)

	// usa o tipo maior
	var divisao1 = i32_2 / i32_1; // 2 (int)
	var divisao2 = i32_1 / i32_2; // 0 (int)
	var divisao3 = i16 / i32_1; // 0 (int)

}



// conversão implícita se o número couber no outro
// byte -&gt; int, uint ou float por exemplo
// sbyte -&gt; int ou float

// conversão explícita
// entre integrals
// entre floats
// de floats para integrals

// tipo numerico não converte pra char

/*

When you convert from a double or float value to an integral type,
the value is truncated. If the resulting integral value is outside
the range of the destination value, the result depends on the
overflow checking context.

When you convert double to float, the double value is rounded
to the nearest float value. If the double value is too small
or too large to fit into the destination type, the result
will be zero or infinity.

When you convert decimal to float or double, the decimal value is rounded
to the nearest double or float value.
*/</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

// só usa um único tipo numérico double
// não há o que converter

// números não sofrem overflow nem underflow,
// e não dão aviso se você tentar passar
// dos limites

let i = Number.MAX_VALUE;
let j = Number.MAX_VALUE + 1; // não dá aviso
if (i === j) {
	console.log('j foi limitado');
}

i = -i
j = -j - 1; // não dá aviso
if (i === j) {
	console.log('j foi limitado');
}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<h3 id='conversoesnumericasfuncoes'>Argumentos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>/*

{

// conversão explícita de int para byte 1
this.recebeByte((byte)1);

// conversão explícita 44
this.recebeByte((byte)300);

}

private void recebeByte(byte numero) {
	System.out.println("\nRecebe byte");
	System.out.println(numero);
}
*/
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// só usa um único tipo numérico double
// não há o que converter</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>


<h3>Parsing de números</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let i = s.parse::&lt;i32&gt;().unwrap();
let i:i32 = s.parse().unwrap();
let i:i32 = s.parse::&lt;i32&gt;().unwrap_or(0);
let i = match s.parse::&lt;i32&gt;() {
	Ok(i) =&gt; i,
	Err(_e) =&gt; 0,
};</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// requer import "strconv"

// "a to i" e "i to a" string &lt;--&gt; int base 10
i, err := strconv.Atoi("-42")
s := strconv.Itoa(-42)

b, err := strconv.ParseBool("true")
f, err := strconv.ParseFloat("3.1415", 64) // size 64
i, err := strconv.ParseInt("-42", 10, 64) // base 10 size 64
u, err := strconv.ParseUint("42", 10, 64) // base 10 size 64</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>auto i = std::stoi(s); // #include &lt;string&gt;

int i;
i = std::from_chars(s.data(), s.data() + s.size(), i, 10);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>int i = [s intValue];
s.intValue;
[@"     2     some non-digit characters" intValue]; // 2</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let i = Int(s) ?? 0</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>val i = s.toInt()</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>var i = Integer.parseInt(s);
var i = new Integer(s).intValue();</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var i = int.Parse(s);
var i = Convert.ToInt64(s);</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>parseInt('1111', 2); // base 2
parseInt(15.99, 10);
parseInt('15,123', 10);
parseInt('15 * 3', 10);
parseInt('15e2', 10);
parseInt('FXX123', 16);

// dangerous, no base specified
// chooses base depending on string format
parseFloat('3.14');
parseFloat('314e-2');
parseFloat('0.0314E+2');
parseInt('015', 10); // but `parseInt(015, 8)` will return 13
parseFloat('3.14some non-digit characters');</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>i = int(s)</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Dim i As Integer = CInt((s))</code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposchar'>Chars</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let someChar = 'T';
// suporta 4 bytes unicode \u{0000}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>var someRune = 'T'
// go chama de runes
// suporta 4 bytes unicode \u0000</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>auto someChar = 'T';
char oitoBits;
wchar_t trintaEDoisBits; // mas no windows é só 16 bits
char16_t dezesseisBits;
char32_t trintaEDoisBits;
char8_t oitoBits; // C++11</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>NSNumber* someChar = @'T';
NSNumber* someChar = [NSNumber numberWithChar:'T'];</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Use strings com apenas um caractere
// pode usar a notação \u{n}
// onde n is um número com 1 a 8 dígitos hexadecimais</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>var someChar = 'T'
// suporta 2 bytes unicode '\u0000' - '\uFFFF'</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>var someChar = 'T';
// suporta 2 bytes unicode '\u0000' - '\uFFFF'
// e em alguns métodos que aceitam int pode usar até '\u10FFFF'</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var someChar = 'T';
// suporta 2 bytes unicode '\u0000' - '\uFFFF'
// ou notação em hexadecimal '\x0000'</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// só usa strings
// não possui chars</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># Usa strings com apenas um caractere</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Dim someChar: someChar = Chr(0)
' suporta 8 bits até Chr(255)</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>Rust</li>
	<li>C++</li>
	<li>Kotlin, Java e C#</li>
	<li>Objective-C</li>
	<li>Swift, JavaScript, Python</li>
	<li>VB6</li>
</ol>

<p>
	Suporte a Unicode é o que mais pesou nesta classificação.
	Rust possui apenas um tipo que suporta até 32 bits, e C++ possui um para cada tamanho.
	Não sei até que ponto isso é vantagem.
	Também fiquei em dúvida se ter um tipo exclusivo para caracteres é vantajoso.
	Vou considerar que sim, embora não tenha feito nenhum benchmark.
	Objective-C possui dois tipos, o próprio e o herdado do C.
	Provavelmente VB6 foi descontinuado antes de existir Unicode, suportando apenas ASCII...
</p>

</section>



<section>

<h2 id='tiposstring'>Strings</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// tipo &amp;str

let simples = "A primeira faz \"tchan\" e só";

let calvinHarris = "how deep\nis your love"; // 2 linhas

// várias linhas
let josePauloPaes = "Meu amor é simples, Dora,
Como a água e o pão.

Como o céu refletido
Nas pupilas de um cão.";

// concatenação
let leminski = concat!("Merda é veneno.",
	"No entanto, não há nada",
	"que seja mais bonito",
	"que uma bela cagada.",
	"Cagam ricos, cagam pobres,",
	"cagam reis e cagam fadas.",
	"Não há merda que se compare",
	"à bosta da pessoa amada."
);

// tipo String

let simples = "A primeira faz \"tchan\" e só".to_string();

let raw_string = r"escape not \n processed";
let raw_string = r#"escape not " processed"#; // can also use other delimiters if needed
let integer_array = b"will be stored as an [u8] array";
let raw_integer_array = br"will be stored as an [u8] array with unescaped characters"</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
dupla := "A segunda faz 'tchun'"
rawString := `A primeira faz "tchan". A segunda faz 'tchun'`

calvinHarris := "how deep\nis your love" // 2 linhas

// concatenação
josePauloPaes := "Meu amor é simples, Dora,\n" +
"Como a água e o pão.\n" +
"\n" +
"Como o céu refletido\n" +
"Nas pupilas de um cão."

// várias linhas
leminskiTemplate := `Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.`

emoji := "😍"
clustered := "\u1F60D" // code point
clustered := "\U0001F60D" // code point
bytes := "\xf0\x9f\x98\x8d"

// string é imutável, então seus métodos retornam novas instâncias

beeGees := strings.ReplaceAll(calvinHarris, "love", "looove")
strings.ToUpper("Gritando") // retorna "GRITANDO"</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>auto cString = "mãe d'água";
auto cStringEscape = "A primeira faz \"tchan\"";
auto rawString = R"(A segunda faz "tchun")";
auto html = R"(&lt;em class="especial"&gt;ênfase&lt;/em&gt;)";

auto meuSeparador = R"meuSeparador(aa)meuSeparador";
auto meuSeparador = R"meuSeparador( )" )meuSeparador"; // FIXME highlighter raw string

auto calvinHarris = "how deep\nis your love"; // 2 linhas

auto pareceMasNaoE = "começa e \
termina na mesma linha?"; // 1 linha apenas

// várias linhas
auto josePauloPaes = "Meu amor é simples, Dora,\n\
Como a água e o pão.\n\
\n\
Como o céu refletido\n\
Nas pupilas de um cão.";

// várias linhas
auto leminski = R"(Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.)";

// concatenação
// TODO</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>NSString* simples = @"";
NSMutableString* mutavel = @"";
char* cString = "";</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let simples = "A primeira faz \"tchan\" e só"

let calvinHarris = "how deep\nis your love" // 2 linhas

// concatenação - única maneira de usar várias linhas antes de swift 4
let josePauloPaes = "Meu amor é simples, Dora,\n" +
"Como a água e o pão.\n" +
"\n" +
"Como o céu refletido\n" +
"Nas pupilas de um cão."

// várias linhas (swift 4+)
let leminskiTemplate = """Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada."""

let leadingWhitespace = """
	Sem leading (alinhado com a última linha)
		Com um tab de leading
	Sem leading (alinhado com a última linha)
	"""

let multiplier = 3
let stringInterpolada = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"

let emoji = "😍";
let combined = "\u{D83D}\u{DE0D}"
let clustered = "\u{1F60D}"

// string é imutável, então seus métodos retornam novas instâncias
let beeGees = calvinHarris.replacingOccurrences(of: "love", with: "looove")

"Gritando".uppercaseString // retorna 'GRITANDO'</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>val simples = "A primeira faz \"tchan\" e só"

val calvinHarris = "how deep\nis your love" // 2 linhas

// concatenação
val josePauloPaes = "Meu amor é simples, Dora,\n" +
"Como a água e o pão.\n" +
"\n" +
"Como o céu refletido\n" +
"Nas pupilas de um cão."

// várias linhas
val leminskiTemplate = """Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada."""

val leadingWhitespace = """
	|Sem leading
	|	Com leading
	|Sem leading
	""".trimMargin()
// caso padrão de trimMargin("|")

// TODO</code>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>var simples = "A primeira faz \"tchan\" e só";

var calvinHarris = "how deep\nis your love"; // 2 linhas

// concatenação
var josePauloPaes = "Meu amor é simples, Dora,\n" +
"Como a água e o pão.\n" +
"\n" +
"Como o céu refletido\n" +
"Nas pupilas de um cão.";

// várias linhas - java 14+
var leminskiTemplate = """Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.""";

var leadingWhitespace = """
	Sem leading (alinhado com a última linha)
		Com um tab de leading
	Sem leading (alinhado com a última linha)
	""";</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var simples = "A primeira faz \"tchan\"";
var dupla = @"A segunda faz ""tchun""";
var interpolated = $"A segunda faz \"tchun\"";

var calvinHarris = "how deep\nis your love"; // 2 linhas

// concatenação
var josePauloPaes = "Meu amor é simples, Dora,\n" +
"Como a água e o pão.\n" +
"\n" +
"Como o céu refletido\n" +
"Nas pupilas de um cão.";

// várias linhas
var leminskiTemplate = @"Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.";

var multiInterpolated = $@"{a}
{b}";

var multiplier = 3;
var stringInterpolada = $"{multiplier} times 2.5 is {multiplier * 2.5}";

var emoji = "😍";
var combined = "\uD83D\uDE0D";
var clustered = "\x1F60D";

// string é imutável, então seus métodos retornam novas instâncias
var beeGees = calvinHarris.Replace("love", "looove");

"Gritando".ToUpper(); // retorna 'GRITANDO'</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

let simples = 'A primeira faz "tchan"';
let dupla = "A segunda faz 'tchun'";
let duplaTemplate = `A primeira faz "tchan". A segunda faz 'tchun'`;

const iara = "mãe d'água";
const modoDificil = 'O\'Reilly';
let html = '&lt;em class="especial"&gt;ênfase&lt;/em&gt;';

let calvinHarris = 'how deep\nis your love'; // 2 linhas

let pareceMasNaoE = 'começa e \
termina na mesma linha?'; // 1 linha apenas

// várias linhas
let josePauloPaes = 'Meu amor é simples, Dora,\n\
Como a água e o pão.\n\
\n\
Como o céu refletido\n\
Nas pupilas de um cão.';

// várias linhas
let leminskiTemplate = `Merda é veneno.
No entanto, não há nada
que seja mais bonito
que uma bela cagada.
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.`;

let multiplier = 3;
let stringInterpolada = `${multiplier} times 2.5 is ${multiplier * 2.5}`;

let emoji = '😍';
let es5 = '\uD83D\uDE0D'; // code units / surrogates
let es6 = '\u{1F60D}'; // code point

// string é imutável, então seus métodos retornam novas instâncias
let beeGees = calvinHarris.replace('love', 'looove');

'Gritando'.toUpperCase(); // retorna 'GRITANDO'</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>simples = 'A primeira faz "tchan"'
dupla = "A segunda faz 'tchun'"

iara = "mãe d'água"
modoDificil = 'O\'Reilly'; # TODO verificar isso
html = '&lt;em class="especial"&gt;ênfase&lt;/em&gt;'

calvinHarris = 'how deep\nis your love'; # 2 linhas

pareceMasNaoE = 'começa e \
termina na mesma linha?'; # 1 linha apenas TODO verificar isso

# várias linhas
josePauloPaes = 'Meu amor é simples, Dora,\n\
Como a água e o pão.\n\
\n\
Como o céu refletido\n\
Nas pupilas de um cão.'; # TODO verificar isso

# várias linhas
leminskiTemplate = '''
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada.'''

# várias linhas
leminskiTemplate2 = """
Cagam ricos, cagam pobres,
cagam reis e cagam fadas.
Não há merda que se compare
à bosta da pessoa amada."""

<!--
let emoji = '😍';
let es5 = '\uD83D\uDE0D'; // code units / surrogates
let es6 = '\u{1F60D}'; // code point
-->

# string é imutável, então seus métodos retornam novas instâncias
beeGees = calvinHarris.replace('love', 'looove');

'Gritando'.upper(); # retorna 'GRITANDO'</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Option Explicit

Dim simples As String

simples = "A primeira faz ""tchan"""</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

<h3 id='construindostrings'>Construindo strings</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO melhorar isso
let mut vector:Vec&lt;_&gt;;
vector.push("Terminou.");
vector.push(" Só que não");
vector
	.chars()
	.collect();
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>var stringBuilder strings.Builder
stringBuilder.WriteString("Terminou")
stringBuilder.WriteString(" Só que não")
stringBuilder.String()</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;sstream&gt;
std::ostringstream outputStringStream;
outputStringStream &lt;&lt; "Terminou." &lt;&lt; " Só que não.";
outputStringStream.str();</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// TODO NSMutableString
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// supostamente var string
// ao invés de let string</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>var stringBuilder = new StringBuilder()
stringBuilder.append("Terminou.")
stringBuilder.append(" Só que não.")
stringBuilder.toString()</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>var stringBuilder = new StringBuilder();
stringBuilder.append("Terminou.");
stringBuilder.append(" Só que não.");
stringBuilder.toString();

// StringBuilder não é thread safe
// Existe também a classe StringBuffer, que é</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>var stringBuilder = new StringBuilder();
stringBuilder.Append("Terminou.");
stringBuilder.Append(" Só que não.");
stringBuilder.ToString();</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposarray'>Arrays</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let vazia:[i32; 0] = [];



// uma dimensão
let mut preAlocada:[i32; 10];
preAlocada = [0; 17];
let prePopulada = ["p", "r", "e"];
let prePopuladaT:[&amp;str; 3] = ["p", "o", "p"];

const linhas:usize = 2;
const colunas:usize = 4;

// multidimensional
let mdPreAlocada:[[u8; colunas]; linhas];
let mdPrePopulada = [
	[0, 1, 2, 3],
	[4, 5, 6, 7]
];









preAlocada[5] = 16000;

let indice0 = prePopulada[0];
let two = mdPrePopulada[0][2];

for valor in prePopulada.iter() {
	//
}

for (indice, valor) in prePopulada.iter().enumerate() {
	// indice e valor
}

let tamanho = mdPrePopulada.len();

// TODO comparar arrays</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>vazia := [0]int{}
var vazia2 [0]int

// uma dimensão
var preAlocada [10]int
// não é possível redimensionar uma array em Go
prePopulada := [3]string{"p", "r", "e"}
var prePopuladaT [3]string = [3]string{"p", "o", "p"}

// tem que ser constantes
const linhas = 2
const colunas = 4

// multidimensional
var mdPreAlocada [linhas][colunas]uint8
mdPrePopulada := [linhas][colunas]uint8 {
	{0, 1, 2, 3},
	{4, 5, 6, 7}, // , no final não é um erro, go requer
}









preAlocada[5] = 16000

indice0 := prePopulada[0]
two := mdPrePopulada[0][2]

for indice, valor := range prePopulada {
	//
}





tamanho := len(mdPrePopulada)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// TODO
std::Array arrayCpp;
int arrayCPreAlocada[10];
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>int arrayCPreAlocada[10];



// uma dimensão
NSArray* prePopulada = @[@"p", @"r", @"e"];
NSArray* prePopuladaAntiga = [NSArray arrayWithObjects:@"o", @"l", @"d", nil];



int linhas = 2;
int colunas = 4;

// multi dimensional
int arrayCMdPreAlocada[linhas][colunas];
int arrayCMdPrePopulada[linhas][colunas] = {
	{0, 1, 2, 3},
	{4, 5, 6, 7}
};
int arrayCMdPrePopulada2[linhas][colunas] = {0, 1, 2, 3, 4, 5, 6, 7};

for (NSString* valor in prePopulada) {
	//
}</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>var vazia = [Int]()
var vazia2:[Int] = []
var vazia3:Array&lt;Int&gt; = Array&lt;Int&gt;()

// uma dimensão
var preAlocada = [Int](count: 10, repeatedValue: 0)
preAlocada = [Int](count: 17, repeatedValue: 0)
var prePopulada = ["p", "r", "e"]
var prePopuladaT:[String] = ["p", "o", "p"]

let linhas = 2
let colunas = 4

// multi dimensional
var mdPrePopulada:[[Int]] = [
	[0, 1, 2, 3],
	[4, 5, 6, 7]
]










preAlocada[5] = 16000;
preAlocada[6...8] = [4, 20, 8];
let indice0 = prePopulada[0];
let two = mdPrePopulada[0, 2];

for valor in prePopulada {
	//
}

for (indice, valor) in prePopulada.enumerated() {
	// indice e valor
}

let tamanho = mdPrePopulada.count

// também temos a propriedade .empty
// e os métodos insert e removeAtIndex

// TODO testar coisas não cobertas na documentação
// comparar arrays</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>



// uma dimensão
var preAlocada = IntArray(10)
preAlocada = IntArray(17)



val linhas = 2
val colunas = 4

// multi dimensional
var mdPreAlocada = Array(linhas, { IntArray(colunas) })

// TODO</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>



// uma dimensão
int[] preAlocada = new int[10];
preAlocada = new int[17];
String[] prePopulada = {"p", "r", "e"};


int linhas = 2;
int colunas = 4;

// multi dimensional
byte[][] mdPreAlocada = new byte[linhas][colunas];
byte[][] mdPrePopulada = {
	{0, 1, 2, 3},
	{4, 5, 6, 7}
};









preAlocada[5] = 16000;

String indice0 = prePopulada[0];
byte two = mdPrePopulada[0][2];

for (String valor : prePopulada) {
	//
}





int tamanho = mdPrePopulada.length;

// TODO comparar arrays

// pode mas não faça
// acho que tem pra quem vem do C
float podeMasNaoFaca[];
float[][] podeMasNaoFaca = {{}};
float[] podeMasNaoFaca[] = {{}};
float podeMasNaoFaca[][] = {{}};</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>



// uma dimensão
int[] preAlocada = new int[10];
preAlocada = new int[17];
String[] prePopulada = {"p", "r", "e"};


int linhas = 2;
int colunas = 4;

// multi dimensional
byte[,] mdPreAlocada = new byte[linhas, colunas];
byte[,] mdPrePopulada = {
	{0, 1, 2, 3},
	{4, 5, 6, 7}
};

byte[][] arrayDeArraysPreAlocada = new byte[4][];
arrayDeArraysPreAlocada[0] = new byte[4];
// ...
byte[][] arrayDeArraysPrePopulada = {
	new byte[] {0, 1, 2, 3},
	new byte[] {4, 5, 6, 7}
};

preAlocada[5] = 16000;

String indice0 = prePopulada[0];
byte two = mdPrePopulada[0, 2];

foreach (var valor in prePopulada) {
	//
}





var tamanho = mdPrePopulada.Length

// TODO exemplos com var
// comparar arrays</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>let vazia = [];



// uma dimensão
let preAlocada = new Array(10);
preAlocada = new Array(17);
let prePopulada = ["p", "r", "e"];


let linha = 0;
let coluna = 2;

// multi dimensional
let mdPrePopulada = [
	[0, 1, 2, 3],
	[4, 5, 6, 7]
];










preAlocada[5] = 16000;

let indice0 = prePopulada[0];
let two = mdPrePopulada[linha][coluna];

for (let valor of prePopulada) {
	//
}





let tamanho = mdPrePopulada.length;
// TODO comparar arrays</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Dim vazia() As Integer
Dim preAlocada(9) As Integer

' Aloca espaço na array vazia
' É possível usar variáveis ao invés de literais fixas
ReDim Preserve vazia(0 To 9)






















preAlocada(5) = 1600


Dim valor As Integer

For Each valor In prePopulada
	'
Next</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tiposlista'>Listas</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
let mut lista:Vec&lt;i32&gt; = vec![];
lista.push(1);</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>var lista []int // em go se chamam slices
listaPreAlocada := make([]int, 1)
// slices são imutáveis, assim como strings
lista = append(lista, 1)
listaPreAlocada = append(listaPreAlocada, 1)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
std::vector<span>&lt;<span>int</span>&gt;</span> lista;
lista.push_back(1);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
NSMutableArray* lista;</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
var lista = [Int]() // arrays são "listas"
lista.append(1)</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// temos List (listOf) e MutableList (mutableListOf)
var lista = mutableListOf&lt;int&gt;()
lista.add(1)</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// List é uma interface com ArrayList e LinkedList
List&lt;Integer&gt; lista = new ArrayList&lt;Integer&gt;();
lista.add(1);</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
List&lt;int&gt; lista;
lista.Add(1);</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
let lista = []; // arrays são "listas"
lista.push(1);</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Dim lista As Collection
Set lista = New Collection
lista.Add 1</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='stackheap'>Stack e Heap</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO
// &amp;'static str statically allocated lives inside the program binary code
// stack by default
// heap
// String
// Box&lt;T&gt;
// Vec&lt;T&gt;
// growable on heap
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
></code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// TODO
// tipos na stack por padrão

// tipos com new na heap

// enums?
// closures?
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// TODO
// structs na stack?
// e classes?
// enums?
// closures? tem closures?
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// TODO
// primitive on stack
// structs e enums value types - stack
// classes and closures on the heap
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipos primitivos na stack
int i = 10;

// tipos de referência na heap
String s = "Na heap"; // TODO verificar string heap
Object o = new Object();
// enums tb?</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tipos valor na stack

// tipos primitivos na stack
int i = 10;

// enums na stack

// structs às vezes na stack
AStruct a;
Point p;

unsafe {
	byte* ponteiroDeArray = stackalloc byte[1024];
}

// nullables na stack

// tipos de referência na heap

// class, interface, array e delegate
string a = "Na heap"; // TODO verificar string heap
object o = new object();</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// Não existe uma definição
// na especificação
// A máquina virtual pode ou não
// alocar tipos primitivos
// e tipos de referência
// tanto na stack quanto na heap
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>C++ / Rust</li>
	<li>Objective-C / Swift / C#</li>
	<li>Java</li>
	<li>JavaScript</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='memoria'>Gerenciamento de memória</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust - Ownership e Lifetimes</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go - Mark and Sweep GC</p>
<code class='go'
></code
>
</div>

<div class='codeblock'>
<p>C++ - RAII</p>
<code class='cpp'
>// smart pointers
</code
>
</div>

<div class='codeblock'>
<p>Objective-C - Reference Counting</p>
<code class='objectivec'
>// ARC
</code
>
</div>

<div class='codeblock'>
<p>Swift - Reference Counting</p>
<code class='swift'
>// ARC
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java - Mark and Sweep GC</p>
<code class='java'
>// weak e ghost references
</code
>
</div>

<div class='codeblock'>
<p>C# - Mark and Sweep GC</p>
<code class='cs'
>// weak references
</code
>
</div>

<div class='codeblock'>
<p>JavaScript - Mark and Sweep GC</p>
<code class='javascript'
>// weak maps
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='ponteiros'>Apontar é feio <span>Já dizia sua mãe</span></h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO
let p:*const i32 = ptr::null();
let p:*mut i32 = ptr::null();

let x = 5;
let raw = &amp;x as *const i32;

let mut y = 10;
let raw_mut = &amp;mut y as *mut i32;

let points_at = unsafe { *raw };

unsafe {
	let points_at = *raw;
}

use std::mem;

unsafe {
	let a = [0u8, 0u8, 0u8, 0u8];
	let b = mem::transmute::&lt;[u8; 4], u32&gt;(a);
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
></code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// variável tipo ponteiro
// ponteiros são nullable e podemos usar
// o valor especial nullptr, que representa
// um endereço de memória inválido
int* newNull{nullptr}; // C++11

// versões antigas usam o valor NULL, que é 0
// por baixo dos panos, também representando
// um endereço de memória inválido
int* oldNull{NULL}; // old

// existe ainda um tipo nullptr_t, que só pode
// receber nullptr e não aceita nenhum outro valor
// não imagino muitos usos para ele fora fazer
// piadinhas com o Elvis ;)
std::nullptr_t o_onlyNuuull{nullptr}; // C++11

// variáveis comuns tipo int
int intOriginal{90};
int segundoIntOriginal{95};

// variável tipo ponteiro de int (int*) aponta
// para variável comum tipo int
// seu valor é um inteiro 32 ou 64 bits, representando
// o endereço de memória de intOriginal, que podemos
// obter usando o operador &amp;
int* ponteiroDeInt{&amp;intOriginal};

// para acessarmos o valor da variável através
// do ponteiro, usamos o operador *
cout &lt;&lt; "valor de int " &lt;&lt; *ponteiroDeInt &lt;&lt; endl; // 90

// se fizermos ele apontar para outra variável, seu valor muda
ponteiroDeInt = &amp;segundoIntOriginal;
cout &lt;&lt; "valor de int " &lt;&lt; *ponteiroDeInt &lt;&lt; endl; // 95

// também podemos pegar endereços de memória através de outros
// ponteiros, pois como disse acima, seus valores são numéricos
// 32 ou 64 bits
int* ponteiroDeSegundoInt{ponteiroDeInt};
cout &lt;&lt; "valor de int " &lt;&lt; *ponteiroDeSegundoInt); // 95

// TODO
// podemos atribuir enderecos aleatórios de memória para ponteiros :(

// podemos marcar o ponteiro como const, mas isso
// NÃO PREVINE QUE ELE APONTE PARA VARIÁVEIS DIFERENTES!!!
// TODO verificar se previne a modificação dos objetos apontados
const int* ponteiroConst{&amp;intOriginal}; // 90
ponteiroConst = &amp;segundoIntOriginal; // 95

// depois que não precisarmos mais dos ponteiros
// precisamos APAGÁ-LOS ANTES QUE SAIAM DE ESCOPO,
// para evitar que fiquem perdidos na memória
// sem podermos acessá-los (dangling pointers)
// devemos fazer isso apenas para ponteiros null
// ou ponteiros de objetos alocados na heap
// através do operador new
delete newNull;
delete oldNull;

// o gerenciamento manual dos ponteiros com delete
// não é recomendado, e existem classes que os apagam
// automaticamente e de maneira determinística assim
// que saem de escopo
auto ponteiroSmart{std::make_unique<span>&lt;<span>int</span>&gt;</span>(1000)};
auto ponteiroSmartShared{std::make_shared<span>&lt;<span>int</span>&gt;</span>(1001)};

// TODO old boost smart pointers

// embora isso não seja necessário para ponteiros int*
// existe uma outra característica dessas classes, que
// é não permitir o valor nullptr, uma vez que seu tipo
// é especificado
auto semNullPointer{std::make_unique<span>&lt;<span>int</span>&gt;</span>(nullptr)}; // erro :)

// embora NULL seja um valor váido para int*, uma vez que
// NULL na verdade é 0 por baixo dos panos
auto semNullPointer{std::make_unique<span>&lt;<span>int</span>&gt;</span>(NULL)}; // funciona!

// além disso, não é possível mudar o endereço para o qual
// esse tipo de ponteiro aponta uma segunda vez
auto semSegundaChance{std::make_unique<span>&lt;<span>int</span>&gt;</span>(1000)};
// semSegundaChance = &amp;intOriginal; // erro
// semSegundaChance = ponteiroDeInt; // erro

// TODO referências
// referências não são ponteiros oficialmente segundo
// a especificação

// não podem ser nullptr nem NULL
int&amp; ponteiroRefNullPointer{nullptr}; // erro :)
int&amp; ponteiroRefNULL{NULL}; // erro :)

int&amp; ponteiroRef{intOriginal}; // 90
ponteiroRef = segundoIntOriginal; // 95

const int&amp; ponteiroConstRef{intOriginal}; // 90
ponteiroConstRef = segundoIntOriginal; // erro, não é mutável :)

// não pode pegar o endereço de referências

// ponteiros para arrays
// ponteiros para funções
// void*
// ponteiros de ponteiros
// referências de ponteiros</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// variável tipo ponteiro
// ponteiros são nilable e podemos usar
// o valor nil, que representa
// um endereço de memória inválido
int* nilPointer = nil; // Objective-C

// é possível usar do C o valor NULL, que é 0
// por baixo dos panos, também representando
// um endereço de memória inválido
int* cNullPointer = NULL; // C</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>var nilPointer:UnsafeMutablePointer&lt;int&gt; = nil

// variáveis comuns tipo int
let intOriginal = 90
let segundoIntOriginal = 95

// int* ponteiroDeInt = &amp;intOriginal;
var ponteiroDeInt:UnsafeMutablePointer&lt;Int&gt; = &amp;intOriginal

print(ponteiroDeInt) // 90

ponteiroDeInt = &amp;segundoIntOriginal
print(ponteiroDeInt) // 95

let ponteiroDeSegundoInt = ponteiroDeInt
print(ponteiroDeSegundoInt) // 95

// const int* ponteiroDeInt = &amp;intOriginal;
var ponteiroConst:UnsafePointer&lt;Int&gt; = &amp;intOriginal
ponteiroConst = &amp;segundoIntOriginal

// mais ou menos const int&amp; ponteiroConstRef; ??
let ponteiroConstRef:UnsafePointer&lt;Int&gt; = &amp;intOriginal

// TODO
// podemos atribuir endereços aleatórios de memória para ponteiros ??

// ponteiro de array

// ponteiros para funções?

// void* ponteiroGenerico;
var ponteiroGenerico:UnsafePointer&lt;Void&gt;

// int** ponteiroDePonteiro;
let ponteiroDePonteiro = AutoreleasingUnsafeMutablePointer&lt;Int?&gt; // tem que ser nullable?</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// possui uma classe CPointer
// para interop com C apenas</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>using System;

namespace MarcoLuglio.PonteirosExample {

	class MainClass {

		public static void Main(string[] args) {

			// C# requer um contexto unsafe para utilização de ponteiros
			// Existem vários contexto que podem ser marcados como unsafe,
			// mas vou mostrar apenas o bloco de código unsafe
			unsafe {

				// TODO não pode null pointer

				// variáveis comuns tipo int
				int intOriginal = 90;
				int segundoIntOriginal = 95;

				// variável tipo ponteiro de int (int*)
				// aponta para variável comum tipo int
				// seu valor é um inteiro 64 bits (long), representando
				// o endereço de memória de intOriginal, que podemos obter
				// usando o operador &amp;
				int* ponteiroDeInt = &amp;intOriginal;

				// para acessarmos o valor da variável comum
				// através do ponteiro, usamos o operador *
				Console.WriteLine(@"valor de int {0} ", *ponteiroDeInt); // 90

				// se fizermos ele apontar para outra variável, seu valor muda
				ponteiroDeInt = &amp;segundoIntOriginal;
				Console.WriteLine(@"valor de int {0} ", *ponteiroDeInt); // 95

				// também podemos pegar endereços de memória através de outros
				// ponteiros, pois como disse acima, seus valores são números
				// tipo long
				int* ponteiroDeSegundoInt = ponteiroDeInt;
				Console.WriteLine(@"valor de int {0} ", *ponteiroDeSegundoInt); // 95

				// não é possível iniciar um ponteiro especificando diretamente
				// um endereço de memória
				int* enderecoQualquer = 10; // erro TODO verificar qual o erro

				// variável tipo ponteiro de buffer de bytes (bytes*)
				// aponta para array de bytes pré-alocada na stack
				// seu valor é igual ao endereço de memória da array de bytes
				byte* ponteiroDeArray = stackalloc byte[1024];

				// atribuímos o valor 5 para o índice 0 da array na stack
				// e o valor 11 para o índice 729
				// para acessarmos os índices, usamos o operador []
				ponteiroDeArray[0] = 5;
				ponteiroDeArray[729] = 11;

				// para acessarmos os valores nos índices, usamos o operador []
				byte indice0 = ponteiroDeArray[0];
				byte indice729 = ponteiroDeArray[729];
				Console.WriteLine(
					@"valores {0} e {1}",
					indice0, // 0
					indice729 // 1
				);

				// Notem que não há nada no ponteiro que indique se tratar de uma array!
				// Então como o compilador consegue diferenciar entre um ponteiro
				// para um byte comum e para uma array de bytes?
				// Ele não consegue! E dependendo do que você for fazer, nem vai lançar
				// uma exceção, apenas usar um valor incorreto.
				// Portanto cuidado ao utilizar ponteiros.
				// Por exemplo, seria válido (embora não recomendado) fazer isso:

				// byte byteOriginal = 37;
				// ponteiroDeArray = &amp;byteOriginal;

				// variável tipo ponteiro desconhecido
				// aponta para qualquer tipo de variável
				// quando null, seu valor é igual a 0, representando um endereço
				// de memória inválido
				// neste estado, *ponteiroGenerico lança NullReferenceException
				void* ponteiroGenerico = null;

				// esse tipo de ponteiro não é recomendado pois perde
				// a informação sobre o tipo para o qual ele aponta
				// essa característica é usada para fazer casts forçados
				// neste estado, seu valor é igual ao endereço de memória de intOriginal
				ponteiroGenerico = &amp;intOriginal;

				// para acessarmos o valor apontado por esse tipo de ponteiro
				// é necessário fazer um cast para o tipo que se deseja
				Console.WriteLine(@"valor de void {0} ", (*(int*)ponteiroGenerico)); // 90

				// agora seu valor é igual ao endereço de memória da array de bytes
				ponteiroGenerico = ponteiroDeArray;

				// podemos acessar os valores da array apontada pelo ponteiro
				// fazendo o cast apropriado
				// a mesma recomendação sobre o operador [] vale aqui, o compilador
				// não consegue identificar se o valor é uma array ou um byte simples
				// e vai acreditar no que você pedir
				Console.WriteLine(@"valor de void*[0] {0} ", ((byte*)ponteiroGenerico)[0]); // 5

				// variável tipo ponteiro de ponteiro de int (int**)
				// aponta para variável do tipo ponteiro de int
				// seu valor é igual ao endereço de memória de ponteiroGenerico
				// esse tipo de ponteiro é utilizado quando não desejamos copiar o
				// ponteiro original ao passá-lo para outras funções
				// uma vez que, como o ponteiro é um valor long, é passado por cópia
				// para as funções!
				int** ponteiroDePonteiro = (int**)&amp;ponteiroGenerico;

				// para acessarmos o valor no final da cadeia, usamos o operador * duas vezes
				Console.WriteLine(@"valor de ponteiro {0} ", **ponteiroDePonteiro);

				// se usarmos apenas uma vez, obteremos o ponteiro intermediário
				Console.WriteLine(
					@"endereço apontado pelo ponteiro intermediário {0} ",
					*ponteiroDePonteiro
				);

				// novamente, o compilador não pode ajudar muito caso você cometa um erro
				// por exemplo, se esquecermos do operador &amp; estaremos pegando o endereço
				// do valor final, ao invés do endereco do ponteiro intermediário, porém,
				// estamos dizendo ao compilador que é o endereço de um ponteiro legítimo
				ponteiroDePonteiro = (int**)ponteiroGenerico;

				// e só será lançado um erro se tentarmos acessar o valor final na cadeia
				// pois estaremos tentando usar um valor inteiro como se fosse um ponteiro
				Console.WriteLine(@"lança NullReferenceException {0} ", **ponteiroDePonteiro);

				// embora possamos criar ponteiros de ponteiros de ponteiros, acho que não
				// há uma aplicação muito prática pra isso
				int*** ponteiroDesnecessario;

				// TODO structs e fixed {}

			}

			// os ponteiros são desalocados após o término do contexto unsafe
			// não é necessário deletar os ponteiros manualmente

		}

	}

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>Swift</li>
	<li>C++ / C#</li>
	<li>Objective-C</li>
	<li>TODO classificar rust quando tiver um exemplo mais completo</li>
</ol>

<p>Não sei ao certo como avaliar esse tópico. Certamente não é a mesma coisa que gerenciamento de memória avaliado logo acima.
<br />Todas as linguagens permitem <code class='cpp'>void*</code> de alguma maneira
<br />Swift possui nomes mais claros em relação ao que cada ponteiro significa, embora a relação com suas versões em C não sejam fáceis de adivinhar. Não é necessário utilizar operadores diferentes para interagir com ponteiros.
<br />C# tenta evitar ao máximo o uso de ponteiros para tarefas corriqueiras. Mas faz muito pouco em relação à C++ para impedir problemas com a utilização de ponteiros quando são necessários, e acaba sendo equivalente em segurança, embora de maneira diferente. As duas linguagens possuem recursos para impedir ponteiros <code class='cs'>null</code>, e para apagar os ponteiros quando saírem de escopo. C# delimita claramente um bloco isolado para trabalhar com ponteiros, mas não permite marcá-los como <code class='cs'>const</code>. C++ ainda tem o operador <code class='cpp'>delete</code>, mas você não precisa usá-lo.
<br />Objective-C usa ponteiros estilo C. Requer muitas vezes que os objetos sejam alocados e depois inicializados num passo diferente. Como muitas coisas nessa linguagem, mistura sintaxes das duas linguagens. Por exemplo, <em>ivars</em> e <em>properties</em>.</p>

</section>



<section>

<h2 id='typealias'>Type Aliasing</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// tipo simples
type Name = String;


// tipo função
// TODO testar
// type StrategyFunctionPointer = fn(i32) -&gt; i32;</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// tipo simples
type T1 = T2

// novo tipo baseado em T2
type T1 T2

// tipo função
type StrategyFunctionPointer func(int) int</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// tipo simples
using size_t = unsigned int;
typedef unsigned char BYTE; // old

// tipo função
using StrategyFunctionPointer = void(*)();

// ou
using StrategyFunction_t = void();
StrategyFunction_t* strategyFunctionPointer = f;

// ou
#include &lt;type_traits&gt;
using StrategyFunctionPointer = std::add_pointer&lt;void()&gt;::type;

// ou (old)
typedef void(*StrategyFunctionPointer)();

// só metodos ou funções tb?</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// tipo simples
@compatibility_alias UICollectionViewController PSTCollectionViewController;
typedef unsigned char BYTE;

// tipo função
typedef void(*StrategyFunctionPointer)();</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// tipo simples
typealias AudioSample = UInt16


// tipo função
typealias StrategyFunctionPointer = () -&gt; ()</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>



// tipo função
typealias StrategySignature = //</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tipo simples
using R = N1.N2;


// tipo função
delegate void StrategyFunctionDelegate();</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>


<section>

<h2 id='lacos'>Branching / Laços</h2>

<h3 id='if'>If, else if e else</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>



Dim number As Integer: number = 10

If Number &gt; 0 Then
	' positivo
ElseIf Number &lt; 0 Then
	' negativo
Else
	' zero
End If


























' logical operators


Dim condition1 As Boolean
Dim condition2 As Boolean






	' short circuit
	If condition1 And condition2 Then
		'





	' short circuit
	If condition1 Or condition2 Then
		'

	If condition1 Xor condition2 Then
		'

	If condition1 &lt;&gt; condition2 Then
		'

	If condition1 = False Then
		'

	If Not condition1 Then
		'</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
>declare
	number:Integer;
begin

	number := 10;

	if number &gt; 0 then
		-- positivo
	elsif number &lt; 0 then
		-- negativo
	else
		-- zero
	end if;

end;
























-- logical operators

declare
	condition1:Bool;
	condition2:Bool;
begin

	-- evaluates both conditions!
	if condition1 and condition2 then
		--

	-- short circuit
	if condition1 and then condition2 then
		--

	-- evaluates both conditions!
	if condition1 or condition2 then
		--

	-- short circuit
	if condition1 or else condition2 then
		--

	if condition1 xor condition2 then
		--

	if condition1 /= condition2 then
		--

	if condition1 = False then
		--

	if not condition1 then
		--

end;</code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
>var
	number:Integer;
begin

	number := 10;

	if number &gt; 0 then
		// positivo
	else if number &lt; 0 then
		// negativo
	else
		// zero


end;

// ou

var
	number:Integer;
begin

	number := 10;

	if number &gt; 0 then // positivo
		begin
			// multiline
		end;
	else if number &lt; 0 then // negativo
		begin
			// multiline
		end;
	else // zero
		begin
			// multiline
		end;

end;

// logical operators

var
	condition1:Bool;
	condition2:Bool;
begin





	// short circuit
	if condition1 and condition2 then
		//





	// short circuit
	if condition1 or condition2 then
		//

	if condition1 xor condition2 then
		//

	if condition1 &lt;&gt; condition2 then
		//

	if condition1 = false then
		//

	if not condition1 then
		//

end;</code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
>



number = 0

if number &gt; 0
	# positivo
elsif number &lt; 0
	# negativo
else
	# zero
end





























condition1 = true
condition2 = false


# short circuit
if condition1 &amp;&amp; condition2
	#...

# same as &amp;&amp; but with lower precedence
if condition1 and condition2
	#...

# short circuit
if condition1 || condition2
	#...

# same as || but with lower precedence
if condition1 or condition2
	#...

if condition1 ^ condition2
	#...

if condition1 != condition2
	#...

if condition1 == false
	#...

if !condition1
	#...

# same as ! but with lower precedence
if not condition1
	#...</code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript) - main.wasm</p>
<code class='webassembly'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<h3 id='while'>while e do while</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript) - main.wasm</p>
<code class='webassembly'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<h3 id='foreach'>for each</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>for item in collection {
	println!("{}", item);
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>slice := []int{2, 3, 4}

for i, numero := range slice {
	// os valores dentro de for each
	// são cópias e não referências
}

dicionario := map[string]string{ "a": "apple", "b": "banana" }

for chave, valor := range dicionario {
	// ordem não é garantida para maps
}

texto := "um texto"

for i, letra := range texto {
	//
}

canal := make(chan int)

go func() {
	canal &lt;- 1
	canal &lt;- 2
	canal &lt;- 3
	close(canal)
}()

for numero := range canal {
	// se o canal for fechado
	// for each bloqueia!?
}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>for (const auto &amp;item : collection) { // C++ 11+
	cout &gt;&gt; item;
}

// functor com contrutor implícito
struct Functor {
	void operator()(const Item&amp; item) {
		cout &gt;&gt; item;
	}
};
Functor functor();
std::for_each(collection.begin(), collection.end(), functor);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>for(id item in collection) {
	NSLog(item);
} </code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>for item in collection {
	print(item)
}

let numberOfLegs = ["spider": 8, "ant": 6, "cat": 4]
for (animalName, legCount) in numberOfLegs {
	print("\(animalName)s have \(legCount) legs")
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>for (item in collection) {
	print(item)
}</code
></div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>for (Object item : collection) {
	System.out.println(item);
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>foreach (object item in collection) {
	System.Console.WriteLine(item);
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>for (item of collection) {
	console.log(item);
}

for (item in collection) {
	if (collection.hasOwnProperty(item)) {
		console.log(item);
	}
}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>collection =

for n in collection:
	#</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>For Each item In collection
	Print item
Next</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<h3 id='foreachrange'>for each + ranges</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>for index in 0..5 {
	println!("{}", x); // x: i32
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// usar range + uma coleção
// não possui um operador ..</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// c++ 20+</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>for index in 0...4 {
	print("\(index) times 5 is \(index * 5)")
}

let minutes = 30
for tickMark in 0..&lt;minutes {
	// render the tick mark each minute (30 times)
}

// range exclusivo - to
let minuteInterval = 5
for tickMark in stride(from: 0, to: minutes, by: minuteInterval) {
	// render the tick mark every 5 minutes (0, 5, 10 ... 25)
}

// range inclusivo - through
let minuteInterval = 5
for tickMark in stride(from: 0, through: minutes, by: minuteInterval) {
	// render the tick mark every 5 minutes (0, 5, 10 ... 30)
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>for (i in 0..4) {
	print(i)
}</code
></div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>for n in range(0, 4, 1):
	#</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<h3 id='for'>For</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript) - main.wasm</p>
<code class='webassembly'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<h3 id='labelgotoswitch'>label, goto, continue, break e switch / case / when</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// label e break / continue

'loop1: for i in 0...3 {

	'loop2: for j in 0...3 {
		if (i == 1 &amp;&amp; j == 1) {
			continue 'loop1; // pode usar break tb
		}
		println!(
			"i = {0}, j = {1}",
			i, // 0
			j // 1
		)
	}
}



// switch e match
match x {
	1 | 2 =&gt; println!("one or two"),
	3...5 =&gt; println!("between three and five"),
	6 =&gt; println!("six"),
	// default é opcional, mas se ausente
	// os demais cases devem ser exaustivos
	_ =&gt; println!("something else"),
}

// ver <a href='https://doc.rust-lang.org/1.1.0/book/patterns.html'>destructuring</a></code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>Outer:
for i := 0; i &lt; 3; i++ {
	for j := 0; j &lt; 3; j++ {
		//
		continue Outer
	}
}

switch 1 {
	case 1:
		fmt.Println(1)
		fallthrough
	case 2:
		fmt.Println(2)
}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// TODO testar isso
// label e goto
for (int a = 0; a &lt; 10; ++a) {
	for (int y = 0; y &lt; 10; ++y) { // Run until condition.
		for (int x = 0; x &lt; 10; ++x) { // Run until condition.
			if (x == 5 &amp;&amp; y == 5) {
				goto Outer;
			}
		}
		++dummy;
	}
Outer:
	continue;
}
return dummy;

switch(color) {
case GREEN:
case RED:
case BLUE:
	Paint();
	break;
case YELLOW:
	if(AlsoHasCriteriaX) {
		Paint();
		break; /* notice break here */
	}
	goto explicit_label;

case FUCHSIA:
	PokeEyesOut();
	break;

default:
explicit_label:
	Print("Ugly color, no paint.")
	break;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
></code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// label e break / continue
loop1:
for i in 0..&lt;3 {
	loop2:
	for j in 0..&lt;3 {
		if (i == 1 &amp;&amp; j == 1) {
			continue loop1; // pode usar break tb
		}
		print("i = \(i), j = \(j)")
	}
}

// testar isso
/*label: {
	// do stuff
	if check break label
	// do more stuff
}*/

// switch e fallthrough
switch a {
	case "a":
		// tem que ser indicado explicitamente
		// com a palavra fallthrough
		fallthrough
	case "A":
		//

	default:
		//
}

// switch e match
switch a {

	case "a", "A":
		print("The letter A")
		// break é implícito
		// mas ainda pode ser usado
		// no meio de um bloco por exemplo

	// default é opcional, mas se ausente
	// os demais cases devem ser exaustivos
	default:
		print("Not the letter A")

}

switch approximateCount {
	case 0:
		naturalCount = "no"
	case 1..&lt;5:
		naturalCount = "a few"
	default:
		naturalCount = "many"
}

switch somePoint {
	case (0, 0):
		print("\(somePoint) is at the origin")
	case (_, 0):
		print("\(somePoint) is on the x-axis")
	case (0, _):
		print("\(somePoint) is on the y-axis")
	case (-2...2, -2...2):
		print("\(somePoint) is inside the box")
	default:
		print("\(somePoint) is outside of the box")
}

let anotherPoint = (2, 0)
switch anotherPoint {
	case (let x, 0):
		print("on the x-axis with an x value of \(x)")
	case (0, let y):
		print("on the y-axis with a y value of \(y)")
	case let (x, y):
		print("somewhere else at (\(x), \(y))")
}

switch yetAnotherPoint {
	case let (x, y) where x == y:
		print("(\(x), \(y)) is on the line x == y")
	case let (x, y) where x == -y:
		print("(\(x), \(y)) is on the line x == -y")
	case let (x, y):
		print("(\(x), \(y)) is just some arbitrary point")
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// label e break / continue
loop1@
for (i in 0 until 3) {
	loop2@
	for (j in 0 until 3) {
		if (i == 1 &amp;&amp; j == 1) {
			continue@loop1 // pode usar break@ tb
		}
		println("i = $i, j = $j")
	}
}

// testar isso
/*label: {
	// do stuff
	if (check) break label
	// do more stuff
}*/

// switch e match (em kotlin se chama when)
when (x) {
	0, 1 -&gt; print("x == 0 or x == 1")
	else -&gt; print("otherwise")
}

when (x) {
	in 1..10 -&gt; print("x is in the range")
	in validNumbers -&gt; print("x is valid")
	!in 10..20 -&gt; print("x is outside the range")
	else -&gt; print("none of the above")
}</code
></div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// label e break / continue
loop1:
for (...) {
	loop2:
	for (...) {
		continue loop1; // pode usar break tb
	}
}




label: {
	// do stuff
	if (check) break label;
	// do more stuff
}

// switch e "match" - java 12+
switch (day) {
	case MONDAY, FRIDAY, SUNDAY -&gt; System.out.println(6);
	case TUESDAY                -&gt; System.out.println(7);
	case THURSDAY, SATURDAY     -&gt; System.out.println(8);
	case WEDNESDAY              -&gt; System.out.println(9);
}

// switch expressions - java 14+
var title = switch (person) {
	case Dali, Picasso      -&gt; "painter";
	case Mozart, Prokofiev  -&gt; "composer";
	case Goethe, Dostoevsky -&gt; "writer";
};</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// label e goto
for (int a = 0; a &lt; 10; a++) {
	for (int y = 0; y &lt; 10; y++) { // Run until condition.
		for (int x = 0; x &lt; 10; x++) { // Run until condition.
			if (x == 5 &amp;&amp; y == 5) {
				goto Outer;
			}
		}
		dummy++;
	}
Outer:
	continue;
}
return dummy;

// switch e goto
switch (id) {
	case 1000:
		price += 10;
		goto case 100;
	case 100:
		return price * 10;
	default:
		return price;
}

// switch fallthrough
switch (id) {
	case "ab":
	case "cd":
	case "ef":
		// não pode haver nenhum código entre os "case"
		break;
	case "gh":
		break;
	default: // default é opcional
		break;
}

// switch e "match" - requer C# 7+
switch(shape) {
	case Circle c:
		WriteLine($"circle with radius {c.Radius}");
		break;
	case Rectangle s when (s.Length == s.Height):
		WriteLine($"{s.Length} x {s.Height} square");
		break;
	case Rectangle r:
		WriteLine($"{r.Length} x {r.Height} rectangle");
		break;
	default:
		WriteLine("unknown shape");
		break;
	case null:
		throw new ArgumentNullException(nameof(shape));
}

// switch expressions - requer C# 8+
var switchValue = id switch
{
	"ab" =&gt; 1,
	"cd" =&gt; 2,
	_ =&gt; 0
};</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// label e break / continue
loop1:
for (i = 0; i &lt; 3; i++) {
	loop2:
	for (j = 0; j &lt; 3; j++) {
		if (i === 1 &amp;&amp; j === 1) {
			continue loop1; // pode usar break tb
		}
		console.log(`i = ${i}, j = ${j}`);
	}
}

label: {
	// do stuff
	if (check) break label;
	// do more stuff
}









// switch fallthrough
switch (id) {
	case "ab":
	case "cd":
		// algum código aqui
	case "ef":
		// não pode haver nenhum código entre os "case"
		break;
	case "gh":
		break;
	default: // default é opcional
		break;
}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>'label e goto, resume e next
On Error GoTo Erro

	' Faça alguma coisa e saia da função
	' antes de chegar nas linhas de tratamento de erro
	Exit Sub

' Label de erro
' Labels não podem conter espaços em branco antes dos nomes
Erro:
	' Faça alguma coisa e saia da função
	Exit Sub

	' Ou continue a execução normalmente
	Resume Next

	' Ou passe para um tratamento específico
	If Err.Number = 13 Then
		Resume ErroEspecifico

ErroEspecifico:
	Exit Sub




'switch ("select")
Select Case age
	Case 50
		ageBlock = "the big five-oh"
	Case 80, 81, 82, 83, 84, 85, 86, 87, 88, 89
		ageBlock = "octogenarian"
	Case 90 To 99
		ageBlock = "nonagenarian"
	Case Is >= 100
		ageBlock = "centenarian"
	Case Else
		ageBlock = "just old"
End Select</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

</section>



<section>

<h2 id='funcoes'>Funções</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// declaração de função
fn normal() { /**/ } // mesmo que -&gt; ()
fn normalUnit() -&gt; () { /**/ }


// expressão de função
let expressao = normal;

fn retorno() -&gt; &amp;'static str {
	"retorno" // sem ; no final
}

fn retorno() -&gt; &amp;'static str {
	return "retorno";
}


use std::any::Any;

fn retorno_misturado(numero:i32) -&gt; Option&lt;Box&lt;dyn Any&gt;&gt; {
	if numero &gt; 0 {
		return Some(Box::new("string"))
	}
	Some(Box::new(25))
}




fn superior&lt;F&gt;(funcao:F) where F:fn() {
	funcao();
}

fn superior&lt;F&gt;(funcao:F) -&gt; &amp;'static str where F:fn() {
	funcao();
}

// TODO fazer superior com type aliasing

superior(normal);
superior(normalUnit);
superior(retorno);</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// declaração de função
func normal() { /**/ }


// expressão de função
var expressaoInline = func() { /**/ }
var expressao = normal

func retorno() string { return "retorno" }
func retornoMultiplo() (string, string) {
	return "retorno", "multiplo"
}

func retornoMisturado(numero int) interface{} {
	if numero > 0 {
		return "texto"
	}
	return 25
}

func retornoNomeado() (nome string) {
	nome = "Zé" // declarado pelo nome do retorno
	return nome
}

func superior(funcao func()) {
	funcao()
}

func superiorRetorno(funcao func() string) {
	funcao()
}

superior(normal)
superiorRetorno(retorno)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// declaração de função
void normal() { /**/ }



// expressão de função
auto expressao = normal;

std::string retorno() {
	return "retorno";
}

void superior(void(*funcao)()) {
	funcao();
}

void superior(std::string(*funcao)()) {
	funcao();
}

// ou

using Function_t = void();

void superior(Function_t* funcao) {
	funcao();
}

using Function2_t = std::string();

void superior(Function2_t* funcao) {
	funcao();
}

// ou

using FunctionPointer = void(*)();

void superior(FunctionPointer funcao) {
	funcao();
}

using FunctionPointer2 = std::string(*)();

void superior(FunctionPointer2 funcao) {
	funcao();
}

// ou

#include &lt;type_traits&gt;

using FunctionPointer = std::add_pointer&lt;void()&gt;::type;

void superior(FunctionPointer funcao) {
	funcao();
}

using FunctionPointer2 = std::add_pointer&lt;std::string()&gt;::type;

void superior(FunctionPointer2 funcao) {
	funcao();
}

superior(&amp;normal);
superior(&amp;retorno);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// declaração de função
void normal() { /**/ }

// TODO
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// declaração de função
func normal() { /**/ } // mesmo que -&gt; Void ou -&gt; ()
func normalVoid() -&gt; Void { /**/ }
func normalEmptyTuple() -&gt; () { /**/ }

// expressão de função
let expressao = normal;

func retorno() -&gt; String {
	return "retorno"
}








func retornoMisturado(numero:Int) -&gt; Any {
	if numero &gt; 0 {
		return "texto";
	}
	return 25;
}

func superior(funcao:() -&gt; Void) {
	funcao()
}

func superior(funcao:() -&gt; String) {
	funcao()
}

// TODO fazer superior com type aliasing
// TODO explicar nomes de parâmetros

superior(normal)
superior(normalVoid)
superior(normalEmptyTuple)
superior(retorno)</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>fun runTransformation(f: (String, Int) -&gt; String): String {
	return f("hello", 3)
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// declaração de função
function comum() { /**/ }
function normal(texto) { /**/ }


// expressão de função
const surpresa = function() { /**/ };
const outraSurpresa = normal;

// expressão de função anônima auto executável
// note os () em volta dela
(function() {
	//
})();

function retorno() {
	return 'retorno';
}

function retornoMisturado(numero) {
	if (numero &gt; 0) {
		return 'texto';
	}
	return 25;
}

function superior(funcao) {
	funcao();
}

// chamadas perfeitamente válidas
comum(); // arguments será []
comum('lala'); // arguments será ['lala']
comum('lala', 'lolo'); // arguments será ['lala', 'lolo']
normal('lolo'); // texto será 'lolo' e arguments será ['lolo']

// chamada válida
normal(); // o parâmetro texto terá o valor undefined e arguments será []

normal.call(this, 'dadaísmo'); // o parâmetro texto terá o valor 'dadaísmo' e arguments será ['dadaísmo']</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># declaração de função
def normal():
	pass

def normal(texto):
	pass

# expressão de função?
# TODO

def retorno():
	return 'retorno'

def retornoMisturado(numero):
	if (numero &gt; 0):
		return 'texto'
	else:
		return 25

def superior(funcao):
	funcao()

superior(normal)
superior(retorno)</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>'Métodos que não retornam valores são chamados subrotinas, ou simplesmente subs
Public Sub SemRetorno()
	'...
End Sub

'Podemos sair precocemente de um sub usando Exit Sub
Public Sub AbortarCedo()

	Dim algumaFlag As Boolean: algumaFlag = True

	If algumaFlag Then
		Exit Sub 'Equivalente à "return"
	End If

	'Fazer o resto se passar pela flag

End Sub


'Métodos com retorno são Funções
Public Function ComRetorno() As Boolean

 	'Equivalente à "return true".
	'Note que são necessárias duas linhas

	ComRetorno = True 'Esta atribui o valor de retorno, mas não interfere na execução das linhas seguintes
	Exit Function 'E esta retorna o valor especificado imediatamente

End Function 'Caso o Exit Function não tenha sido usado, retorna o valor especificado quando chegar aqui


'Tanto subs quanto funções podem receber parâmetros

Private Sub ComParametro(i As Byte)
	Exit Sub
End Sub

Private Function ComParametroERetorno(i As Integer) As Boolean
	If i &lt;&gt; 0 Then 'Operador diferente é &lt;&gt;
		ComParametroERetorno = True
		Exit Function
	Else
		ComParametroERetorno = False
		Exit Function
	End If
End Function
'Ou
Private Function ComParametroERetorno(i As Integer) As Boolean
	ComParametroERetorno = IIf(i &lt;&gt; 0, True, False) 'Inline If (IIf) funciona quase como operador ternário ? :
	Exit Function
End Function


'Podemos passar vários parâmetros separando por vírgula
Private Sub ComParametro(i As Long, j As Currency)
	'...
End Sub


'E podemos quebrar os parâmetros em até 24 linhas utilizando _ (continuação de linha)
'Note que é necessário um espaço antes de _
'E não podem haver comentários :(
Private Sub ComParametro( _
	i As Single, _
	j As Double _
)

	'Single é float, e Double é double mesmo

End Sub

'Para chamar subrotinas e funções, existem casos em que deve ser usados parênteses, e casos em que eles não devem ser usados
'O uso de parênteses quando não obrigatório faz com que os parâmetros sejam passados por valor ao invés de referência
'Teoricamente Call deveria permitir usar parênteses sempre, mas não é o caso. Não há necessidade de usar Call

'TODO Testar isso aqui

Dim param As Integer: param = 1
Dim param2 As Integer: param = 1

ComRetorno
Call ComRetorno
retorno = ComRetorno
retorno = ComRetorno()

ComParametro param 'Passado por referência
ComParametro(param) 'Passado por valor
Call ComParametro(param)

ComParametroERetorno param 'Passado por referência
ComParametroERetorno(param) 'Passado por valor
Call ComParametroERetorno(param)
retorno = ComParametroERetorno(param)

ComDoisParametros param, param2 'Passado por referência
ComDoisParametros(param, param2) 'Passado por valor
Call ComDoisParametros(param, param2)

ComParametroERetorno param, param2 'Passado por referência
ComParametroERetorno(param, param2) 'Passado por valor
Call ComParametroERetorno(param, param2)
retorno = ComParametroERetorno(param, param2)</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>


<h3 id='argumentosreferencia'>Argumentos por referência</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// ver <a href='#ponteiros'>ponteiros</a></code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// ver <a href='#ponteiros'>ponteiros</a></code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// ver <a href='#ponteiros'>ponteiros</a></code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// ver <a href='#ponteiros'>ponteiros</a></code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// tipos primitivos por valor por padrão
// modificáveis com inout
// arrays e objetos por referência

func swapTwoInts(_ a:inout Int, _ b:inout Int) {
	let temp = a
	a = b
	b = temp
}

var a = 2
var b = 3
// requer &amp; na frente do nome
// além do inout da definição
swapTwoInts(&amp;a, &amp;b)</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// tipos primitivos por valor
// arrays e objetos por referência</code
></div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// tipos primitivos por valor
// arrays e objetos por referência</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tipos primitivos por valor por padrão
// modificáveis com ref ou out
// arrays e objetos por referência

public void SwapTwoInts(ref int a, ref int b) {
	int temp = a;
	a = b;
	b = temp;
}

public bool OutExample(string a, out int c) {
	// TODO alguma lógica condicional com a
	return false;
}

// argumentos ref precisam ser inicializados
// antes de serem passados para a função
var a = 2;
var b = 3;
SwapTwoInts(a, b);

// argumentos out NÃO precisam ser inicializados
// antes de serem passados para a função
int c;
if (!OutExample(c)) {
	return;
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// tipos primitivos por valor
// arrays e objetos por referência</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
><strong class='small comment'>'O padrão é passar tudo por referência,</strong>
<strong class='small comment'>'inclusive tipos primitivos como Ints</strong>
'Podemos forçar a passagem de um parâmetro
'por valor ou por referência usando ByVal e ByRef
'Essa palavras não tem efeito quando passamos constantes

'Arrays e User Defined Types (UDTs) não podem
'ser passados por valor

Private Sub PorValor(ByVal i As Long)
	'...
End Sub

Private Sub PorReferencia(ByRef i As Long)
	'...
End Sub</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<h3 id='argumentosopcionais'>Argumentos opcionais</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
	>void point(int x, int y) { /**/ }
void point(int x, int y = 4) { /**/ }
void point(int x = 3, int y = 4) { /**/ }</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>//func point(x:Int, y:Int) { /**/ } // testar
func point(x:Int, y:Int = 4) { /**/ }
// func point(x:Int = 3, y:Int = 4) { /**/ } //testar</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// fun point(x:Int, y:Int) { /**/ } // testar
fun point(x:Int, y:Int = 4) { /**/ }
// fun point(x:Int = 3, y:Int = 4) { /**/ } // testar

// named arguments
fun point(x:Int = 3, y:Int) { /**/ }

// também <a href='#overload'>overload</a> como alternativa</code
></div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// não possui
// usar <a href='#overload'>overload</a> como alternativa</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// public void Point(int x, int y) { /**/ } // testar
public void Point(int x, int y = 4) { /**/ }
// public void Point(int x = 3, int y = 4) { /**/ } // testar

// também <a href='#overload'>overload</a> como alternativa</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// a assinatura das funções não é verificada ao chamá-las
// podemos passar mais ou menos argumentos para a função
// independente de como ela foi definida
// os argumentos a mais não terão nome
// e os argumentos a menos terão o valor null
function point(x, y) {
	if (y == null) {
		y = 4;
	}
}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
def point(x, y = 4):
	#</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Private Sub Point(X As Integer, Optional Y As Integer = 4)
	'
End Sub</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<h3 id='argumentosnome'>Argumentos nomeados</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// usar builder pattern
// como alternativa</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='rust'
>// usar builder pattern
// como alternativa</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// usar builder pattern
// como alternativa</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// todos os argumentos devem ser nomeados</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>func namedArgs(
	tooMany:Int,
	args:Int,
	toRemember:Bool,
	theirMeaning:String = "a",
	byPosition:String = "b"
	) {

	//
}

// argumentos devem seguir a ordem
// mas os que possuem valor padrão
// podem ser omitidos
namedArgs(
	tooMany: 2,
	args: 1,
	toRemember: false,
	byPosition: "args"
)

// nomes dos argumentos que podem
// ser omitidos devem usar _ para
// o nome externo
func unnamedArgs(
	tooMany:Int,
	_ args:Int,
	_ toRemember:Bool,
	_ theirMeaning:String = "a",
	_ byPosition:String = "b"
	) {

	//
}

unnamedArgs(tooMany: 2, 1, false, "args")</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>fun namedArgs(
	tooMany:Int,
	args:Int,
	toRemember:Boolean,
	theirMeaning:String = "a",
	byPosition:String = "b"
	) {

	//
}

namedArgs(
	tooMany = 2,
	args = 1,
	toRemember = false,
	byPosition = "args"
)

// TODO verificar isso pq tem parâmetro faltando
namedArgs(
	2,
	args = 1,
	toRemember = false,
	byPosition = "args"
)

// TODO verificar isso pq tem parâmetro faltando
namedArgs(tooMany = 2, 1, false, "args")</code
></div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// usar builder pattern
// como alternativa</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public class NamedArgs {
	public NamedArgs(
		int tooMany,
		int args,
		bool toRemember,
		string theirMeaning = "a",
		string byPosition = "b"
		) {

		//
	}
}

// argumentos não precisam seguir a ordem
// e os que possuem valor padrão podem
// ser omitidos
var ex = new NamedArgs(
	args: 1,
	toRemember: false,
	tooMany: 2,
	theirMeaning: "named",
	byPosition: "arg"
);</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// usar builder pattern
// como alternativa</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>def named_args(tooMany, args, toRemember, theirMeaning = 'a', byPosition = 'b'):
	#

# TODO mais testes

named_args(tooMany = 2, args = 1, toRemember = false)</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>'usar builder pattern
'como alternativa</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>


<h3 id='sobrecargadefuncao'>Sobrecarga de função</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>


<h3 id='funcoesvariadicas'>Funções e Métodos Variádicos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// argumentos do mesmo tipo

// usa macros para argumentos variádicos O_O'
macro_rules! imprimirSimples {

	($titulo:expr, $($pagina:expr), +) =&gt; {{

		// na "assinatura" do macro não dá pra diferenciar os tipos
		// mas o corpo vai lançar exceção na linha quando compilar
		// se o tipo não for &amp;str
		let titulo:&amp;str = $titulo;

		$(
			// poderíamos fazer a verificação dos tipos aqui tb
			// se necessário
			let pagina = $pagina;
			println!("Imprimindo página {}", pagina);
		)+

	}};

}

imprimirSimples!("resumo", 1, 2, 5);</code
>

<p>Rust</p>
<code class='rust'
>// argumentos de todos os tipos

// TODO terminar exemplo</code
>
</div>

<div class='codeblock'>

<p>Go</p>
<code class='go'
>// argumentos do mesmo tipo

func imprimirSimples(titulo string, paginas ...int) {
	for _, pagina := range paginas {
		fmt.Printf("Imprimindo página %v)\n", pagina)
	}
}

imprimirSimples("resumo", 1, 2, 5)</code
>

<p>Go</p>
<code class='go'
>// argumentos de todos os tipos

func imprimir(titulo string, paginas ...interface{}) {

	for _, pagina := range paginas {

		switch value := pagina.(type) {
			case string:
				fmt.Println("A string")
				fmt.Println("Imprimindo página ", value)
			case int32:
				fmt.Println("An integer")
				fmt.Println("Imprimindo página ", value)
			case []int32:
				fmt.Println("A slice")
				fmt.Println("Imprimindo páginas ", value)
			default:
				fmt.Println("A default")
		}

	}

}

pageSlice := make([]int32, 3)
imprimir("resumo", 1, pageSlice, "capítulo 2")</code
>

</div>

<div class='codeblock'>

<p>C++</p>
<code class='cpp'
>// argumentos do mesmo tipo

#include &lt;iostream&gt;

using std::string;
using std::cout;
using std::endl;

template&lt;typename... Tipos&gt;
void imprimirSimples(string titulo, Tipos... paginas) {

	const uint16_t quantidadeDeParametros {sizeof...(paginas)};

	// não pode criar uma array com 0 elementos
	if (quantidadeDeParametros == 0) {
		return;
	}

	// expande os argumentos
	int paginasArray[quantidadeDeParametros] {paginas...};

	for (auto pagina : paginasArray) {
		cout &lt;&lt; "Imprimindo página " &lt;&lt; pagina &lt;&lt; endl;
	}

}

imprimirSimples("resumo", 1, 2, 5);</code
>

<p>C++</p>
<code class='cpp'
>// argumentos de todos os tipos

#include &lt;iostream&gt;
#include &lt;boost/range/irange.hpp&gt;

using std::string;
using std::cout;
using std::endl;

/// imprimirHelper template genérico
template&lt;typename T&gt;
void imprimirHelper(T pagina) {
	// poderia usar a linha abaixo para descobrir o tipo de T
	// porém, melhor usar o template especializado
	// if (std::is_same&lt;T, int&gt;::value) { /* ... */ }
	cout &lt;&lt; "Imprimindo outra coisa" &lt;&lt; endl;
}

/// imprimirHelper template especializado para int
template&lt;&gt;
void imprimirHelper&lt;int&gt;(int pagina) {
	cout &lt;&lt; "Imprimindo página " &lt;&lt; pagina &lt;&lt; endl;
}

/// imprimirHelper template especializado para boost::irange
template&lt;&gt;
void imprimirHelper&lt;boost::irange&gt;(boost::irange faixa) {
	cout &lt;&lt; "Imprimindo página " &lt;&lt; std::begin(faixa) &lt;&lt; " até " &lt;&lt; std::end(faixa) &lt;&lt; endl;
}


// foward declaration imprimir template?? Não estou certo da função disso :/
void imprimir(string titulo) {}

// implementação imprimir template
template&lt;typename Tipo, typename... Tipos&gt;
void imprimir(string titulo, Tipo pagina, Tipos... paginas) {
	// executa o helper especializado e chama recursivamente a si mesmo
	imprimirHelper(pagina);
	imprimir(titulo, paginas...);
}

imprimir&lt;int, boost::irange, string&gt;("resumo", 1, boost::irange(2, 5), "capítulo 2");</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// macros não seguras estilo C

#include &lt;iostream&gt;
#include &lt;cstdarg&gt;

void imprimirSimplesMacro(const std::string titulo, ...) {

	// va_list argumentos recebe o que vir depois do parâmetro titulo
	va_list argumentos;
	va_start(argumentos, titulo);

	int pagina;
	while (true) {
		pagina = va_arg(argumentos, int);
		if (pagina == -1) {
			break;
		}
		std::cout &lt;&lt; "Imprimindo " &lt;&lt; pagina &lt;&lt; std::endl;
	}

	va_end(argumentos);

}

// preciso sempre passar -1 no final como terminador
// se não dá overflow e lê pedaço de memória além do que deveria
imprimirSimplesMacro("resumo", 1, 2, 5, -1);</code
>
</div>

<div class='codeblock'>

<p>Swift</p>
<code class='swift'
>// argumentos do mesmo tipo

func imprimirSimples(titulo titulo:String, paginas:Int...) {
	for pagina in paginas {
		print("Imprimindo página \(pagina) num total de \(paginas.count)")
	}
}

imprimirSimples(titulo: "resumo", paginas: 1, 2, 5)</code
>

<p>Swift</p>
<code class='swift'
>// argumentos de todos os tipos

func imprimir(titulo titulo:String, paginas:Any...) {
	for valor in paginas {
		switch valor {
		case let pagina as Int:
			print("Imprimindo página \(pagina)")
		case let faixa as Range&lt;Int&gt;:
			print("Imprimindo páginas \(faixa.first!) até \(faixa.last!)")
		default:
			print("Imprimindo outra coisa")
		}
	}
}

imprimir(titulo: "resumo", paginas: 1, 2...5, "capítulo 2")</code
>
</div>



<div class='codeblock'>

<p>Kotlin</p>
<code class='kotlin'
>// argumentos do mesmo tipo

imprimirSimples(String titulo, vararg paginas:Int) {
	/*for (int pagina : paginas) {
		System.out.println(String.format("Imprimindo página %1", pagina));
	}*/
}

imprimirSimples("resumo", 1, 2, 5);</code
>

<p>Kotlin</p>
<code class='kotlin'
>// argumentos de todos os tipos

/*void imprimir(String titulo, Object... paginas) {
	for (Object valor : paginas) {
		if (valor instanceof Integer) {
			System.out.println(String.format("Imprimindo página %d", valor));
		} else if (valor instanceof Range&lt;Integer&gt;) {
			System.out.println(String.format(
				"Imprimindo páginas %d até %d",
				((Range&lt;Integer&gt;)valor).getMinimum(),
				((Range&lt;Integer&gt;)valor).getMaximum()
			));
		} else {
			System.out.println("Imprimindo outra coisa");
		}
	}
}

imprimir("resumo", 1, Range.between(2, 5), "capítulo 2");*/</code
>
</div>



<div class='codeblock'>

<p>Java</p>
<code class='java'
>// argumentos do mesmo tipo

void imprimirSimples(String titulo, int... paginas) {
	for (int pagina : paginas) {
		System.out.println(String.format("Imprimindo página %1", pagina));
	}
}

imprimirSimples("resumo", 1, 2, 5);</code
>

<p>Java</p>
<code class='java'
>// argumentos de todos os tipos

void imprimir(String titulo, Object... paginas) {
	for (Object valor : paginas) {
		if (valor instanceof Integer) {
			System.out.println(String.format("Imprimindo página %d", valor));
		} else if (valor instanceof Range&lt;Integer&gt;) {
			System.out.println(String.format(
				"Imprimindo páginas %d até %d",
				((Range&lt;Integer&gt;)valor).getMinimum(),
				((Range&lt;Integer&gt;)valor).getMaximum()
			));
		} else {
			System.out.println("Imprimindo outra coisa");
		}
	}
}

imprimir("resumo", 1, Range.between(2, 5), "capítulo 2");</code
>
</div>



<div class='codeblock'>

<p>C#</p>
<code class='cs'
>// argumentos do mesmo tipo

void ImprimirSimples(string titulo, params int[] paginas) {
	foreach (int pagina in paginas) {
		System.Console.WriteLine(
			@"Imprimindo pagina {0} num total de {1}",
			pagina,
			paginas.Length
		);
	}
}

ImprimirSimples(@"resumo", 1, 2, 5);</code
>

<p>C#</p>
<code class='cs'
>// argumentos de todos os tipos

void Imprimir(string titulo, params object[] paginas) {
	foreach (object valor in paginas) {
		if (valor is int) {
			System.Console.WriteLine(@"Imprimindo página {0}", valor);
		} else if (valor is IEnumerable&lt;int&gt;) {
			System.Console.WriteLine(
				@"Imprimindo páginas {0} até {1}",
				(valor as IEnumerable&lt;int&gt;).First(),
				(valor as IEnumerable&lt;int&gt;).Last()
			);
		} else {
			System.Console.WriteLine(@"Imprimindo outra coisa");
		}
	}
}

Imprimir(@"resumo", 1, Enumerable.Range(2, 4), @"capítulo 2");</code
>
</div>



<div class='codeblock'>

<p>JavaScript</p>
<code class='javascript'
>'use strict';

// argumentos do mesmo tipo

function imprimirSimples(titulo, ...paginas) {
	for (let pagina of paginas) {
		console.log(`Imprimindo página ${pagina}`);
	}
}

imprimirSimples("resumo", 1, 2, 5);</code
>

<p>JavaScript</p>
<code class='javascript'
>'use strict';

// argumentos de todos os tipos

function imprimir(titulo, ...valores) {
	for (let valor of valores) {
		if (Number.isInteger(valor)) {
			console.log(`Imprimindo página ${valor}`);
		} else if ((valor.begin || valor.begin === 0)
			&amp;&amp; valor.end
			) {
			console.log(`Imprimindo páginas ${valor.begin} até ${valor.end}`);
		} else {
			console.log('Imprimindo outra coisa');
		}
	}
}

imprimir("resumo", 1, {begin: 2, end: 5}, "capítulo 2");</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>def imprimirSimples(titulo, *paginas):
for pagina in paginas:
	print("Imprimindo página " + pagina)
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>' argumentos do mesmo tipo

Public Sub ImprimirSimples(titulo As String, ParamArray paginas() As Integer)
	Dim pagina As Integer
	For Each pagina In paginas
		Print pagina
	Next
End Sub

Imprimir "resumo", 1, 2, 5</code>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='lambdas'>Lambdas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>fn main() {

	// Increment via closures and functions.
	fn function(i: i32) -&gt; i32 { i + 1 }

	// Closures are anonymous, here we are binding them to references
	// Annotation is identical to function annotation but is optional
	// as are the `{}` wrapping the body. These nameless functions
	// are assigned to appropriately named variables.
	let closure_annotated = |i: i32| -&gt; i32 { i + 1 };
	let closure_inferred  = |i     |          i + 1  ;

	let i = 1;
	// Call the function and closures.
	println!("function: {}", function(i));
	println!("closure_annotated: {}", closure_annotated(i));
	println!("closure_inferred: {}", closure_inferred(i));

	// A closure taking no arguments which returns an `i32`.
	// The return type is inferred.
	let one = || 1;
	println!("closure returning one: {}", one());

}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// suporta funções anônimas e closures
// mas não lambda com arrow syntax ou algo parecido

func superiorRetorno(funcao func(x int) int) {
	fmt.Println(funcao(1))
}

superiorRetorno(func(x) { return x + 1 })</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>func superior(funcao:() -&gt; Void) {
	funcao()
}

// declaração simplificada
superior({() in print("lambda")})




func superior(funcao:(_:Int) -&gt; Int) {
	print(funcao(1))
}

// declaração simplificada
superior({x in x + 1})

// declaração completa
superior({(x:Int) -&gt; Int in
	return x + 1
})

// superior({x, y in x + y})</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>val sum: (Int, Int) -&gt; Int = { x: Int, y: Int -&gt; x + y }

// suporta closures tb</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {

		// não são funções de verdade, são classes
		// que podem ser declaradas como se fossem
		// funções lambda, mas ainda é preciso chamar
		// o método da classe para executá-las
		// no caso do exemplo, o método se chama call

		// declaração simplificada
		Main.superior(() -&gt; System.out.println("lambda"));


		// declaração simplificada
		Main.superior(x -&gt; x + 1);

		// declaração completa
		Main.superior((int x) -&gt; {
			return x + 1;
		});

		// Main.superior(x, y -&gt; x + y);

	}

	@FunctionalInterface
	public interface Lambda {
		void call();
	}

	public static void superior(Lambda funcao) {
		funcao.call();
	}

	@FunctionalInterface
	public interface Lambda2 {
		int call(int x);
	}

	public static void superior(Lambda2 funcao) {
		System.out.println(funcao.call(1));
	}

}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public class Main {

	public static void Main(string[] args) {







		// declaração simplificada
		Main.superior(() =&gt; System.Console.WriteLine("lambda"));


		// declaração simplificada
		Main.superior(x =&gt; x + 1);

		// declaração completa
		Main.superior((int x) =&gt; {
			return x + 1;
		});

		// Main.superior(x, y -&gt; x + y);

	}

	public delegate void LambdaDelegate();




	public static void superior(LambdaDelegate funcao) {
		funcao();
	}

	public delegate int Lambda2Delegate(int x);




	public static void superior(Lambda2Delegate funcao) {
		System.Console.WriteLine(funcao(1));
	}

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>function superior(funcao) {
	funcao();
}

// declaração simplificada
superior(() =&gt; console.log('lambda'));

// declaração antiga
superior(function() { /**/ });

function superior2(funcao) {
	console.log(funcao(1));
}

// declaração simplificada
superior(x =&gt; x + 1);

// declaração completa
superior((x) =&gt; {
	return x + 1;
});

// superior(x, y =&gt; x + y)</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>x = lambda a, b, c : a + b + c

# TODO mover para exemplo de closure
def myfunc(n):
	return lambda a : a * n

mydoubler = myfunc(2)
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>' ver <a href='https://www.vbforums.com/showthread.php?888672-VBA-Lambda-Syntax-No-script-control-or-cheats!-Happy-for-ports-to-VB6'>exemplo</a></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='funcoesinternas'>Funções Internas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>fn externa() {

	fn interna() { /**/ }

	// let internaLambda = || { /**/ };

	interna();
	internaLambda();

}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>func externa() {

	func main() {

		internaLambda := func() { /**/ }
		internaLambda()

	}

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>void externa() {



	auto internaLambda = [](){ /**/ };

	// ou

	struct internaFunctor { // testar isso
		void operator()() { /**/ }
	};

	internaLambda();
	internaFunctor();

}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// blocks em métodos
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>func externa() {

	func interna() { /**/ }

	// let internaLambda = {() in /**/ }

	interna()
	internaLambda();

}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {

		// não são funções de verdade
		// ver lambdas acima para explicação

		Funcional interna = () -&gt; {
			System.out.println("interna");
		};

		interna.call();

		Funcional2 interna2 = x -&gt; x + 1;

		int y = interna2.call(1);

	}

	@FunctionalInterface
	public interface Funcional {
		void call();
	}

	@FunctionalInterface
	public interface Funcional2 {
		int call(int x);
	}

}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public class Main {

	public static void Main(string[] args) {




		InternaDelegate interna = () =&gt; {
			System.Console.WriteLine(@"interna");
		};

		interna();

		Interna2Delegate interna2 = x =&gt; x + 1;

		var y = interna2(1);

		// ou

		Action interna = new Action(() =&gt; {
			System.Console.WriteLine(@"interna");
		})); // testar isso

		Func&lt;int&gt; interna2 = new Func&lt;int&gt;(x =&gt; x + 1);

		// C# 7 deverá permitir funções locais também

	}

	delegate void InternaDelegate();




	delegate int Interna2Delegate(int x);

}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>function externa() {

	function interna() { /**/ }

	let internaLambda = () =&gt; { /**/ };

	interna();
	internaLambda();

}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>



<ol>
	<li>Swift / Rust / JavaScript</li>
	<li>C++</li>
	<li>C#</li>
	<li>Java</li>
	<li>Objective-C</li>
</ol>

<p>Swift, Rust e JavaScript permitem a criacão natural de funções dentro de funções.
<br />C++ requer o uso de um lambda, mas seu tipo pode ser deduzido pelo compilador.
<br />C# também usa um lambda, mas seu tipo deve ser declarado por meio de um <code class='cs'>delegate</code>.
<br />Java não possui funções internas de verdade. São classes com uma sintaxe um pouco mais reduzida.
<br />Objective-C?</p>


<h3 id='closures'>Closures</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>package main

import "fmt"

func facade() func() int {
	// acessível somente pela função interna
	i := 0
	interna := func() int {
		i++
		return i
	}
	// expõe a função interna
	return interna
}

func main() {

	closure := facade()
	fmt.Println(closure()) // 1
	fmt.Println(closure()) // 2

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;iostream&gt;

int main(int argc, const char* argv[]) {

	using std::make_shared;
	using std::cout;
	using std::endl;

	auto facade = [](){
		// acessível somente pela função interna
		auto i = make_shared<span>&lt;<span>int</span>&gt;</span>();
		auto interna = [i](){
			(*i)++;
			return *i;
		};
		// expõe a função interna
		return interna;
	};

	auto closure = facade();
	cout &lt;&lt; closure() &lt;&lt; endl; // 1
	cout &lt;&lt; closure() &lt;&lt; endl; // 2

	return 0;

}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>#import &lt;Foundation/Foundation.h&gt;

int main(int argc, const char* argv[]) {

	// typedef ajuda na legibilidade
	typedef int (^interna_t)(void);
	typedef interna_t (^facade_t)(void);

	facade_t facade = ^{
		// acessível somente pela função interna
		__block int i = 0;
		interna_t interna = ^{
			i++;
			return i;
		};
		// expõe a função interna
		return interna;
	};

	interna_t closure = facade();
	NSLog(@"%i", closure()); // 1
	NSLog(@"%i", closure()); // 2

	return 0;

}</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>







func facade() -&gt; () -&gt; Int {
	// acessível somente pela função interna
	var i = 0
	func interna() -&gt; Int {
		i = i + 1
		return i
	}
	// expõe a função interna
	return interna
}

let closure = facade();
print(closure()); // 1
print(closure()); // 2</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>

<code class='java multipart'
>class ClosureState {
	public int i;
}

public class MainClosure {

	@FunctionalInterface
	public interface Interna {
		int call();
	}

	static Interna facade() {
		// acessível somente pela "função" interna
		final ClosureState closureState = new ClosureState();
		Interna interna = () -&gt; {
			closureState.i++;
			return closureState.i;
		};
		// expõe a "função" interna
		return interna;
	}

	public static void main(String[] args) {
		Interna closure = facade();
		System.out.println(closure.call()); // 1
		System.out.println(closure.call()); // 2
	}

}</code
>

<code class='java'
><strong>// PS: pra evitar ter que declarar uma classe ClosureState</strong>
<strong class='small comment'>// eu poderia ter feito</strong>
final Object closureState = new Object() {
	public int i;
};

<strong>// mas aí para ler as propriedades eu teria que usar</strong>
<strong class='small comment'>// reflection toda a vez</strong>
Class ClosureClass = closureState.getClass();

Field IField = ClosureClass.getDeclaredField("i")
IField.getInteger(closureState);</code
>

</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>



public class MainClassClosure {

	delegate int InternaDelegate();




	static InternaDelegate Facade() {
		// acessível somente pela função interna
		int i = 0;
		InternaDelegate interna = () =&gt; {
			i++;
			return i;
		};
		// expõe a função interna
		return interna;
	}

	public static void Main(string[] args) {
		var closure = Facade();
		System.Console.WriteLine(closure()); // 1
		System.Console.WriteLine(closure()); // 2
	}

}</code
>
</div>

<!-- TODO testar captura de variáveis -->

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>





'use strict';

function facade() {
	// acessível somente pela função interna
	let i = 0;
	let interna = () =&gt; {
		i++;
		return i;
	};
	// expõe a função interna
	return interna;
}

let closure = facade();
console.log(closure()); // 1
console.log(closure()); // 2</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>Swift / JavaScript</li>
	<li>Rust?</li>
	<li>C#</li>
	<li>C++</li>
	<li>Java</li>
	<li>Objective-C</li>
</ol>

<p>Swift e JavaScript são os mais sucintos. É verdade que é necessário saber da existência de <em>closures</em> para não criar uma sem querer, como muitos programadores JavaScript devem ter descoberto da pior maneira. Porém as novas regras de escopo, similares às das demais linguagens minimizam esse problema.
<br />Rust?
<br />Em comparação com as linguagens anteriores, C# requer apenas a declaração de um <code class='cs'>delegate</code> a mais.
<br />C++ por sua vez, requer cuidados no gerenciamento de memória das variáveis acessadas pela closure com <code class='cpp'>make_shared</code>.
<br />Java complica um pouco o padrão, requerendo que as variáveis sejam membros de um objeto marcado como <code class='java'>final</code>.
<br />Objective-C possui uma sintaxe bastante difícil para identificar as closures, e o uso de <em>aliases</em> torna as assinaturas um pouco mais legíveis. Também é necessário identificar de maneira especial as variáveis que serão usadas na closure com <code class='objectivec'>__block</code>.</p>

</section>



<section>

<h3 id='strategypattern'>Assinatura e strategy pattern</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>type StrategySignature = fn(i32, i32) -&gt; i32

//</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>type StrategySignature func(int, int) int

func AddStrategy(i1 int, i2 int) int {
	return i1 + i2
}

func MultiplyStrategy(i1 int, i2 int) int {
	return i1 * i2
}

func main() {

	var typeCurrentStrategy StrategySignature
	var inlineCurrentStrategy func(int, int) int

	typeCurrentStrategy = AddStrategy
	inlineCurrentStrategy = AddStrategy
	typeCurrentStrategy(1, 2) // 3
	typeCurrentStrategy(1, 2) // 3

	typeCurrentStrategy = MultiplyStrategy
	inlineCurrentStrategy = typeCurrentStrategy
	typeCurrentStrategy(1, 2) // 2
	typeCurrentStrategy(1, 2) // 2

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>typealias StrategySignature = (Int, Int) -&gt; Int

func addStrategy(_ i1:Int, _ i2:Int) -&gt; Int {
	return i1 + i2
}

func multiplyStrategy(_ i1:Int, _ i2:Int) -&gt; Int {
	i1 * i2
}

var subtractStrategy = {(i1:Int, i2:Int) -&gt; Int in
	i1 - i2
}

var divideStrategy:StrategySignature = { i1, i2 in i1 / i2 }

var otherStrategy:StrategySignature = {$0 + $1}

var typeCurrentStrategy:StrategySignature
var inlineCurrentStrategy:func(Int, Int) -&gt; Int

typeCurrentStrategy = addStrategy
inlineCurrentStrategy = addStrategy
typeCurrentStrategy(1, 2) // 3
typeCurrentStrategy(1, 2) // 3

typeCurrentStrategy = multiplyStrategy
inlineCurrentStrategy = typeCurrentStrategy
typeCurrentStrategy(1, 2) // 2
typeCurrentStrategy(1, 2) // 2</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// notice that for signatures
// the return type is separated by -&gt; and not :
// ugh...
typealias StrategySignature = (Int, Int) -&gt; Int

fun addStrategy(i1:Int, i2:Int) : Int {
	return i1 + i2
}

val multiplyStrategy = fun(i1:Int, i2:Int) : Int {
	i1 * i2
}

val subtractStrategy:StrategySignature = { i1, i2 -&gt; i1 - i2 }

//</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>delegate int StrategySignature(int, int);

//</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='modulos'>Módulos</h2>

<div class='comparison large'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>mod
</code
>
<p>Rust</p>
<code class='rust'
>use
</code
>
</div>

<div class='codeblock'>

<p>Go - moduleRootFolder</p>
<code class='shell'
><span class='comment'># dentro de um diretório</span>
<span class='keyword'>go</span> <span class='keyword'>mod</span> <span class='keyword'>init</span> github.com/path/to/module/repo

<span class='comment'># isso vai criar um go.mod</span></code
>

<p>Go - moduleRootFolder/go.mod</p>
<code class='generic'
>module github.com/path/to/module/repo

go 1.15</code
>

<p>Go - moduleRootFolder/subfolder/sub.go</p>
<code class='go'
>package subfolder
// nome do pacote não precisa ser
// o mesmo da pasta, mas é recomendado

func init() {
	// executado quando um pacote é importado
}

// nomes começando com maiúsculo
// são visíveis fora do pacote

func ExportedFunc() {
	//
}

type ExportedStruct struct {
	//
}

// nomes começando com minúsculo
// só são visíveis dentro do próprio pacote

func packagePrivate() {
	//
}</code
>

<p>Go - moduleRootFolder/othersubfolder/main.go</p>
<code class='go'
>package main

// import with . in front will remove the need to use
// the full package.struct name, only struct name would do
// import with _ in front for using side-effects only
// (running the init func)

// use o caminho configurado em go.mod + nome do pacote
import (
	"github.com/path/to/module/repo/subfolder"
)

// ExportedStruct alias without namespace
type ExportedStruct = sub.ExportedStruct

func main() {

	// use o alias criado
	exportedStruct := ExportedStruct{}

	// ou o nome completo
	exportedStruct := sub.ExportedStruct{}
	sub.ExportedFunc()

}</code
>

</div>

<div class='codeblock'>

	<div>

		<p>C++ 20+ - modulo.cpp</p>
		<code class='cpp'
>export module marcoluglio;

export class DentroDoModulo;

class DentroDoModulo final {
	// ...
};</code
		>

		<p>C++ 20+ - main.cpp</p>
		<code class='cpp'
>import marcoluglio;

int main() {
	auto meuObjeto = DentroDoModulo();
}</code
		>

	</div>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>

<p>C++ Microsoft - DentroDoModulo.hpp</p>
<code class='cpp'
>
#pragma once

namespace marcoluglio {
	class DentroDoModulo {};
}</code
>

		</div>

		<div>

<p>C++ - DentroDoModulo.cpp</p>
<code class='cpp'
>
#include "DentroDoModulo.hpp"

namespace marcoluglio {
	//
}</code
>

		</div>

	</div>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include "DentroDoModulo.hpp"

int main(int argc, const char* argv[]) {
	using marcoluglio::DentroDoModulo;
	DentroDoModulo meuObjeto = DentroDoModulo();
}</code
>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>

<p>C++ - DentroDoModulo.hpp</p>
<code class='cpp'
>#ifndef MARCOLUGLIO_DENTRODOMODULO_HPP_INCLUDED
#define MARCOLUGLIO_DENTRODOMODULO_HPP_INCLUDED

namespace marcoluglio {
	class DentroDoModulo {};
}

#endif /* MARCOLUGLIO_DENTRODOMODULO_HPP_INCLUDED */</code
>

		</div>

		<div>

<p>C++ - DentroDoModulo.cpp</p>
<code class='cpp'
>
#include "DentroDoModulo.hpp"

namespace marcoluglio {
	//
}</code
>

		</div>

	</div>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include "DentroDoModulo.hpp"

int main(int argc, const char* argv[]) {
	using marcoluglio::DentroDoModulo;
	DentroDoModulo meuObjeto = DentroDoModulo();
}</code
>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>

<p>Objective-C - MLGDentroDoModulo.h</p>
<code class='objectivec'
>
#import &lt;Foundation/Foundation.h&gt;

@interface MLGDentroDoModulo : NSObject
	//
@end

</code
>

		</div>

		<div>

<p>Objective-C - MLGDentroDoModulo.m</p>
<code class='objectivec'
>
#import "MLGDentroDoModulo.h"

@implementation MLGDentroDoModulo
	//
@end</code
>

		</div>

	</div>

<p>Objective-C - main.m</p>
<code class='objectivec'
>#import &lt;Foundation/Foundation.h&gt;
#import "MLGDentroDoModulo.h"

int main(int argc, const char* argv[]) {
	MLGDentroDoModulo* meuObjeto;
	meuObjeto = [[MLGDentroDoModulo alloc] init];
	return 0;

	// não possui namespaces
	// a utilização de prefixos com 3 letras
	// ou mais nas classes é a alternativa
	// recomendada

}</code
>

</div>

<div class='codeblock'>
<p>Swift - DentroDoModulo.swift</p>
<code class='swift'
>// a criação de namespaces é implícita
// para cada módulo

// um módulo é um agrupamento macro, bem
// diferente do que se utiliza nas
// outras linguagens

// ele abrange um target inteiro de
// compilação como um framework,
// uma biblioteca ou um executável

import UIKit

class DentroDoModulo: UIViewController {
}</code
>

<p>Swift - main.swift</p>
<code class='swift'
>let meuObjeto = DentroDoModulo()</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>
<p>Java - marcoluglio/DentroDoModulo.java</p>
<code class='java'
>package marcoluglio;

public class DentroDoModulo { /**/ }</code
>
<p>Java - main.java</p>
<code class='java'
>import marcoluglio.DentroDoModulo;

public class OlaMundo {
	public static void main(String[] args) {
		DentroDoModulo meuObjeto;
		meuObjeto = new DentroDoModulo();
	}
}</code
>
</div>

<div class='codeblock'>
<p>C# - DentroDoModulo.cs</p>
<code class='cs'
>namespace marcoluglio {
	public class DentroDoModulo { /**/ }
}</code
>
<p>C# - main.cs</p>
<code class='cs'
>using marcoluglio;

class MainClass {
	public static void Main(string[] args) {
		DentroDoModulo meuObjeto;
		meuObjeto = new DentroDoModulo();
	}
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript compatibilidade</p>
<code class='javascript'
>'use strict';

define('dentroDoModulo', () =&gt; {
	const DentroDoModulo = class DentroDoModulo() { /**/ }
	return DentroDoModulo;
});

define(['dentroDoModulo'], (DentroDoModulo) =&gt; {
	let meuObjeto = new DentroDoModulo();
});
</code
>
</div>

<div class='codeblock'>
<p>JavaScript - DentroDoModulo.js</p>
<code class='javascript'
>'use strict';

export default class DentroDoModulo { /**/ }</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>'use strict';

import DentroDoModulo from 'DentroDoModulo';

let meuObjeto = new DentroDoModulo();</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript)</p>

</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>

</div>

<div class='codeblock'>
<p>Assembly</p>

</div>

</div>

<ol>
	<li>C# / Java</li>
	<li>JavaScript</li>
	<li>Rust</li>
	<li>C++</li>
	<li>Swift</li>
	<li>Objective-C</li>
</ol>

<p>C# e Java possuem maior granularidade. A única diferença entre os dois é que o módulo em Java deve ser replicado na estrutura de pastas dos arquivos que contém as classes, ao passo que em C# não. Se você já teve que cavar dentro de mil pastas por classes Java sabe que isso acaba mais atrapalhando do que ajudando. Porém, deve haver certamente quem diga que a liberdade que C# proporciona nesse quesito pode ser mal utilizada e gerar confusão.
<br />JavaScript até a versão ES6, não possuía nenhuma sintaxe especial para definir módulos. Mesmo após a oficialização da especificação, nenhum navegador a implementou até o momento. O que vemos no exemplo é um padrão denominado <abbr title='Asynchronous Module Definition'>AMD</abbr> que é bastante flexível, porém um pouco redundante e propenso a erros.
<br />Rust?
<br />C++ possui passos manuais na definição de módulos. A sintaxe para aninhar <em>namespaces</em> só será melhorada na próxima especificação (c++1z). Oficialmente a forma de garantir que um módulo não seja importado mais de uma vez, e por consequência sobrescrito, é usar os <em>include guards</em> <code class='cpp'>#ifndef</code>, <code class='cpp'>#define</code> e <code class='cpp'>#endif</code>. A diretiva mais amigável <code class='cpp'>#pragma once</code> não é oficial, embora a maioria dos compiladores reconheça devido à sua popularidade.
<br />Swift tem uma definição tão abrangente de módulos que quase não se pode dizer que ele tenha uma.
<br />Objective-C herda de C?</p>

</section>



<section>

<h2 id='visibilidade'>Visibilidade</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// se não especificar é private
// pub para tornar padrão</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>/*
In Go, an identifier that starts with
a capital letter is exported from the package,
and can be accessed by anyone outside
the package that declares it.

If an identifier starts with a lower case letter,
it can only be accessed from within the package.

If you need members in a type to only be accessed
by members of that type, you then need to place
that type and its member functions in a separate
package, as the only type in that package.
*/</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// padrão é??
// public protected private
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>/*
padrão é internal
public class SomePublicClass {}
internal class SomeInternalClass {}
fileprivate class SomeFilePrivateClass {}
private class SomePrivateClass {}

extensions podem acessar private
*/</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>/*
public é padrão
private, protected, internal and public

tem traits? podem acessar private?
*/</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>// padrão é package private
// que subclasses não conseguem acessar
// public protected private para modificar</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>/*
public 	Access is not restricted.
protected 	Access is limited to the containing class or types derived from the containing class.
internal 	Access is limited to the current assembly.
protected internal 	Access is limited to the current assembly or types derived from the containing class.
private 	Access is limited to the containing type.
private protected 	Access is limited to the containing class or types derived from the containing class within the current assembly. Available since C# 7.2.

extension methods podem acessar private?
*/</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// export import
// dentro de um módulo tudo é public
// pode documentar com JSDoc
// a visibilidade sugerida
// usar _ como sugestão
// ou closures</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># começando com _ é protected
# começando com __ é private</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>'<a href='http://www.macoratti.net/vb_class.htm'>ver descrição</a>
'Private 	A classe não pode ser acessada fora do projeto.
'Public Not Creatable 	Instâncias da classe somente podem ser criadas dentro do projeto que definiu a classe.Outras aplicações , no entanto, podem acessar a classe.
'SingleUse 	Outras aplicações podem criar instâncias da classe.Porém a cada instância criada inicia uma cópia do programa que contém a classe.
'Global SingleUse 	A classe atua como uma variável goblal no programa cliente.
'MultiUse 	Outras aplicações podem criar inúmeras instâncias da classe iniciando somente uma vez o programa que contém a classe. Os projetos ActiveX DLL comportam-se assim.
'Global MultiUse 	Idêntica a MultiUse mas a classe atua como uma variável goblal no programa cliente.
</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='excecoes'>Exceções</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust multipart'
>// retornar múltiplos valores com Result&lt;R, E&gt;

fn may_return_error(x:i32) -&gt; Result&lt;i32, &amp;'static str&gt; {
	None =&gt; Err("Error"), // retorna um erro
	Some(0) =&gt; Err("0 não permitido"), // retorna um erro
	Some(_) =&gt; Ok(x),
}

match may_return_error(1) {
	Ok(result) =&gt; println!("{}", result),
	Err(err) =&gt; println!("Error: {}", err),
}

// runtime panic + match Ok, Err

fn may_runtime_panic() -&gt; &amp;str {
	panic!("Error message"); // gera uma exceção
	"Ok"
}

match may_runtime_panic() {
	Ok(result) =&gt; println!("{}", result),
	Err(err) =&gt; println!("Error: {}", err),
}

// ou

// pode usar Result ou Option
fn a() -&gt; Result&lt;a, b&gt; { // TODO
	let result = may_runtime_panic()?;
	Ok(result)
}

// try {} block e ?
// <a href='https://github.com/rust-lang/rust/issues/31436'>acompanhe essa feature</a>
// e <a href='https://doc.rust-lang.org/beta/unstable-book/language-features/try-blocks.html'>unstable docs</a></code
>

<code class='rust'
><strong>// NÃO COPIE!!! DEPRECATED!!!</strong>

// houve uma proposta de usar do catch {},
// mas ela foi substituída pelo try {}

// havia uma sintaxe para try!
// mas ela foi substituída por ?
let result = try!(may_panic()); // 2015-
let result = r#try!(may_panic()); // 2018 legacy</code
>

</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// retornar múltiplos valores

func mayReturnError(fileName string) (content string, err error) {

	// defer é mais ou menos um bloco "finally"
	// sempre vai executar ao final da função
	// em que foi definido

	// se você tiver vários defers eles irão
	// executar na ordem oposta em que foram
	// definidos (first in, last out)

	file, err := os.Open(fileName)
	defer file.Close()

	if err != nil {
		return "", err // retorna um erro
	}

	return file.String(), err

}

// runtime panic + recover

func mayRuntimePanic() {
	panic("Error message") // gera uma exceção
}

func f() {

	// bloco "catch" como um lambda auto executável
	// o que torna ele um catch ao invés de um finally
	// é que nós checamos o resultado de recover antes
	// de prosseguir

	defer func() {
		// recover() == nil se nenhum panic ocorreu
		if r := recover(); r == nil {
			return
		}
		fmt.Println("Recovered control")
	}()

	mayRuntimePanic()

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp multipart'
>#include &lt;exception&gt;

using std::exception;

try {
	throw anyType; // gera uma exceção
	// ou simplesmente
	throw; // gera uma exceção
} catch (const exception&amp; ex) {
	// roda se jogou uma exceção
} catch (...) {
	// roda sempre, independente se uma exceção ocorreu ou não
}</code
>

<code class='cpp'
><strong>// NÃO COPIE!!! DEPRECATED!!!</strong>

// havia uma sintaxe para "checked exceptions"
int podeOuNao(int param) throw();
int podeOuNao(int param) throw(someType);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>- (void) someMethod {
	@try {
		@throw exception; // gera uma exceção
	} @catch (NSException *exception) {
		// roda se jogou uma exceção
	} @finally {
		// roda sempre, independente se uma exceção ocorreu ou não
	}
}

// ou

someCFunction(); // TODO exception estilo C, com error codes?</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift multipart'
>enum MLError : Error {
	case Bad
	case Worse
	case Worst
}</code
>

<code class='swift multipart'
><strong>// throws antes do corpo da função indica</strong>
<strong class='small comment'>// que ela pode gerar uma exceção e</strong>
<strong class='small comment'>// vai propagá-la ao invés de tratá-la</strong>
<strong class='small comment'>// cabe a quem executou a função tratar</strong>
<strong class='small comment'>// a exceção OBRIGATORIAMENTE</strong>
<strong class='small comment'>// ou indicar que vai propagá-la também</strong>
func podeOuNao() <strong class='small'>throws</strong> -&gt; String {
	throw MLError.Bad
}

// para outras funções, é esperado que
// a exceção seja tratada dentro dela mesma
func naoPode() -&gt; String {
	//
}</code
>

<code class='swift multipart'
>// para tratar exceções

// defer é mais ou menos um bloco "finally"
// sempre vai executar ao final da função
// em que foi definido

// se você tiver vários defers eles irão
// executar na ordem oposta em que foram
// definidos (first in, last out)

do {
	// abrir resources
	defer {
		// fechar resources
	}
	try throw MLError.Bad // gera uma exceção
} catch MLError.Bad {
	// roda se jogou uma exceção
} catch MLError.Worse, MLError.Worst {
	// roda se jogou uma exceção
}

// ou com try? - nil se jogar exceção

let result = try? podeOuNao() {
	// roda se for tudo bem
}

// mesmo que

let result = try? podeOuNao()
guard result != nil else { return }

// ou com try! - gera runtime exception se throws

let result = try! podeOuNao()

// TODO rethrows</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>

<p>Java - Main.java</p>
<code class='java'
>public class Main {

	<strong>// throws antes do corpo da função indica</strong>
	<strong class='small comment'>// que ela pode gerar uma exceção e</strong>
	<strong class='small comment'>// vai propagá-la ao invés de tratá-la</strong>
	<strong class='small comment'>// cabe a quem executou a função tratar</strong>
	<strong class='small comment'>// a exceção OBRIGATORIAMENTE</strong>
	<strong class='small comment'>// ou indicar que vai propagá-la também</strong>
	public static void main(String[] args) <strong class='small'>throws Exception</strong> {
		throw new Exception();
	}

}</code
>

<p>Java - Main.java</p>
<code class='java'
>public class Main {

	// para outras funções, é esperado que
	// a exceção seja tratada dentro dela mesma
	public static void main(String[] args) {

		PodeOuNao problematico = new PodeOuNao();

		// para tratar exceções

		// obrigatório tratar ou indicar que vai propagar
		<strong class='small'>try {</strong>
			<strong>problematico.checkedMethod();</strong>
		<strong class='small'>} catch (Exception ex) {</strong>
			// roda se jogou uma exceção
		<strong>} finally {</strong>
			// roda sempre
		<strong>}</strong>

		problematico.uncheckedMethod();

	}

}</code
>

<p>Java - Main.java</p>
<code class='java'
>public class Main {

	public static void main(String[] args) {

		PodeOuNao problematico = new PodeOuNao();

		// para tratar exceções

		// opcional tratar ou indicar que vai propagar
		try {
			problematico.uncheckedMethod();
		} catch (Exception ex) {
			// roda se jogou uma exceção
		} finally {
			// roda sempre
		}

	}

}</code
>

<p>Java - PodeOuNao.java</p>
<code class='java'
>package marcoluglio.exceptionexample;

public final class PodeOuNao {

	// checked exceptions devem ser cercadas por
	// try catch ou o método deve indicar explicitamente
	// que pode lançá-las com "throws"
	public void checkedMethod() throws Exception {
		throw new Exception("pego na compilação!");
	}

	// unchecked exceptions não precisam de tais
	// cuidados
	public void uncheckedMethod() {
		throw new RuntimeException("pego na execução!");
	}

}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>try {
	throw new ArgumentException("Error"); // gera uma exceção
} catch (Exception ex) {
	// roda se jogou uma exceção
} finally {
	// roda sempre
}

try {
	// sem finally
} catch {
	// roda se jogou uma exceção
}

try {
	// sem catch
} finally {
	// roda sempre
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>try {
	throw anyType; // gera uma exceção
	// mas geralmente
	throw new Error('Whoops!'); // gera uma exceção
} catch (e if e instanceof Error) {
	// roda se jogou uma exceção
} catch (ex) {
	// roda se jogou uma exceção
} finally {
	// roda sempre
}

try {
	// sem catch
} finally {
	//
}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>try:
	raise Exception("Error") # gera uma exceção
	# ou simplesmente
	raise # gera uma exceção
except Exception as ex:
	# roda se jogou uma exceção
finally:
	# roda sempre

try:
	# sem finally
except:
	# roda se jogou uma exceção

try:
	# sem except
finally:
	# roda sempre</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Private Sub CapturaDeErro()

	' Visual Basic não possui try catch
	' Usamos labels para tratar erros
	On Error GoTo Erro

	' Faça alguma coisa e saia da função
	' antes de chegar nas linhas de tratamento de erro
	Exit Sub

' Label de erro
' Labels não podem conter espaços em branco antes dos nomes
Erro:
	' Faça alguma coisa e saia da função
	Exit Sub

	' Ou continue a execução normalmente
	Resume Next

	' Ou passe para um tratamento específico
	If Err.Number = 13 Then
		Resume ErroEspecifico

ErroEspecifico:
	Exit Sub

End Sub</code>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='async'>Async / Execução em paralelo</h2>

<!-- tasks, promises e futures, deferreds, generators, events/delegates -->


<h3 id='generators'>Generators</h3>

<h4>Yield</h4>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// <a href='https://github.com/rust-lang/rust/issues/43122'>acompanhe essa feature</a>
// e <a href='https://doc.rust-lang.org/beta/unstable-book/language-features/generators.html'>unstable docs</a></code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;coroutine&gt;

generator<span>&lt;<span>int</span>&gt;</span> iota(int n = 0) {
	while(true) {
		co_yield n++;
	}
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Kotlin</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>

<p>C# - AnimadorGenerator.cs</p>
<code class='cs'
>using System.Collections.Generic;

namespace MarcoLuglio.ClosureGeneratorExample {

	public class AnimadorGenerator {

		// os parâmetros não podem ser ref nem out
		public IEnumerable&lt;float&gt; Animar(float inicio, float fim, int tempo) {

			var tempoAtual = 1;
			var delta = (fim - inicio) / tempo;
			var passo = 0f;

			while (tempoAtual &lt;= tempo) {
				try {
					passo = fim - (delta * (tempo - tempoAtual));
					tempoAtual += 1;
					yield return passo;
				} finally {
					// não posso usar catch com generators
				}
			}

			// também posso usar yield break; se quiser interromper

		}

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.ClosureGeneratorExample {

	public class MainClass {

		public static void Main(string[] args) {

			var animadorGenerator = new AnimadorGenerator();

			var animadorIterator = animadorGenerator.Animar(0, 100, 9);
			foreach (var resultado in animadorIterator) {
				Console.WriteLine(resultado);
			}

			// ou

			var animadorIterator = animadorGenerator.Animar(0, 100, 9).GetEnumerator();
			while (animadorIterator.MoveNext()) {
				var resultado = animadorIterator.Current;
				Console.WriteLine(resultado);
			}

		}

	}

}</code
>

</div>

<div class='codeblock'>

<p>JavaScript - animar.js</p>
<code class='javascript'
>'use strict';






function* animar(inicio, fim, tempo) {

	var tempoAtual = 1;
	var delta = (fim - inicio) / tempo;
	var passo = 0f;

	while (tempoAtual &lt;= tempo) {
		try {
			passo = fim - (delta * (tempo - tempoAtual));
			tempoAtual += 1;
			yield passo;
		} catch (ex) {
			//
		}
	}

}






</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>'use strict';







let animadorIterador = animar(0, 100, 9);

for (let resultado of animadorIterator) {
	console.log(resultado.value);
}

// ou

do {
	let resultado = animadorIterador.next();
	if (resultado.value || resultado.value === 0) {
		console.log(resultado.value);
	}
} while (!resultado.done)</code
>

</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>def firstn(n):
	num = 0
	while num &lt; n:
		yield num
		num += 1</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h4>Closures</h4>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>package main

import "fmt"

func intSeq() func() int {
	i := 0
	return func() int {
		i++
		return i
	}
}

func main() {

	nextInt := intSeq()

	fmt.Println(nextInt())
	fmt.Println(nextInt())
	fmt.Println(nextInt())

	newInts := intSeq()
	fmt.Println(newInts())

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>

<p>Java - AnimadorClosure.java</p>
<code class='java'
>package marcoluglio.generatorexample;

// as assinaturas possíveis das closures estão nesse pacote
import java.util.function.*;

class ClosureState {
	public int tempoAtual;
	public float delta;
	public Float passo;
}

public class AnimadorClosure {

	public static Supplier&lt;Float&gt; animar(float inicio, float fim, int tempo) {

		// variáveis capturadas na closure
		final ClosureState closureState = new ClosureState();
		closureState.tempoAtual = 1;
		closureState.delta = (fim - inicio) / tempo;
		closureState.passo = 0;

		// closure
		Supplier&lt;Float&gt; lambda = () -&gt; {
			if (closureState.tempoAtual &lt;= tempo) {
				closureState.passo = fim - (closureState.delta * (tempo - closureState.tempoAtual));
				closureState.tempoAtual += 1;
				return closureState.passo;
			}
			return null;
		};

		return lambda;

	}

}


</code
>

<p>Java - Main.java</p>
<code class='java multipart'
>
import java.util.function.*;
import marcoluglio.generatorexample.AnimadorClosure;

public class Main {

	public static void main(String[] args) {

		Supplier&lt;Float&gt; animadorClosure = AnimadorClosure.animar(0, 100, 9);
		Float resultado;

		do {
			resultado = animadorClosure.get();
			System.out.println(resultado);
		} while (resultado != null);

	}

}</code
>

<code class='java'
><strong>// PS: pra evitar ter que declarar uma classe ClosureState, eu poderia ter feito</strong>
final Object closureState = new Object() {
	public int tempoAtual;
	public float delta;
	public Float passo;
};

<strong>// mas aí para ler as propriedades eu teria que usar reflection toda a vez</strong>
Class ClosureClass = closureState.getClass();

Field TempoAtualField = ClosureClass.getDeclaredField("tempoAtual")
TempoAtualField.getInteger(closureState);

Field DeltaField = ClosureClass.getDeclaredField("delta")
DeltaField.getFloat(closureState);

Field PassoField = ClosureClass.getDeclaredField("passo")
PassoField.getFloat(closureState);</code
>

</div>

<div class='codeblock'>

<p>C# - AnimadorClosure.cs</p>
<code class='cs'
>namespace MarcoLuglio.GeneratorExample {

	// assinatura da closure
	public delegate float? Next();







	public class AnimadorClosure {

		public static Next Animar(float inicio, float fim, int tempo) {

			// variáveis capturadas na closure
			var tempoAtual = 1;
			var delta = (fim - inicio) / tempo;
			var passo = 0f;


			// closure
			Next lambda = () =&gt; {
				if (tempoAtual &lt;= tempo) {
					passo = fim - (delta * (tempo - tempoAtual));
					tempoAtual += 1;
					return passo;
				}
				return null;
			};

			return lambda;

		}

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.GeneratorExample {

	class MainClass {

		public static void Main(string[] args) {

			var animadorClosure = AnimadorClosure.Animar(0, 100, 9);
			float? resultado;

			do {
				resultado = animadorClosure();
				Console.WriteLine(resultado);
			} while (resultado != null);

		}

	}

}</code
>

</div>

<div class='codeblock'>

<p>JavaScript - animarClosure.js</p>
<code class='javascript'
>'use strict';












animar(inicio, fim, tempo) {

	// variáveis capturadas na closure
	let tempoAtual = 1;
	let delta = (fim - inicio) / tempo;
	let passo = 0;


	// closure
	let lambda = () =&gt; {
		if (tempoAtual &lt;= tempo) {
			passo = fim - (delta * (tempo - tempoAtual));
			tempoAtual += 1;
			return passo;
		}
		return;
	};

	return lambda;

}




</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>







let animadorClosure = animar(0, 100, 9);
let resultado;

do {
	resultado = animadorClosure();
	console.log(resultado);
} while (resultado || resultado === 0);</code
>

</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h4 id='functors'>Functors</h4>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// funcionalidade experimental!
// requer versão nightly

// para habilitar implementação de FnMut
#![feature(fn_traits)]
#![feature(unboxed_closures)]

struct Animar {

	fim:f32,
	tempo:i32,

	tempoAtual:i32,
	delta:f32,
	passo:f32

}

impl Animar {

	fn new(inicio:f32, fim:f32, tempo:i32) -&gt; Animar {
		Animar {
			fim,
			tempo,
			tempoAtual: 1,
			delta: (fim - inicio) / (tempo as f32),
			passo: 0.0
		}
	}

}

impl FnOnce&lt;()&gt; for Animar {

	type Output = Option&lt;f32&gt;;

	extern "rust-call" fn call_once(mut self, _args: ()) -&gt; Self::Output {
		self()
	}

}

impl FnMut&lt;()&gt; for Animar {

	extern "rust-call" fn call_mut(&mut self, _args: ()) -&gt; Option&lt;f32&gt; {

		if self.tempoAtual &lt;= self.tempo {
			let tempoPassado = (self.tempo - self.tempoAtual) as f32;
			self.passo = self.fim - (self.delta * tempoPassado);
			self.tempoAtual += 1;
			return Some(self.passo);
		}

		return None;

	}

}

fn main() {

	let mut animar = Animar::new(0.0, 100.0, 9);

	loop {

		let resultado = animar();

		match resultado {
			Some(some) =&gt; println!("{}", some),
			None =&gt; break
		}

	}

}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
	<div class='pair'>
		<div>
			<p>C++ - Animar.hpp</p>
			<code class='cpp'
>#pragma once

class Animar final {

	public:

		explicit Animar(
			float inicio,
			float fim,
			int tempo
		);

		~Animar();

		// overload de ()
		float operator()();

	private:

		float fim;
		int tempo;

		int tempoAtual;
		float delta;
		float passo;

};</code
			>
		</div>
		<div>
			<p>C++ - Animar.cpp</p>
			<code class='cpp'
>#include "Animar.hpp";

Animar::Animar(float inicio, float fim, int tempo) {
	this-&gt;fim = fim;
	this-&gt;tempo = tempo;
	tempoAtual = 1;
	delta = (fim - inicio) / tempo;
	passo = 0;
}

~Animar::Animar(float inicio, float fim, int tempo) {
	//
}

// overload de ()
float Animar::operator()() {

		if (tempoAtual &lt;= tempo) {
			passo = fim - (delta * (tempo - tempoAtual));
			tempoAtual += 1;
			return passo;
		}

		// TODO selecionar um valor melhor
		// para indicar o fim
		return 0;

	}

}</code
			>
		</div>
	</div>

	<p>C++ - Animar.hpp</p>
		<code class='cpp'
>#include "Animar.hpp"

int main(int argc, const char* argv[]) {

	auto animar = Animar(0, 100, 9);
	while (/* TODO */) {
		animar();
	}

	return 0;

}</code
		>

</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// atual não permite overload de ()
// <a href='https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md'>acompanhe essa proposta</a>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>class Animar constructor(inicio:Float, fim:Float, tempo:Int) {

	var fim:Float
	var tempo:Int

	var tempoAtual:Int
	var delta:Float
	var passo:Float

	init {
		this.fim = fim
		this.tempo = tempo
		this.tempoAtual = 1
		this.delta = (fim - inicio) / tempo
		this.passo = 0f
	}

	// overload de ()
	operator fun invoke(): Float? {

		if (this.tempoAtual &lt;= this.tempo) {
			this.passo = this.fim - (this.delta * (this.tempo - this.tempoAtual))
			this.tempoAtual += 1
			return passo
		}

		// TODO selecionar um valor melhor
		// para indicar o fim
		return null

	}

}

fun main() {

	var animar = Animar(0f, 100f, 9)

	do {
		val resultado = animar()
		println(resultado)
	} while (resultado != null)

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>class Animar(object):

	def __init__(self, inicio, fim, tempo):
		self.fim = fim
		self.tempo = tempo
		self.tempoAtual = 1
		self.delta = (fim - inicio) / tempo
		self.passo = 0

	def __call__(self):

		if (self.tempoAtual &lt;= self.tempo):
			self.passo = self.fim - (self.delta * (self.tempo - self.tempoAtual))
			self.tempoAtual += 1
			return self.passo

		return None

animar = Animar(0, 100, 9)

while True:
	result = animar()
	if result is None:
		break
	print(result)</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h4>Structs ou classes</h4>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>

<p>Java - AnimadorIterator.java</p>
<code class='java'
>package marcoluglio.generatorexample;

import java.util.Iterator;

public class AnimadorIterator implements Iterable&lt;Float&gt;, Iterator&lt;Float&gt; {

	public AnimadorIterator(float inicio, float fim, int tempo) {
		this.fim = fim;
		this.tempo = tempo;
		this.delta = (fim - inicio) / tempo;
		this.reset();
	}

	// region Interface Iterable&lt;T&gt;

	@Override // "implementação explícita"
	public Iterator&lt;Float&gt; iterator() {
		return this;
	}

	// endregion




	// region Interface Iterator&lt;T&gt;

	@Override // "implementação explícita"
	public boolean hasNext() {
		if (this.tempoAtual &lt;= this.tempo) {
			return true;
		}
		return false;
	}

	@Override // "implementação explícita"
	public Float next() {
		this.passo = this.fim - (this.delta * (this.tempo - this.tempoAtual));
		this.tempoAtual += 1;
		return this.passo;
	}

	// endregion




	private void reset() {
		this.tempoAtual = 1;
		this.passo = 0;
	}





	private final int tempo;
	private int tempoAtual;
	private final float fim;
	private final float delta;
	private float passo;

}</code
>

<p>Java - Main.java</p>
<code class='java'
>

import marcoluglio.generatorexample.AnimadorIterator;

public class Main {

	public static void main(String[] args) {

		AnimadorIterator animadorIterador = new AnimadorIterator(0, 100, 9);

		for (float resultado : animadorIterador) {
			System.out.println(resultado);
		}

	}

}</code
>

</div>


<div class='codeblock'>

<p>C# - AnimadorIterator.cs</p>
<code class='cs'
>using System.Collections.Generic;

namespace MarcoLuglio.GeneratorExample {

	public class AnimadorIterator : IEnumerable&lt;float&gt;, IEnumerator&lt;float&gt; {

		public AnimadorIterator(float inicio, float fim, int tempo) {
			this.fim = fim;
			this.tempo = tempo;
			this.delta = (fim - inicio) / tempo;
			this.Reset();
		}

		#region interface IEnumerable

		public IEnumerator&lt;float&gt; GetEnumerator() { // implementação implícita
			return this;
		}

		System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() {
			return this; // implementação explícita --^
		}

		#endregion

		#region interface IEnumerator

		public bool MoveNext() { // implementação implícita

			if (this.tempoAtual &lt;= this.tempo) {
				this.passo = this.fim - (this.delta * (this.tempo - this.tempoAtual));
				this.tempoAtual += 1;
				return true;
			}

			return false;

		}

		public float Current { // implementação implícita
			get { return this.passo; }
		}

		object System.Collections.IEnumerator.Current { // implementação explícita
			get { return this.passo; }
		}

		public void Reset() { // implementação implícita
			this.tempoAtual = 1;
			this.passo = 0;
		}

		public void Dispose() { /**/ } // implementação implícita

		#endregion

		private readonly int tempo;
		private int tempoAtual;
		private readonly float fim;
		private readonly float delta;
		private float passo;

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.GeneratorExample {

	class MainClass {

		public static void Main(string[] args) {

			var animadorIterator = new AnimadorIterator(0, 100, 9);

			foreach (var resultado in animadorIterator) {
				Console.WriteLine(resultado);
			}

		}

	}

}</code
>

</div>

<div class='codeblock'>

<p>JavaScript - Iterator.js</p>
<code class='javascript'
>class AnimadorIterator {

	constructor(inicio, fim, tempo) {
		Object.defineProperties(this, {
			_fim: {value: fim},
			_tempo: {value: tempo},
			_tempoAtual: {value: tempo, writable: true},
			_delta: {value: (fim - inicio / tempo)},
			_passo: {value: 0, writable: true}
		});
		Object.seal(this);
		this.reset();
	}

	reset() {
		this._tempoAtual = 1;
		this._passo = 0;
	}

	// iterador for of
	*[Symbol.iterator]() {
		if (this._tempoAtual &lt;= this.tempo) {
			this._passo = this._fim - (this._delta * (this._tempo - this._tempoAtual));
			this._tempoAtual += 1;
			yield this._passo;
		}
	}

}


































</code
>

<p>JavaScript - main.js</p>
<code class='javascript'
>







let animadorIterator = new AnimadorIterator(0, 100, 9);

for (let resultado of animadorIterator) {
	console.log(resultado);
}</code
>

</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>
</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='tasks'>Tasks e Corrotinas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'></code>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'>package main

import (
	"fmt"
	"sync"
)

// exemplo go routines e channels
func fibonacci(c, quit chan int) {
	x, y := 0, 1
	for {
		select {
			case c &lt;- x:
				x, y = y, x + y
			case &lt;- quit:
				fmt.Println("quit")
				return
		}
	}
}

// exemplo WaitGroup
type httpPkg struct{}

func (httpPkg) Get(url string) {}
var http httpPkg

func main() {

	// go routines e channels para comunicação
	c := make(chan int)
	quit := make(chan int)
	go func() {
		for i := 0; i &lt; 10; i++ {
			fmt.Println(&lt;- c)
		}
		quit &lt;- 0
	}()
	fibonacci(c, quit)


	// WaitGroup do pacote sync

	var wg sync.WaitGroup
	var urls = []string {
		"http://www.golang.org/",
		"http://www.google.com/",
		"http://www.somestupidname.com/",
	}

	for _, url := range urls {
		wg.Add(1)
		go func(url string) {
			defer wg.Done()
			http.Get(url)
		}(url)
	}

	// Espera todos os itens serem completados
	wg.Wait()

}</code
>
</div>

<div class='codeblock'>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;future&gt;
#include &lt;boost/algorithm/string.hpp&gt;

#include "taskFunction.hpp"

int main(int argc, const char* argv[]) {

	using std::async;
	using std::string;
	using std::cout;
	using std::endl;

	using MarcoLuglio::TaskExample::taskFunction;

	// alternativa 1: método
	// TODO

	// alternativa 2: função
	auto functionFuture = async(taskFunction, "função");

	// alternativa 3: lambda
	auto lambdaFuture = async([](string element) -&gt; string {
		boost::to_upper(element);
		return element;
	}, "lambda");


	// espera os Futures calcularem um valor
	// concreto antes de prosseguir
	cout &lt;&lt; functionFuture.get() &lt;&lt; endl;
	cout &lt;&lt; lambdaFuture.get() &lt;&lt; endl;

	// c++20+ tem co_return e co_await

	return 0;

}</code
>

	<div class='pair'>

		<div>

<p>C++ - taskFunction.hpp</p>
<code class='cpp'
>#pragma once

#include &lt;string&gt;

namespace MarcoLuglio {
namespace TaskExample {

	using std::string;

	string taskFunction(string element);

}
}</code
>

		</div>

		<div>

<p>C++ - taskFunction.cpp</p>
<code class='cpp'
>#include &lt;boost/algorithm/string.hpp&gt;
#include "taskFunction.hpp"


namespace MarcoLuglio {
namespace TaskExample {

	using std::string;

	string taskFunction(string element) {
		boost::to_upper(element);
		return element;
	}

}
}</code
>

		</div>

	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>

<p>Swift - Console</p>
<code class='swift'
>// libdispatch ou Grande Central Dispatch
import Dispatch

// funções auxiliares para simplificar sincronização

func check(semaforo:dispatch_semaphore_t) -&gt; Int {
	let waitResult = dispatch_semaphore_wait(
		semaforo,
		dispatch_time(DISPATCH_TIME_NOW, 1_000_000_000)
	)
	return waitResult
}

func wait(semaforo:dispatch_semaphore_t) {
	while check(semaforo) != 0 { /**/ }
}

// tasks

var element = "lambda"

let utilityQueue = dispatch_get_global_queue(
	QOS_CLASS_UTILITY,
	0
)
let semaforo = dispatch_semaphore_create(0)

dispatch_async(utilityQueue) {
	element = element.uppercaseString
	print(element)
	dispatch_semaphore_signal(semaforo)
}

// espera os blocos terminarem antes de prosseguir
wait(semaforo)

/*
Os tipos pré-definidos de queues são:
QOS_CLASS_USER_INTERACTIVE - if it should not cause the ui to lag or hang
QOS_CLASS_USER_INITIATED - if is started by ui interaction such as a click
QOS_CLASS_UTILITY - if it is a slow operation such as io
QOS_CLASS_BACKGROUND - background tasks
*/</code
>

<p>Swift - UI</p>
<code class='swift'>// libdispatch ou Grande Central Dispatch
import Dispatch

// funções auxiliares para simplificar sincronização

func check(semaforo:dispatch_semaphore_t) -&gt; Int {
	let waitResult = dispatch_semaphore_wait(
		semaforo,
		dispatch_time(DISPATCH_TIME_NOW, 1_000_000_000)
	)
	return waitResult
}

func wait(semaforo:dispatch_semaphore_t) {
	while check(semaforo) != 0 { /**/ }
}

// tasks

var element = "lambda"

let utilityQueue = dispatch_get_global_queue(
	QOS_CLASS_UTILITY,
	0
)
let semaforo = dispatch_semaphore_create(0)

dispatch_async(utilityQueue) {
	element = element.uppercaseString
	let mainQueue = dispatch_get_main_queue()
	dispatch_async(mainQueue) {
		print(element)
		dispatch_semaphore_signal(semaforo)
	}
}

// espera os blocos terminarem antes de prosseguir
wait(semaforo)</code
>

</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'></code>
</div>

<div class='codeblock'>

<p>Java - Main.java</p>
<code class='java'
>

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

public class Main {

	public static void main(String[] args) {

		// gerencia threads
		ExecutorService executor = Executors.newFixedThreadPool(2);

		// alternativa 1: interface Callable
		Task callableTask = new Task("async");
		Future&lt;String&gt; taskFuture = executor.submit(callableTask);

		// alternativa 2: lambda Callable
		String element = "lambda";
		Future&lt;String&gt; lambdaFuture = executor.submit(() -&gt; {
			return element.toUpperCase();
		});

		// alternativa 3: Threads e Futures manuais sem executor
		Task manualTask = new Task("manual");
		FutureTask&lt;String&gt; manualFuture = new FutureTask&lt;String&gt;(manualTask);
		new Thread(manualFuture).start();

		try {

			// espera os Futures calcularem um valor
			// concreto antes de prosseguir
			System.out.println(taskFuture.get());
			System.out.println(lambdaFuture.get());
			System.out.println(manualFuture.get());

			// encerra as threads do executor
			executor.shutdown();

		} catch (InterruptedException e) {
			// fazer alguma coisa
		} catch (ExecutionException e) {
			// fazer alguma coisa
		}

	}

}</code
>

<p>Java - Task.java</p>
<code class='java'
>package marcoluglio.taskexample;

import java.util.concurrent.Callable;

public class Task implements Callable&lt;String&gt; {

	public Task(String element) {
		this.element = element;
	}

	@Override
	public String call() throws Exception {
		return this.element.toUpperCase();
	}

	String element;

}</code
>

</div>

<div class='codeblock'>

<p>Java Android - AsyncTask.java</p>
<code class='java'
>// TODO AsyncTask</code
>
</div>

<div class='codeblock'>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.TaskExample {

	class MainClass {

		public static void Main(string[] args) {
			// async não pode ser usado no método
			// main, então chamamos no objeto
			var mainObject = new MainClass();
			mainObject.main();
		}

		private async void main() {
			var promise = new Promise(@"some value");
			var resultado = await promise.GetResultAsync();
			Console.WriteLine(@"esperou " + resultado);
		}

	}

}</code
>

<p>C# - Promise.cs</p>
<code class='cs'
>using System.Threading.Tasks;

namespace MarcoLuglio.TaskExample {

	public class Promise {

		public Promise(string element) {
			this.element = element;
		}

		public async Task&lt;string&gt; GetResultAsync() {
			return this.element.ToUpper();
		}

		string element;

	}

}</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// async await
async function workAsync(element) {
	return element.toUpperCase();
}

await workAsync('some value');

// ou

workAsync('some value')
	.then((result) =&gt; {
		console.log(result);
	});



// explicit promises

function workAsync(element) {
	return new Promise((resolve, reject) =&gt; {
		resolve(element.toUpperCase());
	});
}

workAsync('some value')
	.then((result) =&gt; {
		console.log(result);
	});</code
>
</div>

<div class='codeblock'>

<p>Python</p>
<code class='python'
>import asyncio

async def main():
	print('hello')
	await asyncio.sleep(1)
	print('world')

asyncio.run(main())</code
>

</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='threads'>Threads</h3>

<div class='comparison'>


<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// queue
use std::collections::vec_deque::VecDeque;

// threads
use std::thread;

// channels
use std::sync::mpsc::{Sender, Receiver};
use std::sync::mpsc;

fn uppercase(c:char) -&gt; char {
	c.to_uppercase().next().unwrap()
}

fn main() {

	let mut model = VecDeque::new();
	model.push_back("dislexicos");
	model.push_back("devem");
	model.push_back("ler");
	model.push_back("frases");
	model.push_back("assim");

	let (senderChannel, receiverChannel)
		:(Sender&lt;&amp;str&gt;, Receiver&lt;&amp;str&gt;)
		= mpsc::channel();

	// envia dados pelo canal
	for element in model {
		senderChannel.send(element);
	}

	// fecha o canal
	drop(senderChannel);

	// alternativa 1: thread e lambda
	// move captura as variáveis no mesmo escopo
	// da closure por valor ao invés de por referência
	let lambda_thread = thread::spawn(move || {

		let mut element:&amp;str;
		let mut elementUppercase:String;

		// roda até o canal ser fechado
		for element in receiverChannel {
			let uppercase:String = element
				.chars()
				.map(uppercase)
				.collect();
			println!("{:?}", uppercase);
		}

		// poderíamos usar receiverChannel.recv().unwrap()
		// e receiverChannel.try_recv().unwrap()

	});

	// alternativa 2: Builder e lambda
	let mut builderElement = "builder";
	let builder_thread = thread::Builder::new()
		.name("builder thread".to_string())
		.spawn(move || {

		let uppercase:String = builderElement
			.chars()
			.map(uppercase)
			.collect();
		println!("{:?}", uppercase);

	});

	// espera as threads terminarem antes de prosseguir
	lambda_thread.join();
	builder_thread.unwrap().join();

}</code
>
</div>



<div class='codeblock'>
<p>Go</p>
<code class='cpp'
>// Não possui threads
// mas veja o exemplo
// acima para sincronização
// de corrotinas</code
>
</div>



<div class='codeblock'>

<p>C++ - main.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;thread&gt;
#include &lt;boost/algorithm/string.hpp&gt;
#include "cout_mutex.hpp" // para simplicidade do exemplo
#include "Model.hpp"
#include "ParallelWorker.hpp"
#include "parallelWorkerFunction.hpp"

int main(int argc, const char* argv[]) {

	using std::string;
	using std::cout;
	using std::endl;

	using std::make_unique;
	using std::thread;
	using std::ref;

	using MarcoLuglio::ThreadExample::Model;
	using MarcoLuglio::ThreadExample::ParallelWorker;
	using MarcoLuglio::ThreadExample::parallelWorkerFunction;

	// memória compartilhada entre as threads
	// como as threads não viverão mais que
	// a main thread, posso usar unique_ptr
	auto dataQueue = make_unique<span>&lt;<span>Model</span>&gt;</span>();
	dataQueue.Push("dislexicos");
	dataQueue.Push("devem");
	dataQueue.Push("ler");
	dataQueue.Push("frases");
	dataQueue.Push("assim");

	// alternativa 1: método
	auto worker{ParallelWorker(*dataQueue)};
	thread parallelThread{&amp;ParallelWorker::Work, worker};

	// alternativa 2: função
	thread functionThread{parallelWorkerFunction, ref(*dataQueue)};

	// alternativa 3: lambda
	thread lambdaThread{[](Model&amp; dataQueue){
		string element;
		auto sair = false;
		while (!sair) {
			element = dataQueue.Next();
			// deixa a thread terminar naturalmente
			if (element == "") {
				sair = true;
				continue;
			}
			boost::to_upper(element);
			cout_mutex.lock();
			cout &lt;&lt; element &lt;&lt; endl;
			cout_mutex.unlock();
		}
	}, ref(*dataQueue)};

	// espera as threads terminarem antes de prosseguir
	parallelThread.join();
	functionThread.join();
	lambdaThread.join();

}</code
>

<code class='cpp'
><strong>// TODO verificar isso tudo</strong>
<strong>// PS: unique_ptr devolve um ponteiro não copiável quando desreferenciado</strong>
auto dataQueue = make_unique<span>&lt;<span>Model</span>&gt;</span>();
auto copia = *dataQueue; // erro: não copiável
<strong>// por isso precisamos passar para as threads, um ponteiro do ponteiro</strong>
<strong class='comment small'>// ou uma referência do ponteiro</strong>
auto referenciaDoPonteiro*&amp; = ref(dataQueue);
<strong>// ou ainda, uma referência copiável do valor apontado</strong>
auto referencia&amp; = ref(*dataQueue);</code
>


	<div class='pair'>

		<div>

		<p>C++ - Model.hpp</p>
<code class='cpp'
>#pragma once

#include &lt;string&gt;
#include &lt;queue&gt;
#include &lt;thread&gt;

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;
	using std::queue;
	using std::mutex;

	// C++ possui classes nativas com acesso
	// sincronizado, mas não as utilizei para
	// demonstrar o uso de locks manuais
	class Model final {

	public:
		Model();
		~Model();
		void Push(string);
		string Next();

	private:

		queue<span>&lt;<span>string</span>&gt;</span> dataQueue;

		/// Lock simples explícita para sincronização
		mutex modelLock;

	};

}
}</code
>

		</div>

		<div>

<p>C++ - Model.cpp</p>
<code class='cpp'
>#include &lt;string&gt;
#include &lt;queue&gt;
#include &lt;thread&gt;
#include "Model.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;
	using std::queue;
	using std::lock_guard;
	using std::mutex;

	Model::Model() {
		dataQueue = <span>queue&lt;<span>string</span>&gt;</span>();
	};

	Model::~Model() {
		//
	};

	void Model::Push(string) {
		// só a main thread insere, então
		// não precisa sincronizar
		dataQueue.push(element);
	};

	string Model::Next() {
		// sincroniza o acesso das threads
		lock_guard<span>&lt;<span>mutex</span>&gt;</span> _{modelLock};
		if (!dataQueue.empty()) {
			string element = dataQueue.front();
			dataQueue.pop();
			return element;
		}
		// string não pode ser nullptr em c++
		return "";
	};

}
}</code
>

		</div>

	</div>

	<div class='pair'>

		<div>

<p>C++ - ParallelWorker.hpp</p>
<code class='cpp'
>#pragma once

namespace MarcoLuglio {
namespace ThreadExample {

	class Model;

	class ParallelWorker final {

	public:
		explicit ParallelWorker(Model&amp; model);
		~ParallelWorker();
		void Work();

	private:
		Model* dataQueue;
		std::string element;

		/// Flag para término da thread
		bool sair;

	};

}
}</code
>

		</div>

		<div>

<p>C++ - ParallelWorker.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;boost/algorithm/string.hpp&gt;
#include "cout_mutex.hpp" // para simplicidade do exemplo
#include "Model.hpp"
#include "ParallelWorker.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::cout;
	using std::endl;

	ParallelWorker::ParallelWorker(Model&amp; model) {
		dataQueue = &amp;model;
		sair = false;
	};

	ParallelWorker::~ParallelWorker() {
		//
	};

	void ParallelWorker::Work() {
		while (!sair) {
			element = dataQueue-&gt;Next();
			// deixa a thread terminar naturalmente
			if (element == "") {
				sair = true;
				continue;
			}
			boost::to_upper(element);
			cout_mutex.lock();
			cout &lt;&lt; element &lt;&lt; endl;
			cout_mutex.unlock();
		}
	};

}
}</code
>

		</div>

	</div>

	<div class='pair'>

		<div>

<p>C++ - parallelWorkerFunction.hpp</p>
<code class='cpp'
>#pragma once

namespace MarcoLuglio {
namespace ThreadExample {

	class Model;

	void parallelWorkerFunction(Model&amp; dataQueue);

}
}</code
>

		</div>

		<div>

<p>C++ - parallelWorkerFunction.cpp</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include &lt;boost/algorithm/string.hpp&gt;
#include "cout_mutex.hpp" // para simplicidade do exemplo
#include "Model.hpp"
#include "parallelWorkerFunction.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;
	using std::cout;
	using std::endl;

	void parallelWorkerFunction(Model&amp; dataQueue) {
		string element;
		auto sair = false;
		while (!sair) {
			element = dataQueue.Next();
			// deixa a thread terminar naturalmente
			if (element == "") {
				sair = true;
				continue;
			}
			boost::to_upper(element);
			cout_mutex.lock();
			cout &lt;&lt; element &lt;&lt; endl;
			cout_mutex.unlock();
		}
	}

}
}</code
>

		</div>

	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
<!--
http://www.cs.umd.edu/class/spring2010/cmsc498i/files/lectures/21_PerfConcurrency.pdf

https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/CreatingThreads/CreatingThreads.html
https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html
https://developer.apple.com/library/ios/documentation/General/Conceptual/ConcurrencyProgrammingGuide/ThreadMigration/ThreadMigration.html

https://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/pthread.3.html
-->
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>

<p>Swift - Cocoa threads</p>
<code class='swift'>import Foundation

func join(thread:NSThread) {
	while !thread.finished { /**/ }
}

public final class NSParallelWorker {

	@objc public func work() {
		// deixa a thread terminar naturalmente
		while !self.sair {
			print("parallel worker")
			self.sair = true
		}
	}

	private var sair:Bool = false

}

// foundation thread com métodos
let nsParallelWorker = NSParallelWorker()
let selector = #selector(NSParallelWorker.work)
let nsThread:NSThread = NSThread.init(
	target: nsParallelWorker,
	selector: selector,
	object: nil
	)
nsThread.start()

// espera as threads terminarem antes de prosseguir
join(nsThread)</code
>

<p>Swift - POSIX threads</p>
<code class='swift'>//int threadError = pthread_create(
//	&amp;posixThreadID,
//	&amp;attr,
//	&amp;PosixThreadMainRoutine,
//	NULL
//	);

let pThread:pthread_t;
let pThreadAttr:pthread_attr_t;
pthread_attr_init(UnsafeMutablePointer&lt;pthread_attr_t&gt;(pThreadAttr))
let threadError = pthread_create(
	UnsafeMutablePointer&lt;pthread_t&gt;(pThread),
	UnsafePointer&lt;pthread_attr_t&gt;(pThreadAttr),
	{(UnsafeMutablePointer&lt;Void&gt;) -&gt; UnsafeMutablePointer&lt;Void&gt; in
		//code
	}, nil)
// let modelLock:pthread_mutex_t =
// pthread_join(
//	pThread,
//	UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Void&gt;&gt;
//	);</code
>
<!--
usar semáforos para controlar acesso à coleção
dispatch tasks para uma única queue
usar uma queue que não modifica a coleção até processar tudo


dispatch_group_t myGroup = dispatch_group_create();
dispatch_group_async(myGroup, dispatch_get_global_queue(), ^{
	//stuff to do in the background
});

//do some stuff

dispatch_group_wait(myGroup, DISPATCH_TIME_FOREVER);
dispatch_release(myGroup);

NSTask executa um novo processo
override NSOperation :(

-->

</div>

<div class='codeblock'>

<p>Kotlin - main.kt</p>
<code class='kotlin'
>




import marcoluglio.threadexample.*

fun main() {

	// memória compartilhada entre as threads
	val dataQueue = Model()
	dataQueue.push("dislexicos")
	dataQueue.push("devem")
	dataQueue.push("ler")
	dataQueue.push("frases")
	dataQueue.push("assim")

	// alternativa 1: subclasse de Thread
	val parallelThread = ParallelThread(dataQueue)
	parallelThread.start()

	// alternativa 2: interface Runnable
	val parallelRunnable: Runnable = ParallelRunnable(dataQueue)
	val parallelRunnableThread = Thread(parallelRunnable)
	parallelRunnableThread.start()

	// alternativa 3: lambda Runnable
	// ou interface funcional Runnable
	val lambda = Runnable {
		var element: String?
		var sair = false
		while (!sair) {
			// dataQueue capturado pelo lambda
			element = dataQueue.next()
			// deixa a thread terminar naturalmente
			if (element == null) {
				sair = true
				continue
			}
			println(element.toUpperCase())
		}
	}
	val lambdaRunnable = Thread(lambda)
	lambdaRunnable.start()

	// espera as threads terminarem antes de prosseguir
	try {
		parallelThread.join()
		parallelRunnableThread.join()
		lambdaRunnable.join()
	} catch (e: InterruptedException) {
		// fazer alguma coisa
	}

}


</code
>

<p>Kotlin - Model.kt</p>
<code class='kotlin'
>package marcoluglio.threadexample

import kotlin.collections.ArrayList

public class Model {

	private var dataQueue = ArrayList&lt;String&gt;()

	// Lock simples explícita para sincronização
	private val modelLock:Any

	init {
		this.modelLock = Any()
		//this.dataQueue = new LinkedList&lt;String&gt;();
	}

	public fun push(element:String) {
		// só a main thread insere, então
		// não precisa sincronizar
		this.dataQueue.add(element)
	}

	public fun next(): String? {
		synchronized(this.modelLock) {
			if (this.dataQueue.count() > 0)
				return this.dataQueue.removeAt(0)
			else
				return null
		}
	}

}








</code
>

<p>Kotlin - ParallelThread.kt</p>
<code class='kotlin'
>package marcoluglio.threadexample

public class ParallelThread(dataQueue:Model) : Thread() {

	private val dataQueue: Model
	private var element: String? = null

	// Flag para término da thread
	private var sair = false

	init {
		this.dataQueue = dataQueue
	}

	public override fun run() {
		while (!this.sair) {
			this.element = this.dataQueue.next();
			// deixa a thread terminar naturalmente
			if (this.element == null) {
				this.sair = true;
				continue;
			}
			println(this.element?.toUpperCase());
		}
	}

}




</code
>

<p>Kotlin - ParallelRunnable.kt</p>
<code class='kotlin'
>package marcoluglio.threadexample

public class ParallelRunnable(dataQueue:Model) : Runnable {

	private val dataQueue: Model
	private var element: String? = null

	// Flag para término da thread
	private var sair = false

	init {
		this.dataQueue = dataQueue
	}

	public override fun run() {
		while (!this.sair) {
			this.element = this.dataQueue.next();
			// deixa a thread terminar naturalmente
			if (this.element == null) {
				this.sair = true;
				continue;
			}
			println(this.element?.toUpperCase());
		}
	}

}</code
>

</div>

<div class='codeblock'>

<p>Java - Main.java</p>
<code class='java'
>




public class Main {

	public static void main(String[] args) {

		// memória compartilhada entre as threads
		Model dataQueue = new Model();
		dataQueue.push("dislexicos");
		dataQueue.push("devem");
		dataQueue.push("ler");
		dataQueue.push("frases");
		dataQueue.push("assim");

		// alternativa 1: subclasse de Thread
		ParallelThread parallelThread = new ParallelThread(dataQueue);
		parallelThread.start();

		// alternativa 2: interface Runnable
		Runnable parallelRunnable = new ParallelRunnable(dataQueue);
		Thread parallelRunnableThread = new Thread(parallelRunnable);
		parallelRunnableThread.start();

		// alternativa 3: lambda Runnable
		// ou interface funcional Runnable
		Runnable lambda = () -&gt; {
			String element;
			boolean sair = false;
			while (!sair) {
				// dataQueue capturado pelo lambda
				element = dataQueue.next();
				// deixa a thread terminar naturalmente
				if (element == null) {
					sair = true;
					continue;
				}
				System.out.println(element.toUpperCase());
			}
		};
		Thread lambdaRunnable = new Thread(lambda);
		lambdaRunnable.start();

		// espera as threads terminarem antes de prosseguir
		try {
			parallelThread.join();
			parallelRunnableThread.join();
			lambdaRunnable.join();
		} catch (InterruptedException e) {
			// fazer alguma coisa
		}

	}

}</code
>

<p>Java - Model.java</p>
<code class='java'
>package marcoluglio.threadexample;

import java.util.LinkedList;

// Java possui classes nativas com acesso
// sincronizado, mas não as utilizei para
// demonstrar o uso de locks manuais
public final class Model {

	public Model() {
		this.modelLock = new Object();
		this.dataQueue = new LinkedList&lt;String&gt;();
	}

	public void push(String element) {
		// só a main thread insere, então
		// não precisa sincronizar
		this.dataQueue.add(element);
	}

	public String next() {
		// sincroniza o acesso das threads
		synchronized(this.modelLock) {
			return this.dataQueue.poll();
		}
	}

	private LinkedList&lt;String&gt; dataQueue;

	// Lock simples explícita para sincronização
	private final Object modelLock;

}







</code
>

<p>Java - ParallelThread.java</p>
<code class='java'
>

package marcoluglio.threadexample;

public final class ParallelThread extends Thread {

	public ParallelThread(Model dataQueue) {
		this.dataQueue = dataQueue;
	}

	// método "main" da thread
	@Override
	public void run() {
		while (!this.sair) {
			this.element = this.dataQueue.next();
			// deixa a thread terminar naturalmente
			if (this.element == null) {
				this.sair = true;
				continue;
			}
			System.out.println(this.element.toUpperCase());
		}
	}

	private Model dataQueue;
	private String element;

	// Flag para término da thread
	private boolean sair = false;

}</code
>

<p>Java - ParallelRunnable.java</p>
<code class='java'
>package marcoluglio.threadexample;

public final class ParallelRunnable implements Runnable {

	public ParallelRunnable(Model dataQueue) {
		this.dataQueue = dataQueue;
	}

	// método "main" da thread
	@Override
	public void run() {
		while (!this.sair) {
			this.element = this.dataQueue.next();
			// deixa a thread terminar naturalmente
			if (this.element == null) {
				this.sair = true;
				continue;
			}
			System.out.println(this.element.toUpperCase());
		}
	}

	private Model dataQueue;
	private String element;

	// Flag para término da thread
	private boolean sair = false;

}</code
>

</div>



<div class='codeblock'>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;
using System.Threading;

namespace MarcoLuglio.ThreadExample {

	public class MainClass {

		public static void Main(string[] args) {

			// memória compartilhada entre as threads
			var dataQueue = new Model();
			dataQueue.Push("dislexicos");
			dataQueue.Push("devem");
			dataQueue.Push("ler");
			dataQueue.Push("frases");
			dataQueue.Push("assim");





			// alternativa 1: método
			var worker = new ParallelWorker(dataQueue);
			var parallelThread = new Thread(worker.Work);
			parallelThread.Start();


			// alternativa 2: lambda
			var lambdaThread = new Thread(() =&gt; {
				string element;
				var sair = false;
				while (!sair) {
					// dataQueue capturado pelo lambda
					element = dataQueue.Next();
					// deixa a thread terminar naturalmente
					if (element == null) {
						sair = true;
						continue;
					}
					Console.WriteLine(element.ToUpper());
				}
			});
			lambdaThread.Start();


			// espera as threads terminarem antes de prosseguir
			parallelThread.Join();
			lambdaThread.Join();

		}

	}

}



</code
>

<p>C# - Model.cs</p>
<code class='cs'
>using System.Collections.Generic;

namespace MarcoLuglio.ThreadExample {

	// C# possui classes nativas com acesso
	// sincronizado, mas não as utilizei para
	// demonstrar o uso de locks manuais
	public sealed class Model {

		public Model() {
			this.modelLock = new object();
			this.dataQueue = new Queue&lt;string&gt;();
		}

		public void Push(string element) {
			// só a main thread insere, então
			// não precisa sincronizar
			this.dataQueue.Enqueue(element);
		}

		public string Next() {
			// sincroniza o acesso das threads
			lock (this.modelLock) {
				if (this.dataQueue.Count == 0) {
					return null;
				}
				return this.dataQueue.Dequeue();
			}
		}

		private readonly Queue&lt;string&gt; dataQueue;

		/// &lt;summary&gt;
		/// Lock simples explícita para sincronização
		/// &lt;/summary&gt;
		private readonly object modelLock;

	}

}</code
>

<p>C# - ParallelWorker.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.ThreadExample {

	public sealed class ParallelWorker {

		public ParallelWorker(Model dataQueue) {
			this.dataQueue = dataQueue;
		}

		// método "Main" da thread
		public void Work() {
			while (!this.sair) {
				this.element = this.dataQueue.Next();
				// deixa a thread terminar naturalmente
				if (this.element == null) {
					this.sair = true;
					continue;
				}
				Console.WriteLine(this.element.ToUpper());
			}
		}

		private Model dataQueue;
		private string element;

		/// &lt;summary&gt;
		/// Flag para término da thread
		/// &lt;/summary&gt;
		private bool sair = false;

	}

}</code
>

</div>



<div class='codeblock'>

<p>JavaScript - main.js</p>
<code class='javascript'
>'use strict';

// cria a worker thread de uso exclusivo
// da main thread
let webWorker = new Worker('worker.js');

// web workers não compartilham memória
// apenas trocam mensagens entre si
// e não podem acessar o DOM

// envia mensagens para a worker thread
webWorker.postMessage(['algum', 'valor']);
webWorker.postMessage([10, 20]);

// callback para recepção de mensagens
// da worker thread
webWorker.onmessage = (event) =&gt; {
	console.log(event.data);
};

// mata a thread imediatamente se quiser
// webWorker.terminate();</code
>

<p>JavaScript - worker.js</p>
<code class='javascript'
>'use strict';

// callback para recepção de mensagens
// da main thread (ui thread)
onmessage = (event) =&gt; {

	console.log(event.data[0]);
	console.log(event.data[1]);
	let result = event.data.join(' ');

	// envia mensagens para a main thread
	postMessage(result);

	// termina a thread se quiser
	// close();

};</code
>

</div>

<div class='codeblock'>

<p>JavaScript - sharedThread1.js</p>
<code class='javascript'
>'use strict';

<strong>// cria uma worker thread compartilhada</strong>
let <strong class='small'>webWorkerOp1</strong> = new <strong class='small'>SharedWorker(</strong>'worker.js'<strong class='small'>);</strong>

// envia mensagens para a worker thread compartilhada
webWorkerOp1<strong>.port</strong>.postMessage(['algum', 'valor']);
webWorkerOp1<strong>.port</strong>.postMessage([10, 20]);

// callback para recepção de mensagens
// da worker thread
webWorkerOp1<strong>.port</strong>.onmessage = (event) =&gt; {
	console.log(event.data);
};</code
>

<p>JavaScript - sharedThread2.js</p>
<code class='javascript'
>'use strict';

// cria uma worker thread compartilhada
let <strong>webWorkerOp2</strong> = new <strong>SharedWorker(</strong>'worker.js'<strong>);</strong>

// envia mensagens para a worker thread compartilhada
webWorkerOp2<strong>.port</strong>.postMessage(['misturar', 2]);
webWorkerOp2<strong>.port</strong>.postMessage([10, 20]);

// callback para recepção de mensagens
// da worker thread
webWorkerOp2<strong>.port</strong>.onmessage = (event) =&gt; {
	console.log(event.data);
};</code
>

<p>JavaScript - worker.js</p>
<code class='javascript'
>'use strict';

<strong>onconnect = (event) =&gt; {</strong>

	<strong>let port = event.ports[0];</strong>

	// callback para recepção de mensagens
	// da main thread (ui thread)
	<strong>port.</strong>onmessage = (event) =&gt; {

		console.log(event.data[0]);
		console.log(event.data[1]);
		let result = event.data.join(' ');

		// envia mensagens para a main thread
		<strong>port.</strong>postMessage(result);

		// termina a thread se quiser
		// close();

	};

<strong>};</strong></code
>

</div>

<div class='codeblock'>

<p>Python</p>
<code class='python'
>import threading
import time

class myThread (threading.Thread):

	def __init__(self, threadID, name):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = counter

	def run(self):
		threadLock.acquire()
		# TODO
		threadLock.release()

threadLock = threading.Lock()
threads = []

thread1 = myThread(1, 'Thread-1')
thread2 = myThread(2, 'Thread-2')

threads.append(thread1)
threads.append(thread2)

for t in threads:
	t.start()

for t in threads:
	t.join()

#def main():
#	x = threading.Thread(target=thread_function, args=(1,))
#	x.start()
#	x.join()</code
>

</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<ol>
	<li>C#</li>
	<li>C++</li>
	<li>JavaScript</li>
	<li>Java</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='diretivas'>Diretivas do compilador / Pré-processador</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// TODO rust tem vários atributos
// TODO macros também são pré-processados

// compilação condicional com #cfg é um deles

// copiado de <a rel='external nofollow' href='http://rustbyexample.com/attribute/cfg.html'>rust by example</a> e <a rel='external nofollow' href='http://doc.rust-lang.org/reference.html#conditional-compilation'>docs oficiais</a>

#[cfg(...)]
#[cfg(target_os = "macos")]
#[cfg(any(foo, bar))]
#[cfg(all(unix, target_pointer_width = "32"))]
#[cfg(not(foo))]

#[cfg(target_os = "linux")]
fn are_you_on_linux() {
	println!("You are running linux!")
}

// function only gets compiled if target OS is *not* linux
#[cfg(not(target_os = "linux"))]
fn are_you_on_linux() {
	println!("You are *not* running linux!")
}

fn main() {
	are_you_on_linux();

	println!("Are you sure?");
	if cfg!(target_os = "linux") {
		println!("Yes. It's definitely linux!");
	} else {
		println!("Yes. It's definitely *not* linux!");
	}
}

/*
debug_assertions - Enabled by default when compiling
without optimizations. This can be used to enable extra
debugging code in development but not in production.
For example, it controls the behavior of the
standard library's debug_assert! macro.

target_arch = "..." - "x86", "x86_64", "mips",
"powerpc", "powerpc64", "arm", or "aarch64".

target_endian = "..." - "little", "big".
target_env = ".." - musl, msvc, gnu or blank
target_family = "..." - "unix" or "windows".

target_os = "..." - "windows", "macos", "ios", "linux",
"android", "freebsd", "dragonfly", "bitrig" , "openbsd"
or "netbsd".

target_pointer_width = "..." - "32" or "64"
target_vendor = "..." - apple, pc, "unknown".

test - Enabled when compiling the test harness
(using the --test flag).

unix - See target_family.
windows - See target_family.
*/</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>//go:noescape
//go:uintptrescapes
//go:noinline
//go:norace
//go:nosplit
//go:linkname localname [importpath.name]

//line :line
//line :line:col
//line filename:line
//line filename:line:col
/*line :line*/
/*line :line:col*/
/*line filename:line*/
/*line filename:line:col*/</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;iostream&gt;
#include "somelib.h"

#pragma once

#ifndef __some_identifier__
#define __some_identifier__
// rest of code
#endif</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>#include &lt;iostream&gt;
#include "somelib.h"



#ifndef __some_identifier__
#define __some_identifier__
// rest of code
#endif</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>/*
os() OSX, iOS, watchOS, tvOS, Linux
arch() x86_64, arm, arm64, i386
swift() &gt;= followed by a version number
*/

#if os(iOS) &amp;&amp; !swift(&gt;= 2)
	// statements
#elseif os(OSX)
	// statements
#else
	// statements
#endif</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
-
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// não podem ter whitespace antes!

#if DEBUG
	//
#elif TRACE
	//
#else
	//
#endif

// TODO ver oq o visual studio fornece

#define TESTE

#if TESTE

#warning TESTE is defined
// ou
#error TESTE is defined

#endif

#undef TESTE

// desabilitar avisos do compilador
#pragma warning disable 414, 3021
[CLSCompliant(false)]
public class C {
	static void Main() {}
}
#pragma warning restore 414, 3021

// garantir checksums de arquivos
#pragma checksum "filename.cs" "{3673e4ca-6098-4ec1-890f-8fceb2a794a2}" "{012345678AB}"
//                                         guid --^           checksum bytes --^

// #line é mais usado por source generators

// força step over pelo debugger
#line hidden

#line 837 "Meio inútil"
#line default</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict'; // modo estrito</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Option Compare
Option Explicit

#Const DEBUG = 1

#If DEBUG = 1 Then
	'Código de debug
#Else
	'Código normal
#End If</code>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tuples'>Tuples</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>let some_tuple = (1u8, 2u16, 2f32);
some_tuple.0;</code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>#include &lt;tuple&gt;

auto valores{std::make_tuple(3.8, 'A', "Lisa Simpson")};
auto valoresCpp17{1, -1};

std::get&lt;0&gt;(valores);</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>let someTuple: (Double, Double, Double) = (3.14159, 2.71828, 1.1)
someTuple.0
// lembrando que uma tuple vazia em swift significa Void
// () &gt; ()
// () &gt; Void</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// tuple literals - C# 7+
var population = ("New York", 7891957, 7781984); // com índices // TODO verificar isso
var population = (a:"New York", b:7891957, c:7781984); // com nomes // TODO verificar isso

// tuple classes
var population = new Tuple&lt;string, int, int&gt;("New York", 7891957, 7781984);
population.Item1;</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>Rust / Swift</li>
	<li>C++ / C#</li>
</ol>

<p>Rust e Swift lidam com <em>tuples</em> de modo bastante integrado à linguagem.<br />
C++ e C# tratam <em>tuples</em> como se fossem uma funcionalidade construída sobre o paradigma de orientaçµão à objetos.
</p>

</section>



<section>

<h2 id='enumeradores'>Enumeradores</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>enum WithoutValues {
	A,
	B,
	C
}

// podemos misturar os tipos
enum WithValues {
	A(i32),
	B(i32, i32),
	C(String)
}

let someEnum = WithValues::B(1, 2);</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// use constantes + iota
const (
	a = 1 &lt;&lt; iota // a == 1 (iota has been reset)
	b = 1 &lt;&lt; iota // b == 2
	c = 1 &lt;&lt; iota // c == 4
)</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>enum GamePad {
	case XboxOne
	case XboxEliteSeries2
	case Dualshock4
	case DualSense
	case JoyCon
}

// implicit raw values
enum PreviousGameConsole:UInt8 {
	case Xbox360 = 0x00
	case PlayStation4 // 0x01
	case WiiU // 0x02
}

// explicit values
enum GameConsole:UInt8 {
	case XboxSeriesX = 0x00
	case PlayStation5 = 0x01
	case NintendoSwitch = 0x02
}

// to raw value
let gameConsole = GameConsoles.NintendoSwitch.rawValue // 0x02

// from raw value
let playstation5 = GameConsole(rawValue: 0x01)

// associated values of different types
enum Barcode {
	case upc(Int, Int, Int, Int)
	case qrCode(String)
}

var productBarcode = Barcode.upc(8, 85909, 51226, 3)
productBarcode = .qrCode("ABCDEFGHIJKLMNOP")

// iterable
enum Beverage:CaseIterable {
	case coffee, tea, juice
}

let numberOfChoices = Beverage.allCases.count

for beverage in Beverage.allCases {
	print(beverage)
}

// recursivamente
// TODO</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// ver Symbol</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
></code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='objetos'>Objetos</h2>



<h3 id='structs'>Structs</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// Devemos inicializar todos os campos
// da struct com a sintaxe de chaves
// antes de poder usá-la
pub struct ResultadoCaixa {
	pub total:i32,
	pub valorPago:i32,
	pub troco:i32,
}

let mut compra2 = ResultadoCaixa{
	total: 967,
	valorPago: 1000,
	troco: 33
};


















// structs podem ter métodos
// métodos podem ou não modificar a struct
// dependendo de como recebem o argumento
// self. Se &amp;self ou &amp;mut self

impl ResultadoCaixa {

	pub fn descontarFidelidade(&amp;mut self) {
		self.total = self.calcularFidelidade();
		self.troco = self.valorPago - self.total;
	}

	fn calcularFidelidade(&amp;self) -&gt; i32 {
		self.total - 1
	}

}





// structs não herdam de um objeto comum


// Nem suportam herança


// No entanto, podem implementar traits



trait Parcelavel {
	fn parcelar(&amp;self) -&gt; [i32; 3];
}

impl Parcelavel for ResultadoCaixa {
	fn parcelar(&amp;self) -&gt; [i32; 3] {
		//
	}
}</code
>
</div>

<div class='codeblock'>
	<p>Go</p>
	<code class='go'
>package main

import "fmt"

type SomeBaseStruct struct {
	a int32
}

// structs não suportam herança
// mas tem um atalho para fazer composição

type SomeStruct struct {
	SomeBaseStruct // composição
	x int32
}

// structs tem métodos

func (s *SomeStruct) getX() int32 {
	return s.x
}

func (s *SomeStruct) setX(newValue int32) {
	s.x = newValue
}

func setToTen(s *SomeStruct) {
	s.setX(10)
}

func main() {

	s1 := SomeStruct {
		x: 2, // vírgula dangling não é um erro, é obrigatório
	}

	s2 := SomeStruct {
		x: 2} // ou então } tem que vir na mesma linha

	// mesmo que c++, se passar por valor faz uma cópia sem avisar
	setToTen(&s2)

	fmt.Println(s1.x)
	fmt.Println(s2.x)

} </code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// structs e classes são idênticas
// em C++ exceto por uma única diferença
// por padrão os campos das structs são
// publicos, e os das classes são privados</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// Objective-C usa structs do C
// que são um simples agrupamento
// de variáveis sem nenhuma outra
//funcionalidade extra
struct ResultadoCaixa {
	public var total:int
	public var valorPago:int
	public var troco:int
};

// sempre que utilizarmos o nome
// do tipo definido com uma struct
// precisamos incluir a palavra struct
// antes do nome do tipo
struct ResultadoCaixa compra1;
compra1.total = 967;
compra1.valorPago = 1000;
compra1.troco = 33;</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// Devemos inicializar todos os campos
// da struct com o inicializador gerado
// automaticamente antes de poder usá-la
public struct ResultadoCaixa {
	public var total:Int
	public var valorPago:Int
	public var troco:Int
}

let compra1 = ResultadoCaixa(
	total: 967,
	valorPago:1000,
	troco:33
)


















// structs podem ter métodos
// por padrão, métodos não podem modificar a struct
// mas podem ser marcados com a palavra mutating
// para indicar este intuito

public struct ResultadoCaixaFidelidade {

	public mutating func descontarFidelidade() {
		self.total = self.calcularFidelidade()
		self.troco = self.valorPago - self.total
	}

	private func calcularFidelidade() -&gt; Int {
		return total - 1
	}

	public var total:Int
	public var valorPago:Int
	public var troco:Int

}

// structs não herdam de um objeto comum


// Nem suportam herança


// No entanto, podem implementar protocolos
// Embora o resultado seja bastante confuso
// em termos de alocação de memória

public protocol Parcelavel {
	func parcelar():[Int]
}

public struct ResultadoCaixaCartao : Parcelavel {
	public func parcelar():[Int] {
		//
	}
}</code
>
</div>



<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
// data classes NÃO SÃO structs
// mas tem um propósito similar
public data class ResultadoCaixa(
	val total:Int,
	val valorPago:Int,
	var troco:Int
)

val compra1 = ResultadoCaixa(
	total = 967,
	valorPago = 1000,
	troco = 33
)</code
>
</div>



<div class='codeblock'>
<p>Java</p>
<code class='java'
>// java 15+
// records NÃO SÃO structs
// mas tem um propósito similar
public record ResultadoCaixa(
	int total,
	int valorPago,
	int troco
){}

var compra1 = ResultadoCaixa(
	967,
	1000,
	33
);</code
>
</div>



<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
// Se criada sem new os campos
// são iniciados manualmente
public struct ResultadoCaixa {
	public int total;
	public int valorPago;
	public int troco;
}

ResultadoCaixa compra1;
compra1.total = 967; // 9,67
compra1.valorPago = 1000; // 10,00
compra1.troco = 33; // 00,33

// Se criada com new os campos
// são iniciados no construtor
public struct ResultadoCaixaC {

	ResultadoCaixaC(int total, int valorPago) {
		this.total = total;
		this.valorPago = valorPago;
		this.troco = valorPago = total;
	}

	public int total;
	public int valorPago;
	public int troco;

}

var compra2 = new ResultadoCaixaC(967, 1000);




// structs podem ter métodos

public struct ResultadoCaixaFidelidade {

	public void descontarFidelidade() {
		this.total = this.calcularFidelidade();
		this.troco = this.valorPago = this.total;
	}

	private int calcularFidelidade() {
		return this.total - 1;
	}

	public int total;
	public int valorPago;
	public int troco;

}

// structs herdam de Object
Console.WriteLine(resultado is Object); // true

// Mas NÃO suportam heranças subsequentes
public struct ResultadoCaixaFidelidade2 : ResultadoCaixa {} // erro

// No entanto, podem implementar interfaces
// Embora o resultado seja bastante confuso
// em termos de alocação de memória

public interface Parcelavel {
	int[] Parcelar();
}

public struct ResultadoCaixaCartao : Parcelavel { // ok
	public int[] Parcelar() {
		//
	}
}


// c# 9+
// records NÃO SÃO structs
// mas tem um propósito similar
// record chegou a ser anunciado como data class antes da versão final
public record Person {
	public string FirstName { get; init; }
	public string LastName { get; init; }
}

var person = new Person("Scott", "Hunter"); // positional construction
var otherPerson = person with { LastName = "Hanselman" }; // with</code
>
</div>



<div class='codeblock'>
<p>JavaScript</p>
-
</div>



<div class='codeblock'>
<p>Python</p>
<code class='python'
># python 3.7+
# data classes NÃO SÃO structs
# mas tem um propósito similar

@dataclass(eq=True, unsafe_hash=False, frozen=False)
class ResultadoCaixa:
	total: int
	valorPago: int
	troco: int

compra1 = ResultadoCaixa(967, 1000, 33)</code
>
</div>



<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>



<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>' User Defined Types (UDTs) se parecem com structs

'Definimos o tipo num arquivo .bas separado
Public Type ResultadoCaixa
	Total As Integer
	ValorPago As Integer
	Troco As Integer
End Type

Dim compra1 As ResultadoCaixa

compra1.total = 967; ' 9,67
compra1.valorPago = 1000; ' 10,00
compra1.troco = 33; ' 00,33

'ou com With

With compra1
	.total = 967; ' 9,67
	.valorPago = 1000; ' 10,00
	.troco = 33; ' 00,33
End With</code>
</div>



<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h3 id='structscomparison'>Comparando structs</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='visualbasic'
></code
>
</div>

</div>



<h3 id='classes'>Classes</h3>

<div class='comparison large'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>C++ - ResultadoCaixa.hpp</p>
			<code class='cpp'
>#pragma once

class ResultadoCaixa final {

public:

	explicit ResultadoCaixa(const int total, const int valorPago);
	~ResultadoCaixa();
	void descontarFidelidade();

private:

	// por padrão, métodos podem modificar a classe
	// mas podem ser marcados com a palavra const
	// para proibir este intuito
	int calcularFidelidade() const;

	int total;
	int valorPago;
	int troco;

};</code
			>
		</div>

		<div>
			<p>C++ - ResultadoCaixa.cpp</p>
			<code class='cpp'
>#include "ResultadoCaixa.hpp"

ResultadoCaixa::ResultadoCaixa(const int total, const int valorPago)
	: total{total}, valorPago{valorPago} {

	this-&gt;troco = valorPago - total;
}

ResultadoCaixa::~ResultadoCaixa() {
	//
}

ResultadoCaixa::descontarFidelidade() {
	this-&gt;total = calcularFidelidade();
	this-&gt;troco = valorPago - total;
}

int ResultadoCaixa::calcularFidelidade() const {
	return total - 1;
}</code
			>
		</div>

	</div>

	<p>C++ - main.cpp</p>
	<code class='cpp'
>#include "ResultadoCaixa.hpp"

int main(int argc, const char* argv[]) {

	// aloca na stack
	auto compra1 = ResultadoCaixa(997, 1000);
	compra1.descontarFidelidade();

	// aloca na heap
	auto compra2 = new ResultadoCaixa(997, 1000);
	compra2.descontarFidelidade();

	return 0;

}</code
	>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>Objective-C - ResultadoCaixa.h</p>
			<code class='objectivec'
>#import &lt;Foundation/Foundation.h&gt;

@interface ResultadoCaixa : NSObject {
	// instance variables ou ivars
	@private
	int _troco;
}

- (void) descontarFidelidade;

- (int) calcularFidelidade;

// propriedades
@property (assign, nonatomic) int total;
@property (assign, nonatomic) int valorPago;

@end</code
			>
		</div>

		<div>
			<p>Objective-C - ResultadoCaixa.m</p>
			<code class='objectivec'
>#import "ResultadoCaixa.h"

@implementation ResultadoCaixa

	- (id) initWithTotal:(int)novoTotal eValorPago:(int)novoValorPago {
		[self init];
		// propriedades são acessadas com .
		self.total = novoTotal;
		self.valorPago = novoValorPago;
		// ivars são acessadas com -&gt;
		self-&gt;_troco = self.valorPago - self.total;
		return self;
	}

	- (void) descontarFidelidade {
		self.total = [self calcularFidelidade];
		self-&gt;_troco = self.valorPago - self.total;
	}

	- (int) calcularFidelidade {
		return self.total - 1;
	}

@end</code
			>
		</div>

	</div>

	<p>Objective-C - main.m</p>
	<code class='objectivec'
>#import "ResultadoCaixa.h"

int main(int argc, const char* argv[]) {

	ResultadoCaixa* compra1 = [[ResultadoCaixa alloc] initWithTotal:997 eValorPago:1000];
	[compra1 descontarFidelidade];

	return 0;

}</code
	>

</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>public final class ResultadoCaixa {

	init(total:Int, valorPago:Int) {
		self.total = total
		self.valorPago = valorPago
		self.troco = valorPago - total
	}

	public func descontarFidelidade() {
		self.total = self.calcularFidelidade()
		self.troco = self.valorPago - self.total
	}

	private func calcularFidelidade() -&gt; Int {
		return self.total - 1
	}

	private var total = 0
	private var valorPago = 0
	private var troco = 0

}

let compra1 = ResultadoCaixa()
compra1.descontarFidelidade()





class C {

	static func myStaticMethod() {
		//
	}

	static var myStaticProp:String

	deinit {
		//
	}

	lazy var prop:String

}

final class D : C, P, Q {

	override init() {
		super.init()
	}

	init?() {
		return nil
	}

	convenience init() {
		//
	}

	// o override pode ser mais visível!
	override internal func myMethod() {
		super.myMethod()
	}

}

final class R {

	required init() {
		//
	}

}</code
>
</div>

<div class='codeblock'>

<p>Kotlin - ResultadoCaixa.kt</p>
<code class='kotlin'
>public class ResultadoCaixa(total:Int, valorPago:Int) {

	public fun descontarFidelidade() {
		this.total = this.calcularFidelidade();
		this.troco = this.valorPago - this.troco;
	}

	private fun calcularFidelidade():Int {
		return this.total - 1;
	}

	var total = total
	val valorPago = valorPago
	var troco = valorPago - total

	lateinit var prop:String

}

// OU

public class ResultadoCaixa constructor(val total:Int, val valorPago:Int) {

	init {
		this.total = total
		this.valorPago = valorPago
		this.troco = valorPago - total
	}

	public fun descontarFidelidade() {
		this.total = this.calcularFidelidade();
		this.troco = this.valorPago - this.troco;
	}

	private fun calcularFidelidade():Int {
		return this.total - 1;
	}

	var total:Int
	val valorPago:Int
	var troco:Int

}

val compra1 = ResultadoCaixa(997, 1000)
compra1.descontarFidelidade()



open class C {
}

class D : C, P, Q {
	//
}</code
>

<p>Kotlin - Main.kt</p>
<code class='kotlin'
></code
>

</div>

<div class='codeblock'>

<p>Java - ResultadoCaixa.java</p>
<code class='java'
>public final class ResultadoCaixa {

	public ResultadoCaixa(int total, int valorPago) {
		this.total = total;
		this.valorPago = valorPago;
		this.troco = this.valorPago - this.troco;
	}

	public void descontarFidelidade() {
		this.total = this.calcularFidelidade();
		this.troco = this.valorPago - this.troco;
	}

	private int calcularFidelidade() {
		return this.total - 1;
	}

	private int total = 0;

	// variáveis final não podem ser alteradas
	// após seu valor ter sido especificado
	private final int valorPago;

	private int troco = 0;

}</code
>

<p>Java - Main.java</p>
<code class='java'
>public class Main {
	public static void main(string[] args) {
		ResultadoCaixa compra1 = new ResultadoCaixa(997, 1000);
		compra1.descontarFidelidade();
	}
}</code
>

</div>

<div class='codeblock'>

<p>C# - ResultadoCaixa.cs</p>
<code class='cs'
>public sealed class ResultadoCaixa {

	public ResultadoCaixa(int total, int valorPago) {
		this.total = total;
		this.valorPago = valorPago;
		this.troco = this.valorPago - this.troco;
	}

	public void descontarFidelidade() {
		this.total = this.calcularFidelidade();
		this.troco = this.valorPago - this.troco;
	}

	// c# 7
	private int calcularFidelidade =&gt; this.total - 1;

	private int total = 0;

	// propriedades readonly só podem ser modificadas
	// dentro do construtor
	private readonly int valorPago;

	private int troco = 0;

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>public class MainClass {
	public static void Main(string[] args) {

		// argumentos por posição
		var compra1 = new ResultadoCaixa(997, 1000);
		compra1.descontarFidelidade();

		// argumentos nomeados
		var compra2 = new ResultadoCaixa(total:997, valorPago:1000);
		compra2.descontarFidelidade();

	}
}</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>const ResultadoCaixa = class ResultadoCaixa {

	constructor(total, valorPago) {

		Object.defineProperties(this, {
			total: {value: total, writable: true},
			valorPago: {value: valorPago}, // não writable por padrão
			troco: {value: valorPago - total, writable: true}
		});

		Object.seal(this);

	}

	descontarFidelidade() {
		this.total = this.calcularFidelidade();
		this.troco = this.valorPago - this.troco;
	}

	calcularFidelidade() {
		return this.total - 1;
	}

};

const compra1 = new ResultadoCaixa(997, 1000);
compra1.descontarFidelidade();</code
>
</div>



<div class='codeblock'>
<p>Python</p>
<code class='python'
>class ResultadoCaixa:

	def __init__(self, total, valorPago):
		self.total = total
		self.valorPago = valorPago
		self.troco = self.valorPago - self.troco

	def descontarFidelidade(self):
		self.total = self.calcularFidelidade()
		self.troco = self.valorPago - self.troco

	def calcularFidelidade(self):
		return self.total - 1

compra1 = ResultadoCaixa(997, 1000)
compra1.descontarFidelidade()</code
>
</div>



<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>



<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr> - ResultadoCaixa.cls</p>
<code class='visualbasic'
>'Evento
Public Event OnChange(ByVal valorNovo As Byte, ByVal valorAntigo As Byte)

'Variável pública, pode ser acessada diretamente
Public publicVar As Boolean

'Variáveis privadas acessadas pelas propriedades
Private prop1 As Boolean
Private friendProp1 As Boolean

'Getter
Public Property Get Prop1() As Boolean
	Prop1 = prop1
End Property

'Setter de tipos primitivos usa Let
Public Property Let Prop1(ByVal value As Boolean)
	prop1 = value
End Property

'Setter de objetos usa Set

'Friend permite acesso por outros objetos do mesmo projeto / dll
'Não tem relação nenhuma com a funcionalidade em c++
Friend Property Get FriendProp1() As Boolean
	FriendProp1 = friendProp1
End Property

Public Sub Metodo1()
	RaiseEvent OnChange(1, 2)
	'Podemos nos registrar para responder à esse evento usando no nosso form
	'Private Sub Instance_OnChange(ByVal valorNovo As Byte, ByVal valorAntigo As Byte)
		'...
	'End Sub
End Sub

Public Function Metodo2() As Boolean
	'...
End Function

Friend Function MetodoFriend(Optional ByVal argOpcional1 As Boolean = True) As Boolean
	'...
End Function</code>

<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr> - Main.bas</p>
<code class='visualbasic'
>Dim compra1 As ResultadoCaixa
Set compra1 = new ResutadoCaixa
' TODO</code>

</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h3 id='objectscomparison'>Comparando objetos</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='visualbasic'
></code
>
</div>

</div>



<h4 id='gettersSetters'>Getters e setters (propriedades)</h4>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>Objective-C - A.h</p>
			<code class='objectivec'
>#import &lt;Foundation/Foundation.h&gt;

@interface A : NSObject

@property (assign, nonatomic) NSString* prop;
@property (assign, nonatomic) NSString* prop2;

@end</code
			>
		</div>

		<div>
			<p>Objective-C - A.m</p>
			<code class='objectivec'
>#import "A.h"

@implementation A

@end</code
			>
		</div>

	</div>

	<p>Objective-C - main.m</p>
	<code class='objectivec'
>#import "A.h"

int main(int argc, const char* argv[]) {

	A* a = [[A alloc] init];
	a.prop = @"";

	return 0;

}</code
	>

</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>public final class A {

	init() {
		//
	}

	var getter:String {
		return ...
	}

	var getterSetter:String {

		get {
			return self._getterSetter
		}

		set(newValue) { // ou newValue implícito set {
			self._getterSetter = newValue
		}

	}

	private _getterSetter:String

	// setter pode ser menos visível que o getter
	public private(set) var numberOfEdits = 0

	// internal
	private(set) var numberOfEdits = 0

}

var a = A()
a.prop = ""</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// as classes são final por padrão
// não confundir com sealed class
// que quer dizer outra coisa
class A {

	init {
		//
	}

	// getter
	var stringRepresentation: String
	get() = this.toString()

	// getter e setter
	var stringRepresentation2: String
	get() = this.toString()
	set(value) {
		setDataFromString(value)
	}

	// com visibilidades diferentes
	var stringRepresentation3: String
	get() = this.toString()
	private set(value) {
		setDataFromString(value)
	}

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='cs'
>// não tem getters e setters implícitos
// tem que usar métodos com convenção de nome
// começando com Get ou Set</code
>
</div>

<div class='codeblock'>

<p>C# - ResultadoCaixa.cs</p>
<code class='cs'
>public sealed class A {

	public A() {
		//
	}

	public string Prop {
		get;
		set;
	}

	// c# 7
	public string Prop2 {
		get =&gt; "";
		set =&gt; this.prop2 = value;
	}

	public string Prop3 {

		get {
			return "";
		}

		set {
			this.prop3 = value;
		}

	}

	private string prop2;
	private string prop3;

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>public class MainClass {
	public static void Main(string[] args) {

		// argumentos por posição
		var a = new A();
		a.prop = @"";
		a.prop2 = @"";

	}
}</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>const A = class A {

	constructor() {

		Object.defineProperty(
			this,
			'_prop',
			{value: null, writable: true}
		);

		Object.seal(this);

	}

	get prop() {
		return this._prop;
	}

	set prop(newValue) {
		this._prop = newValue;
	}

};

const a = new A();
a.prop = '';</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>class A:
def __init__(self, prop = 0):
	self.prop = prop

@property
def prop(self):
	return self._prop

@prop.setter
def prop(self, value):
	self._prop = value</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Option Explicit

Private m_prop As String

Private Sub Class_Initialize()
	m_name = ""
End Sub

Public Property Get Prop() as String
	Prop = m_name
End Property

Public Property Let Prop(ByVal Value As String)
	m_prop = Value
End Property</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h3 id='traits'>Traits</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>trait HasArea {
	fn is_invalid(&amp;self) -&gt; bool { !self.is_valid() }
}

impl HasArea for Circle {
	// is_invalid "herdado"
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='rust'
>// Possui atalhos para composição de objetos</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// Herança múltipla tem
// funcionalidade similar
// às traits</code
>
</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>Objective-C - Traits.h</p>
			<code class='objectivec'
			>@interface Person (Traits)
- (void) addFriend:(Person *)aFriend;
- (void) removeFriend:(Person *)aFriend;
- (void) sayHelloToFriends;
@end</code
			>
		</div>

		<div>
			<p>Objective-C - Traits.m</p>
			<code class='objectivec'
			>#import "Person+Relations.h"

@implementation Person (Traits)

- (void) addFriend:(Person*)aFriend {
	[[self friends] addObject:aFriend];
}

- (void) removeFriend:(Person*)aFriend {
	[[self friends] removeObject:aFriend];
}

- (void) sayHelloToFriends {
	for (Person* friend in [self friends]) {
		NSLog(@"Hello there, %@!", [friend name]);
	}
}

@end</code
			>
		</div>

	</div>

</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>extension ClassToBeExtended {
	// posso adicionar initializers
	// métodos
	// e propriedades
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>fun ClassToBeExtended.extensionMethod() {
	//
}

// ou como Java 8
public interface Desenhavel {
	desenhar() {
		//
	}
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public interface Desenhavel {
	default void desenhar() {
		//
	}
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public static class MyExtensions {
	public static int ExtensionMethod(this ClassToBeExtended str) {
		//
	}
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h3 id='interfaces'>Interfaces</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>trait HasArea {
	fn area(&amp;self) -&gt; f64;
}

impl HasArea for Circle {
	fn area(&amp;self) -&gt; f64 {
		std::f64::consts::PI * (self.radius * self.radius)
	}
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// Se uma struct possui todos os métodos
// listados na interface, ele automaticamente
// implementa uma interface sem precisar
// declarar explicitamente

import (
	"math"
)

type HasArea interface {
	Area() float64
}

type Circle struct {
	radius float64
}

func (c *Circle) Area() float64 {
	return math.Pi * (c.radius * c.radius)
}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// use herança múltipla</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>@protocol A

	- (NSInteger)requiredMethod;
	- (NSInteger)anotherRequiredMethod;
	@property (nonatomic, assign) NSInteger aProp;

	@optional

	- (NSInteger)optionalMethod;

	// required methods again
	@required

	- (NSInteger)requireMethodAfterOptional;

@end

@protocol B
	//
@end

@protocol C &lt;A&gt;
	//
@end

@protocol D &lt;A, B&gt;
	//
@end

@interface : NSObject &lt;C, D&gt;
	@synthesize aProp
@end</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// public internal private

// interfaces

protocol P {
	// pode conter variáveis e métodos
	func someMethod() -&gt; int
}

protocol Q {
	//
}

// implementação default
// com extension methods
extension P { // where Element: Equatable { // podemos passar condições se precisar
	func someMethod() -&gt; {
		return 1
	}
}

// structs

struct S : P, Q {

	// para structs, o padrão dos métodos
	// é ser const
	func constMethod() {
		//
	}

	mutating func structMethod() {
		//
	}

}

final class D : C, P, Q {

	override init() {
		super.init()
	}

	init?() {
		return nil
	}

	convenience init() {
		//
	}

	// o override pode ser mais visível!
	override internal func myMethod() {
		super.myMethod()
	}

}

let o2 = D()</code
>
</div>



<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>interface A {

	fun foo() { print("A") }
	fun bar()

	val prop: Int // abstract

	val propertyWithImplementation: String
		get() = "foo"

}

interface B {
	fun foo() { print("B") }
	fun bar() { print("bar") }
}

interface I : B {
	//
}

class C : A {
	override fun bar() { print("bar") }
}

class D : A, B {

	override fun foo() {
		super&lt;A&gt;.foo()
		super&lt;B&gt;.foo()
	}

	// se as interfaces tiverem
	// implementações default
	// de métodos com a mesma assinatura
	// é obrigatório redefiní-lo na classe
	override fun bar() {
		super&lt;B&gt;.bar()
	}

}</code
>
</div>



<div class='codeblock'>
<p>Java</p>
<code class='java'
>interface A {

	// método estático
	static public int someStaticMethod() {
		return 1;
	}

	// método virtual
	int someMethod();

}

interface B {

	// método virtual
	int someOtherMethod();

	// método default
	// é sempre público também
	// java 8+
	default int anotherMethod() {
		return 1;
	}

}

class C implements A, B {

	// se as interfaces tiverem
	// implementações default
	// de métodos com a mesma assinatura
	// é obrigatório redefiní-lo na classe

}</code
>
</div>



<div class='codeblock'>
<p>C#</p>
<code class='cs'
>interface IA {

	// método estático
	static public int someStaticMethod() {
		return 1;
	}

	// método virtual
	int someMethod();

}

interface IB {

	// método virtual
	int someOtherMethod();

	// método default
	// c# 8+
	int anotherMethod() {
		return 1;
	}

	// TODO interfaces agora podem
	// ter métodos e pripriedades
	// private, protected, etc...

}

class C : IA, IB {

	// se as interfaces tiverem
	// implementações default
	// de métodos com a mesma assinatura
	// é obrigatório redefiní-lo na classe

}</code
>
</div>



<div class='codeblock'>
<p>JavaScript</p>
-
</div>



<div class='codeblock'>
<p>Python</p>
-
</div>



<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>



<div class='codeblock'>

<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr> IA.cls</p>
<code class='visualbasic'
>[File: IA.cls, Instancing: PublicNotCreatable]
Option Explicit

Public Property Get Name() As String
End Property</code
>

<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr> - C.cls</p>
<code class='visualbasic'
>[File: C.cls, Instancing: Private]
Option Explicit
Implements IA

Private m_name As String

Private Sub Class_Initialize()
	m_name = ""
End Sub

Public Property Get Name() As String
	Name = m_name
End Property</code
>

<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr> - Module.bas</p>
<code class='visualbasic'
>[File: Module1.bas]
Option Explicit

Public Sub TestInterface()
	Dim someObject As New C
	someObject.Name = "John"
End Sub</code
>

</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h3 id='heranca'>Herança</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>trait Foo {
	fn foo(&amp;self);
}

trait Bar {
	fn bar(&amp;self);
}

trait FooBar : Foo + Bar {
	fn foobar(&amp;self);
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// não suporta herança,
// mas tem um atalho para composição</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>class A {
	//
}

class B : A {
	//
}

class C : A {
	//
}

// herança múltipla
// usar herança virtual para diminuir
// problemas com ambiguidade
class D final : B, C {
	// super
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>@interface A : NSObject
	//
@end

@interface B : A
	// super
@end</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>class C {

	static func myStaticMethod() {
		//
	}

	static var myStaticProp:S

	init() {
		//
	}

	deinit {
		//
	}

	private func myMethod() {
		self.prop
	}

	var getter:S {
		return ...
	}

	var getterSetter:S {

		get {
			return self._getterSetter
		}

		set(newValue) { // ou newValue implícito set {
			self._getterSetter = newValue
		}

	}

	lazy var prop:S

	private _getterSetter:S

	// setter pode ser menos visível que o getter
	public private(set) var numberOfEdits = 0

	// internal
	private(set) var numberOfEdits = 0

}

final class R : C {

	required init() {
		// super
	}

}

let o1 = C()
let o2 = D()</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>open class A() {
	//
}

class B() : A() {
	// super
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>class A {
	//
}

final class B extends A {
	// super
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>class A {
	//
}

sealed class B : A {
	// base
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>class A {
	//
}

class B extends A {
	constructor() {
		super(); // TODO verificar
		Object.seal(this);
	}
}

// ou

let a = {};

let b = Object.create(a, {});</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>class A:

class B(A):

class C(A):

# herança múltipla
# veja C3 para resolução
# de métodos com mesma assinatura
class D(B, C):
	pass # super()</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<section>

<h3 id='classesabstratas'>Classes abstratas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>class AbstractClass {

	// virtual e =0 fazem essa função ser puramente virtual
	// o que torna a classe abstrata
	virtual void AbstractMemberFunction() = 0;

	// uma classe abstrata ainda pode conter outros tipos de métodos
	// e atributos
	virtual void NonAbstractMemberFunction1(); // Virtual function.
	void NonAbstractMemberFunction2();

};</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>abstract class A {
	//
}

// uma classe abstrata pode ser inserida
// no meio de uma cadeia de herança

open class B {
	open fun someMethod() {}
}

abstract class C : B() {
	abstract override fun someMethod()
}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>abstract class A {
	//
}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>abstract class A {
	//
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>from abc import ABC

class AbstractBaseClass(ABC):
	pass

# ou

class AbstractBaseClass(ABC):

	@abstractmethod
	def my_abstract_method(self, ...):
		#

	@property
	@abstractmethod
	def my_abstract_property(self):
		#</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='visualbasic'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<h3 id='classesAnonimas'>Classes Anônimas</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
-
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>
<p>Swift</p>
-
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>public final class MainActivity : AppCompatActivity() {

	override fun onCreate(savedInstanceState:Bundle?) {

		super.onCreate(savedInstanceState)

		this.txtValorMes!!.addTextChangedListener(<strong>object : TextWatcher {</strong>


			override fun beforeTextChanged(s:CharSequence, start:Int, count:Int, after:Int) { /**/}


			override fun onTextChanged(s:CharSequence, start:Int, before:Int, count:Int) {
				<strong class='comment small'>// this@ acessa o escopo nomeado</strong>
				<strong class='small'>this@MainActivity.mainProperty</strong>
			}


			override fun afterTextChanged(s:Editable) { /**/ }

		<strong>}</strong>)

	}

	private var mainProperty:Int

}</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public final class MainActivity extends AppCompatActivity {

	public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState)

		this.txtValorMes.addTextChangedListener(<strong>new TextWatcher {</strong>

			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) { /**/ }

			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
				<strong class='comment small'>// Container.this acessa o escopo externo</strong>
				<strong class='small'>Container.this.mainProperty;</strong>
			}

			@Override
			public void afterTextChanged(Editable s) { /**/ }

		<strong>}</strong>)

	}

	private int mainProperty;

}</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// C# tem anonymus types
// que só podem ter atributos e nada mais</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// JavaScript não tem classes
// apenas objetos
// Objetos anônimos podem
// ser criados facilmente
// com a sintaxe {}</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># ver https://docs.python.org/3/library/types.html</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2>Resolução de tipos</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// ver "trait objects" na doc oficial
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// dynamic dispatch
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// static e dynamic dispatch
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='tipogenerico'>Tipo Genérico</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>pub struct Generica&lt;T&gt; {
	// valor padrão para T é Default::default()
	propriedadeGenerica: T
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>template &lt;class T&gt;
class Generica final {
	T propriedadeGenerica;
}</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>@interface Generica&lt;__covariant ObjectType&gt; : NSObject
	@property (assign, nonatomic) ObjectType propriedadGenerica;
@end

@interface HerdaDeU&lt;__covariant ObjectType:U *&gt; : NSObject
@end

// TODO __contravariant tb pode ser usado?

// usa type erasure :(</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>public final class Generica&lt;T&gt; {
	// TODO qual é o valor padrão de T?
	private T propriedadeGenerica// = [Element]()
}

public final class Generica2Tipos&lt;T, U&gt; {
	//
}

public final class HerdaDeU&lt;T : U&gt; {
	//
}

public final class Restricoes&lt;T : U&gt; where T.Item == U.Item {
	//
}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>public class Generica&lt;T&gt;() {
	//
}

// TODO ver where, in e out

// usa type erasure :(</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>public final class Generica&lt;T&gt; {
	// valor padrão para T é null
	private T propriedadeGenerica = null;
}

Generica gen1 = new Generica&lt;Integer&gt;();


public final class Generica2Tipos&lt;T, U&gt; {
	//
}

Generica2Tipos gen2 = new Generica2Tipos&lt;Integer, Float&gt;();

public final class HerdaDeU&lt;T extends U&gt; {
	//
}

public final class RegrasCombinadas&lt;T extends U &amp; V&gt; {
	//
}

public final class Coringa&lt;?&gt; {
	// ou wildcard, permite qquer coisa
}

public final class CoringaTipado&lt;? extends Number&gt; {
	// pois Generica&lt;Integer&gt; não herda de Generica&lt;Number&gt;
	// mas o wild card CoringaTipado&lt;? extends Number&gt;
	// permite CoringaTipado&lt;Integer&gt;
}

// usa type erasure, permitindo bugs com casts etc.</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>public sealed class Generica&lt;T&gt; {
	// valor padrão para T é default(T)
	private T propriedadeGenerica = default(T);
}

var gen1 = new Generica&lt;int&gt;();


public sealed class Generica2Tipos&lt;T, U&gt; {
	//
}

var gen2 = new Generica2Tipos&lt;int, float&gt;();


public sealed class SoValueType&lt;T&gt; where T : struct {
	//
}

var gen3 = new SoValueType&lt;int&gt;();


public sealed class SoReferenceType&lt;T&gt; where T : class {
	//
}

var gen4 = new SoReferenceType&lt;object&gt;();


public sealed class PossuiConstrutorPublicoPadrao&lt;T&gt; where T : new() {
	//
}

public sealed class HerdaDeU&lt;T&gt; where T : U {
	//
}

public sealed class RegrasCombinadas&lt;T&gt; where T : U, V, new() {
	//
}</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// tipagem dinâmica
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>from typing import TypeVar, Generic

T = TypeVar('T')
S = TypeVar('S', int, str)

class StrangePair(Generic[T, S]):

#

from typing import TypeVar, Generic
from logging import Logger

T = TypeVar('T')

class LoggedVar(Generic[T]):
	def __init__(self, value: T, name: str, logger: Logger) -&gt; None:
		self.name = name
		self.logger = logger
		self.value = value

	def set(self, new: T) -&gt; None:
		self.log('Set ' + repr(self.value))
		self.value = new

	def get(self) -&gt; T:
		self.log('Get ' + repr(self.value))
		return self.value

	def log(self, message: str) -&gt; None:
		self.logger.info('%s: %s', self.name, message)</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='operatoroverload'>Operator Overload</h2>

<div class='comparison'>

<div class='codeblock'>

<p>Rust - main.rs</p>
<code class='rust'
>mod MusicNote;
mod Enumerators;

use Enumerators::Step;
use Enumerators::Semitone;

fn main() {

	let mut musicNote = MusicNote::MusicNote {
		step: Step::Do,
		semitone: Default::default()
	};
	musicNote = musicNote + Semitone::Sharp;

	println!("{}", musicNote); // Do♯

}</code
>

<p>Rust - MusicNote.rs</p>
<code class='rust'
>use std::ops::Add;
use std::fmt;

use Enumerators::Step;
use Enumerators::Semitone;

pub struct MusicNote {

	/*pub Step Step {
		get;
		private set;
	}

	pub Semitone Semitone {
		get;
		set;
	}*/

	pub step:Step,

	pub semitone:Semitone

}

<strong>impl Add&lt;Semitone&gt; for MusicNote {</strong>

	type Output = MusicNote;

	<strong>fn add(self, rightHandSide:Semitone) -&gt; MusicNote {</strong>

		if rightHandSide == Semitone::None {
			return self;
		}

		let mut newStep = self.step;
		let mut newSemitone = rightHandSide;

		if newSemitone == Semitone::Sharp
			&amp;&amp; (newStep == Step::Mi || newStep == Step::E)
			{

			newStep = Step::Fa;
			newSemitone = Semitone::None;

		} else if newSemitone == Semitone::Flat
			&amp;&amp; (newStep == Step::Fa || newStep == Step::F)
			{

			newStep = Step::Mi;
			newSemitone = Semitone::None;

		}

		// Rest of add logic here

		<strong>return MusicNote { step: newStep, semitone: newSemitone }</strong>

	<strong>}</strong>

<strong>}</strong>

impl fmt::Display for MusicNote {
	fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {
		write!(formatter, "{}{}", self.step, self.semitone)
	}
}</code
>

<p>Rust - Enumerators.rs</p>
<code class='rust'
>use std::default::Default;
use std::fmt;

// Rust não permite que uma mesma literal
// seja atribuído a dois valores diferentes
// Do = 1, C = 1
#[derive(PartialEq, Eq)]
pub enum Step {

	// solfèje
	Do,
	Re,
	Mi,
	Fa,
	Sol,
	La,
	Si,

	// abc
	C,
	D,
	E,
	F,
	G,
	A,
	B

}

impl fmt::Display for Step {
	fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {
		match *self {
			Step::Do  | Step::C =&gt; write!(formatter, "Do"),
			Step::Re  | Step::D =&gt; write!(formatter, "Re"),
			Step::Mi  | Step::E =&gt; write!(formatter, "Mi"),
			Step::Fa  | Step::F =&gt; write!(formatter, "Fa"),
			Step::Sol | Step::G =&gt; write!(formatter, "Sol"),
			Step::La  | Step::A =&gt; write!(formatter, "La"),
			Step::Si  | Step::B =&gt; write!(formatter, "Si")
		}
	}
}

#[derive(PartialEq, Eq)]
pub enum Semitone {
	None = 127,
	Natural = 0,
	DoubleFlat = -2,
	Flat = -1,
	Sharp = 1,
	DoubleSharp = 2
}

impl Default for Semitone {
	fn default() -&gt; Semitone { Semitone::None }
}

impl fmt::Display for Semitone {
	fn fmt(&amp;self, formatter: &amp;mut fmt::Formatter) -&gt; fmt::Result {
		match *self {
			Semitone::None =&gt; write!(formatter, ""),
			Semitone::Natural =&gt; write!(formatter, "♮"),
			Semitone::DoubleFlat =&gt; write!(formatter, "𝄫"),
			Semitone::Flat =&gt; write!(formatter, "♭"),
			Semitone::Sharp =&gt; write!(formatter, "♯"),
			Semitone::DoubleSharp =&gt; write!(formatter, "𝄪")
		}
	}
}</code
>

</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>

	<p>C++ - main.cpp</p>
	<code class='cpp'
	>#include &lt;iostream&gt;
#include "MusicNote.hpp"

int main(int argc, const char* argv[]) {

	using std::cout;
	using std::endl;

	using MarcoLuglio::OpOvExample::MusicNote;
	using MarcoLuglio::OpOvExample::Step;
	using MarcoLuglio::OpOvExample::Semitone;

	auto cSharp = MusicNote(Step::C, Semitone::None);
	cSharp = cSharp + Semitone::Sharp;
	cout &lt;&lt; cSharp &lt;&lt; endl; // Do♯

	auto note1 = MusicNote(Step::C);
	cout &lt;&lt; note1++ &lt;&lt; endl; // Do

	auto note2 = MusicNote(Step::C);
	cout &lt;&lt; ++note2 &lt;&lt; endl; // Do♯

	return 0;

}</code
	>

	<div class='pair'>
		<div>
			<p>C++ - MusicNote.hpp</p>
			<code class='cpp'
			>#pragma once

#include &lt;cstdint&gt;
#include &lt;string&gt;
#include "Enumerators.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	class MusicNote final {

	public:

		MusicNote(Step step, Semitone semitone = Semitone::None);

		// Não é possível declarar operator&lt;&lt; como
		// um membro da classe. Mas podemos declará-lo
		// como uma friend function, que consegue acessar
		// as propriedades privadas da classe como se
		// fosse um membro
		friend std::ostream&amp; operator&lt;&lt;(
			std::ostream&amp; os,
			const MusicNote&amp; obj
		);

		MusicNote operator+(const Semitone semitone) const;

		/// prefix increment
		MusicNote&amp; operator++();

		/// postfix increment
		MusicNote operator++(int);

		Step getStep();

		Semitone getSemitone();

	private:
		Step step;
		Semitone semitone;

	};

}
}</code
			>
		</div>
		<div>
			<p>C++ - MusicNote.cpp</p>
			<code class='cpp'
			>#include "MusicNote.hpp"

namespace MarcoLuglio {
namespace ThreadExample {

	using std::string;

	MusicNote::MusicNote(Step step, Semitone semitone)
		: step{step}, semitone{semitone} {
		//
	}

	MusicNote MusicNote::operator+(const Semitone semitone) const {

		if (semitone == Semitone::None) {
			return *this;
		}

		Step newStep = this-&gt;step;
		Semitone newSemitone = semitone;

		if (newSemitone == Semitone::Sharp
			&amp;&amp; (newStep == Step::Mi || newStep == Step::E)
			) {

			newStep = Step::Fa;
			newSemitone = Semitone::None;

		} else if (newSemitone == Semitone::Flat
			&amp;&amp; (newStep == Step::Fa || newStep == Step::F)
			) {

			newStep = Step::Mi;
			newSemitone = Semitone::None;

		}

		// Rest of add logic here

		return MusicNote(newStep, newSemitone);

	}


	MusicNote&amp; MusicNote::operator++() {
		MusicNote&amp; ref = *this;
		auto tmp = ref + Semitone::Sharp;
		this-&gt;step = tmp.getStep();
		this-&gt;semitone = tmp.getSemitone();
		return ref;
	}

	MusicNote MusicNote::operator++(int) {
		MusicNote tmp{*this}; // copy
		this-&gt;operator++(); // pre-increment
		return tmp; // return old value
	}

	Step MusicNote::getStep() {
		return this-&gt;step;
	}

	Semitone MusicNote::getSemitone() {
		return this-&gt;semitone;
	}

	std::ostream&amp; operator&lt;&lt;(
		std::ostream&amp; os,
		const MusicNote&amp; note
		) {

		os &lt;&lt; note.step &lt;&lt; note.semitone;
		return os;
	}

}
}</code
			>
		</div>
	</div>

	<div class='pair'>
		<div>
			<p>C++ - Enumerators.hpp</p>
			<code class='cpp'
			>#pragma once

namespace MarcoLuglio {
namespace OpOvExample {

	enum Step : uint8_t {

		// solfèje
		Do = 1,
		Re = 3,
		Mi = 5,
		Fa = 6,
		Sol = 8,
		La = 10,
		Si = 12,

		// abc
		C = 1,
		D = 3,
		E = 5,
		F = 6,
		G = 8,
		A = 10,
		B = 12

	};

	enum Semitone : int8_t {

		None = 127,
		Natural = 0,
		DoubleFlat = -2,
		Flat = -1,
		Sharp = 1,
		DoubleSharp = 2

	};

	std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Step&amp; step);

	std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Semitone&amp; semitone);

}
}</code
			>
		</div>
		<div>
			<p>C++ - Enumerators.cpp</p>
			<code class='cpp'
			>#include "Enumerators.hpp"

namespace MarcoLuglio {
namespace OpOvExample {

	std::ostream&amp; operator&lt;&lt;(
		std::ostream&amp; os,
		const Step&amp; step
		) {

		switch (step) {

			case Step::Do:
				os &lt;&lt; "Do";
				break;

			case Step::Re:
				os &lt;&lt; "Re";
				break;

			case Step::Mi:
				os &lt;&lt; "Mi";
				break;

			case Step::Fa:
				os &lt;&lt; "Fa";
				break;

			case Step::Sol:
				os &lt;&lt; "Sol";
				break;

			case Step::La:
				os &lt;&lt; "La";
				break;

			case Step::Si:
				os &lt;&lt; "Si";
				break;

			default:
				break;

		}

		return os;

	}

	std::ostream&amp; operator&lt;&lt;(
		std::ostream&amp; os,
		const Semitone&amp; semitone
		) {

		switch (semitone) {

			case Semitone::None:
				break;

			case Semitone::Natural:
				os &lt;&lt; "♮";
				break;

			case Semitone::DoubleFlat:
				os &lt;&lt; "𝄫";
				break;

			case Semitone::Flat:
				os &lt;&lt; "♭";
				break;

			case Semitone::Sharp:
				os &lt;&lt; "♯";
				break;

			case Semitone::DoubleSharp:
				os &lt;&lt; "𝄪";
				break;

			default:
				break;

		}

		return os;

	}

}
}</code
			>
		</div>
	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
-
</div>

<div class='codeblock'>

<p>Swift - main.swift</p>
<code class='swift'
>var musicNote = MusicNote(step: Step.do, semitone: Semitone.none)
musicNote = musicNote + Semitone.sharp
print(musicNote) // Do♯</code
>

<p>Swift - MusicNote.swift</p>
<code class='swift'
>public final class MusicNote : CustomStringConvertible {

	init(step:Step, semitone:Semitone = Semitone.none) {
		self.step = step
		self.semitone = semitone
	}

	public var description: String {
		return "\(self.step)\(self.semitone)"
	}

	public fileprivate(set) var step = Step.do

	public var semitone = Semitone.none

}

<strong>// posso fazer isso estático tb dentro da classe MusicNote</strong>
<strong class='small'>func + (left: MusicNote, right: Semitone) -&gt; MusicNote {</strong>

	if right == Semitone.none {
		return left
	}

	var newStep:Step = left.step
	var newSemitone:Semitone = right

	if newSemitone == Semitone.sharp
		&amp;&amp; (newStep == Step.mi || newStep == Step.e)
		{

		newStep = Step.fa
		newSemitone = Semitone.none

	} else if newSemitone == Semitone.flat
		&amp;&amp; (newStep == Step.fa || newStep == Step.f)
		{

		newStep = Step.mi;
		newSemitone = Semitone.none;

	}

	// Rest of add logic here

	<strong>return MusicNote(step: newStep, semitone: newSemitone)</strong>

<strong>}</strong></code
>

<p>Swift - Enumerators.swift</p>
<code class='swift'
>// Rust não permite que uma mesma literal
// seja atribuído a dois valores diferentes
// `do` = 1, c = 1
public enum Step : UInt8, CustomStringConvertible {

	// solfèje
	case `do`
	case re
	case mi
	case fa
	case sol
	case la
	case si

	// abc
	case c
	case d
	case e
	case f
	case g
	case a
	case b

	public var description: String {
		switch self {
			case .do, .c:
				return "Do"
			case .re, .d:
				return "Reo"
			case .mi, .e:
				return "Mi"
			case .fa, .f:
				return "Fa"
			case .sol, .g:
				return "Sol"
			case .la, .a:
				return "La"
			case .si, .b:
				return "Si"
		}
	}

}

public enum Semitone : Int8, CustomStringConvertible {

	case none = 127
	case natural = 0
	case doubleFlat = -2
	case flat = -1
	case sharp = 1
	case doubleSharp = 2

	public var description: String {
		switch self {
			case .none:
				return ""
			case .natural:
				return "♮"
			case .doubleFlat:
				return "𝄫"
			case .flat:
				return "♭"
			case .sharp:
				return "♯"
			case .doubleSharp:
				return "𝄪"
		}
	}

}</code
>

</div>

<div class='codeblock'>

<p>Kotlin - main.kt</p>
<code class='kotlin'
>fun main(args: Array&lt;String&gt;) {
	//
}</code
>

<p>Kotlin - MusicNote.kt</p>
<code class='kotlin'
>public final class MusicNote {
	//
}

operator fun MusicNote.inc():MusicNote {
	//
}

operator fun MusicNote.plus(semitone:Semitone) {
	//
}</code
>

<p>Kotlin - Semitone.kt</p>
<code class='kotlin'
></code
>

</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.OpOvExample {
	public class MainClass {
		public static void Main(string[] args) {

			// Sim, de onde você achava que tinha vindo??
			var cSharp = new MusicNote(Step.C, Semitone.None);
			cSharp = cSharp + Semitone.Sharp;
			Console.WriteLine(cSharp); // Do♯

			var note1 = new MusicNote(Step.C);
			Console.WriteLine(note1++); // Do

			var note2 = new MusicNote(Step.C);
			Console.WriteLine(++note2); // Do♯

		}
	}
}</code
>

<p>C# - MusicNote.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.OpOvExample {

	<strong>public final class MusicNote {</strong>

		<strong>public static MusicNote operator +(MusicNote note, Semitone semitone) {</strong>

			if (semitone == Semitone.None) {
				return note;
			}

			Step newStep = note.step;
			Semitone newSemitone = semitone;

			if (newSemitone == Semitone.Sharp
				&amp;&amp; (newStep == Step.Mi || newStep == Step.E)
				) {

				newStep = Step.Fa;
				newSemitone = Semitone.None;

			} else if (newSemitone == Semitone.Flat
				&amp;&amp; (newStep == Step.Fa || newStep == Step.F)
				) {

				newStep = Step.Mi;
				newSemitone = Semitone.None;

			}

			// Rest of add logic here

			<strong>return new MusicNote(newStep, newSemitone);</strong>

		<strong>}</strong>

		<strong class='small'>public static MusicNote operator ++(MusicNote note) {</strong>
			<strong class='comment small'>// Retorne sempre um novo objeto dentro desse override</strong>
			<strong class='comment small'>// Para que que o prefixo e o sufixo ++ funcionem corretamente</strong>
			<strong class='comment small'>// Nesse caso o override do + irá se encarregar disso</strong>
			<strong class='small'>return note + Semitone.Sharp;</strong>
		<strong>}</strong>

		public MusicNote(Step step, Semitone semitone = Semitone.None) {
			this.Step = step;
			this.Semitone = semitone;
		}

		public override string ToString() {
			return string.Format("{0}{1}", Step, Semitone.ToDescriptionString());
		}

		public Step Step {
			get;
			private set;
		}

		public Semitone Semitone {
			get;
			set;
		}

		private Step step = Step.Do;

		private Semitone semitone = Semitone.None;

	<strong>}</strong>

}</code
>

<p>C# - Enumerators.cs</p>
<code class='cs'
>using System;
using System.ComponentModel; // Description attribute

namespace MarcoLuglio.OpOvExample {

	public enum Step : byte {

		// solfèje
		Do = 1,
		Re = 3,
		Mi = 5,
		Fa = 6,
		Sol = 8,
		La = 10,
		Si = 12,

		// abc
		C = 1,
		D = 3,
		E = 5,
		F = 6,
		G = 8,
		A = 10,
		B = 12

	}

	public enum Semitone : sbyte {

		[Description("")]
		None = 0,

		[Description("♮")]
		Natural = 0,

		[Description("\uD834\uDD2B")]
		DoubleFlat = -2,

		[Description("♭")]
		Flat = -1,

		[Description("♯")]
		Sharp = 1,

		[Description("\uD834\uDD2A")]
		DoubleSharp = 2

	}

	public static class SemitoneExtensions {
		public static string ToDescriptionString(this Semitone semitone) {
			DescriptionAttribute[] attributes = (DescriptionAttribute[])semitone
				.GetType()
				.GetField(semitone.ToString())
				.GetCustomAttributes(typeof(DescriptionAttribute), false);
			return attributes.Length > 0 ? attributes[0].Description : string.Empty;
		}
	}

}<strong style='display: none'></strong></code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>

<p>Python - main.py</p>
<code class='python'
>#</code
>

<p>Python - MusicNote.py</p>
<code class='python'
>class MusicNote:
	#</code
>

<p>Python - Semitone.py</p>
<code class='python'
>from enum import Enum

class Color(Enum):
	RED = 1
	GREEN = 2
	BLUE = 3</code
>

</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='indexing'>Indexing <span>Coleções de Objetos como Arrays</span></h2>

<div class='comparison large'>

<div class='codeblock'>

<p>Rust - OpOvCollection.rs</p>
<code class='rust'
>use std::ops::Index;
use std::ops::IndexMut;
use std::default::Default;

pub struct OpOvCollection&lt;T&gt; where T:Default {
	pub array:[T; 10]
}

// pode ser indexada por inteiros
impl&lt;T&gt; Index&lt;usize&gt; for OpOvCollection&lt;T&gt; where T:Default {
	type Output = T;

	fn index(&amp;self, index:usize) -&gt; &amp;T {
		&amp;self.array[index]
	}

}

// pode ser indexada por inteiros
impl&lt;T&gt; IndexMut&lt;usize&gt; for OpOvCollection&lt;T&gt; where T:Default {
	fn index_mut&lt;'a&gt;(&amp;'a mut self, index:usize) -&gt; &amp;'a mut T {
		&mut self.array[index]
	}
}

// ou por outros tipos
// TODO

impl&lt;T&gt; Default for OpOvCollection&lt;T&gt; where T:Default {
	fn default() -&gt; OpOvCollection&lt;T&gt; {
		OpOvCollection::&lt;T&gt; {
			array: Default::default()
		}
	}
}</code
>

<p>Rust - main.rs</p>
<code class='rust'
>let mut opOvCollection:OpOvCollection::OpOvCollection&lt;str&gt; = Default::default();
opOvCollection[0] = "sunday";
opOvCollection[1] = "monday I'm in love";
opOvCollection[2] = "tuesday and wednesday too";

println!("{}", opOvCollection[2]);</code
>

</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>C++ - OpOvCollection.hpp</p>
			<code class='cpp'
			>#pragma once

#include &lt;string&gt;

namespace MarcoLuglio {
namespace IndexerExample {

	using std::size_t;
	using std::string;
	using std::to_string;

	/// type alias para simplificar a sintaxe
	/// do retorno da função getArray
	using arrayReference = int[10];


	class OpOvCollection final {

	public:

		/// Classe auxiliar que permite alteração
		/// dos valores da coleção
		class Proxy final {

		public:

			Proxy(OpOvCollection&amp; collection, const size_t index)
				: collection{collection}, index{index} {}

			/// Overload do operador = para alteração
			/// dos valores da coleção
			int&amp; operator= (int newValue) {
				collection.array[index] = newValue;
				return collection.array[index]; // FIXME
			}

			/// C++ não possui uma classe base comum
			/// então as conversões para string devem ser
			/// implementadas sempre
			operator string() const {
				return to_string(collection.array[index]);
			}

		private:

			/// Referência da coleção original, para alteracão
			/// dos valores nos índices
			OpOvCollection &amp;collection;

			size_t index;

		};

		OpOvCollection();

		/// Overload do operador [] para obtenção
		/// dos valores da coleção
		/// Esse overload só possibilita retornar valores,
		/// portanto é necessário que ele retorne um objeto
		/// proxy ao invés do valor real, pois o proxy
		/// possibilita a alteração do valor na coleção
		/// original
		OpOvCollection::Proxy operator[](const size_t index);

	private:

		/// Coleção original
		int array[10];

	}

}
}</code
			>
		</div>

		<div>
			<p>C++ - OpOvCollection.cpp</p>
			<code class='cpp'
			>#include "OpOvCollection.hpp"

namespace MarcoLuglio {
namespace IndexerExample {

	using CollectionProxy = OpOvCollection::Proxy;
	using std::size_t;

	/// type alias para simplificar a sintaxe
	/// do retorno da função getArray
	using arrayReference = int[10];


	OpOvCollection::OpOvCollection() {
		// inicia a array com valores 0
		std::fill(this-&gt;array, this-&gt;array + 9, 0);
	}

	CollectionProxy OpOvCollection::operator[](const size_t index) {
		return CollectionProxy(*this, index);
	}

}
}</code
			>
		</div>

	</div>

	<p>C++ - main.cpp</p>
	<code class='cpp'
	>#include &lt;iostream&gt;
#include &lt;string&gt;
#include "OpOvCollection.hpp"

int main(int argc, const char* argv[]) {

	using std::cout;
	using std::endl;
	using std::string;

	using MarcoLuglio::IndexerExample::OpOvCollection;


	auto opOvCollection = OpOvCollection();
	opOvCollection[0] = 7;
	opOvCollection[1] = 45;
	opOvCollection[2] = 83;

	string value = (string)opOvCollection[2];

	// 83
	cout &lt;&lt; value &lt;&lt; endl;

	return 0;

}</code
	>

</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>Objective-C - IndexedCollection.h</p>
			<code class='objectivec'
>@interface {
}

// pode ser indexada por inteiros
- (id) objectAtIndexedSubscript:(int)index;
- (void) setObject:(id)obj atIndexedSubscript:(int)index;

// ou por outros tipos
- (id) objectForKeyedSubscript:(NSString)key;
- (void) setObject:(id)obj forKeyedSubscript:(NSString)key;

@end</code
			>
		</div>

		<div>
			<p>Objective-C - IndexedCollection.m</p>
			<code class='objectivec'
>#import "IndexedCollection.h"

@implementation

// TODO

@end</code
			>
		</div>

	</div>

	<p>Objective-C - main.m</p>
	<code class='objectivec'
>#import "IndexedCollection.h"

int main(int argc, const char* argv[]) {

	IndexedCollection* indexedCollection = [IndexedCollection new];

	indexedCollection[0] = "sunday";
	indexedCollection[1] = "monday I'm in love";
	indexedCollection[2] = "tuesday and wednesday too";

	// "tuesday and wednesday too"
	NSLog(indexedCollection["tuesday"]);

	return 0;

}</code
	>

</div>

<div class='codeblock'>

<p>Swift - SubscriptCollection.swift</p>
<code class='swift'
>// Swift não tem valores padrão para tipos, nem tem uma classe base comum
// Então usamos um protocolo que o tipo genérico deve seguir
public final class SubscriptCollection&lt;T:StringLiteralConvertible&gt; {

	init() {
		self.array = [T](count:10, repeatedValue:"")
	}

	// pode ser indexada por inteiros
	subscript(index:Int) -&gt; T {
		get {
			return self.array[index]
		}
		set(newValue) {
			self.array[index] = newValue
		}
	}

	// ou por outros tipos
	subscript(key:String) -&gt; T {
		get {
			var string:String
			var stringStart:String
			var stringIndex:String.Index
			for item in self.array {
				string = String(item)
				if string.isEmpty || string == "nil" {
					continue
				}
				stringIndex = string.startIndex.advancedBy(key.count)
				stringStart = string.substringToIndex(stringIndex)
				if stringStart == key {
					return item
				}
			}
			// retorna uma string vazia se não encontrar um item pela chave
			// já que o tipo deve poder ser convertido para string
			return ""
		}
	}

	// e ainda por mais de um índice
	subscript(key:String, index:Int) -&gt; T {
		get {
			var string:String
			var stringStart:String
			var stringIndex:String.Index
			var currentIndex = 0
			for item in self.array {
				string = String(item)
				if string.isEmpty || string == "nil" {
					continue
				}
				stringIndex = string.startIndex.advancedBy(key.count)
				stringStart = string.substringToIndex(stringIndex)
				if stringStart == key {
					if currentIndex == index {
						return item
					} else {
						currentIndex = currentIndex + 1
					}
				}
			}
			return ""
		}
	}

	var array:Array&lt;T&gt;

}</code
>

<p>Swift - main.swift</p>
<code class='swift'
>var subscriptCollection = SubscriptCollection&lt;String&gt;()
subscriptCollection[0] = "sundays are slow";
subscriptCollection[1] = "mondays are mediocre";
subscriptCollection[2] = "tuesday and wednesday too";
subscriptCollection[3] = "monday again";

// "tuesday and wednesday too"
print(subscriptCollection["tuesday"]);

// "monday again"
print(subscriptCollection["monday", 1]);</code
>

</div>



<div class='codeblock'>

<p>Kotlin - IndexedCollection.kt</p>
<code class='kotlin'
>class Point(val x: Int, val y: Int)
operator fun Point.get(i) = Point(-x, -y)

val point = Point(10, 20)

fun main() {
	println(-point) // prints "Point(x=-10, y=-20)"
}

// TODO implementar operador get conforme abaixo
/*
a[i]	a.get(i)
a[i, j]	a.get(i, j)
a[i_1, ..., i_n]	a.get(i_1, ..., i_n)
a[i] = b	a.set(i, b)
a[i, j] = b	a.set(i, j, b)
a[i_1, ..., i_n] = b	a.set(i_1, ..., i_n, b)
*/</code
>

<p>Kotlin - main.kt</p>
<code class='kotlin'
></code
>

</div>



<div class='codeblock'>
<p>Java</p>
-
</div>



<div class='codeblock'>

<p>C# - IndexedCollection.cs</p>
<code class='cs'
>namespace MarcoLuglio.IndexerExample {

	public sealed class IndexedCollection&lt;T&gt; {

		public IndexedCollection() {
			this.array = new T[10];
		}

		// pode ser indexada por inteiros
		public T this[int index] {
			get {
				return this.array [index];
			}
			set {
				this.array [index] = value;
			}
		}

		// ou por outros tipos
		public T this[string key] {
			get {
				foreach(var item in this.array) {
					if (item.ToString().StartsWith(key)) {
						return item;
					}
				}
				// retorna valor padrão para o tipo
				// se não encontrar um item pela chave
				return default(T);
			}
		}

		private T[] array;

	}

}</code
>

<p>C# - MainClass.cs</p>
<code class='cs'
>using System;

namespace MarcoLuglio.IndexerExample {

	public class MainClass {
		public static void Main(string[] args) {

			var indexedCollection = new IndexedCollection&lt;string&gt;();
			indexedCollection[0] = @"sunday";
			indexedCollection[1] = @"monday I'm in love";
			indexedCollection[2] = @"tuesday and wednesday too";

			// "tuesday and wednesday too"
			Console.WriteLine(indexedCollection[@"tuesday"]);

		}
	}

}</code
>

</div>



<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>'use strict';

const indexingProxy = {

	get(alvo, propriedade, receiver) {

		// pode ser indexada por inteiros
		if (/^\d+$/.test(propriedade)) {
			return Reflect.get(alvo._array, propriedade, receiver);
		}

		// ou por outros tipos
		for (let valor of alvo._array) {
			if (valor.startsWith(propriedade)) {
				return valor;
			}
		}

		// retorna null
		// se não encontrar um item pela chave
		return null;

	},

	set(alvo, propriedade, valor, receiver) {

		// pode ser indexada por inteiros
		if (/^\d+$/.test(propriedade)) {
			alvo._array[propriedade] = valor;
			return true;
		}

		// ou por outros tipos
		alvo._array.push(valor);
		return true;

	}

};

class Collection {
	constructor() {
		Object.defineProperty(this, '_array', {value: []});
	}
}

const collection = new Collection();
const indexedCollection = new Proxy(collection, indexingProxy);

indexedCollection[0] = "sunday";
indexedCollection[1] = "monday I'm in love";
indexedCollection[2] = "tuesday and wednesday too";

// "tuesday and wednesday too"
console.log(indexedCollection["tuesday"]);</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
># implementar object.__getitem__(self, key)</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>C# / Swift</li>
	<li>JavaScript</li>
	<li>C++</li>
</ol>

<p>C# possibilita a criação de indexers de maneira relativamente simples. Swift requer passos extras devido ao fato de que não existe uma maneira rápida de obter o valor padrão de um tipo genérico, mas isso é compensado pelo fato de que é simples utilizar mais de um índice com o operador <code class='swift'>[]</code>.
<br />JavaScript não diferencia os operadores <code class='javascript'>.</code> e <code class='javascript'>[]</code>, mas se os utilizarmos ingenuamente, deixaremos o código lento, criando propriedades nos objetos em tempo de execução. Por isso o uso de um <code class='javascript'>Proxy</code> se faz necessário.
<br />C++ Também requer um proxy, mas por outros motivos. O operador <code class='cpp'>[]</code> em C++ só retorna valores, então devemos retornar um proxy que possui uma referência para a posição desejada na coleção original, e por meio dele alterar o valor nessa posição. Para que isso seja possível, o proxy também deve ter alguns overloads de operadores, tornando tudo mais verborrágico e complicado do que nas outras linguagens.</p>

</section>


<section>

<h2 id='metadados'>Meta dados (annotations / attributes / decorators)</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// use procedural macros
// TODO

#[proc_macro_attribute]
pub fn show_streams(
		attr: TokenStream,
		item: TokenStream
	) -&gt; TokenStream {

	println!("attr: \"{}\"", attr.to_string());
	println!("item: \"{}\"", item.to_string());
	item
}

#[show_streams(bar)]
fn invoke2() {}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>package main

import (
	"fmt"
	"reflect"
)
type T struct {
	f1     string "f one"
	f2     string
	f3     string `f three`
	f4, f5 int64  `f four and five`
	f6     string `one:"1" two:"2"blank:""`
}

func main() {

	t := reflect.TypeOf(T{})

	f1, _ := t.FieldByName("f1")
	fmt.Println(f1.Tag) // f one
	f4, _ := t.FieldByName("f4")
	fmt.Println(f4.Tag) // f four and five
	f5, _ := t.FieldByName("f5")
	fmt.Println(f5.Tag) // f four and five

	f6, _ := t.FieldByName("f6")
	fmt.Println(f6.Tag) // one:"1" two:"2"blank:""
	v, ok := f6.Tag.Lookup("one")
	fmt.Printf("%s, %t\n", v, ok) // 1, true
	v, ok = f6.Tag.Lookup("blank")
	fmt.Printf("%s, %t\n", v, ok) // , true
	v, ok = f6.Tag.Lookup("five")
	fmt.Printf("%s, %t\n", v, ok) // , false

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
-
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// não permite atributos customizados
// apenas pré-definidos</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// não permite atributos customizados
// apenas pré-definidos</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>@Target(AnnotationTarget.CLASS)
annotation class AClassAnnotation(val aParam: String)

@Target(AnnotationTarget.FUNCTION)
annotation class AMethodAnnotation(val aParam: String)

@AClassAnnotation("metadata about class")
class AnnotatedClass {

	@AMethodAnnotation("metadata about class")
	void AnnotatedMethod() {
		//
	}

}

val aClassAnnotation = AnnotatedClass::class
	.annotations
	.find { it is AClassAnnotation } as? AClassAnnotation

println(AClassAnnotation?.aParam)</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>@Target(ElementType.CLASS)
@Retention(RetentionPolicy.RUNTIME)
public @interface AClassAnnotation {
	public String aParam() default "";
}

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface AMethodAnnotation {
	public String aParam() default "";
}

@AClassAnnotation(aParam = "metadata about class")
class AnnotatedClass {

	@AMethodAnnotation(aParam = "metadata about class")
	void AnnotatedMethod() {
		//
	}

}

AClassAnnotation aClassAnnotation = obj
	.getClass()
	.getAnnotation(AClassAnnotation.class);

if (aClassAnnotation != null) {
	String aParam = aClassAnnotation.aParam();
}</code
>
</div>

<div class='codeblock'>

<p>C#</p>
<code class='cs'
>[AttributeUsage(AttributeTargets.Class, Inherited = false)]
public class AClassAttribute : Attribute {

	public AClassAttribute(string aParam) {
		//
	}

}

[AttributeUsage(AttributeTargets.Method, Inherited = false)]
public class AMethodAttribute : Attribute {

	public AMethodAttribute(string aParam) {
		//
	}

}

[AClassAttribute("metadata about class")]
public sealed class AnnotatedClass {

	[AMethodAttribute("metadata about method")]
	public void AnnotatedMethod() {
		...
	}

}

var annotatedClassType = typeof(AnnotatedClass);
var aClassAttribute = (AClassAttribute) Attribute.GetCustomAttribute(
	annotatedClassType,
	typeof (AClassAttribute)
);</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// <a href='https://github.com/tc39/proposal-decorators'>acompanhe essa feature</a></code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>def a_class_decorator(cls):
	class NewClass(cls):
		attr = 100
		return NewClass

@a_class_decorator
class X:
	pass

def a_function_decorator(aParam, func):
	def wrapper():
		print("Do something")
		func()
	return wrapper

@a_function_decorator("a param")
def say_whee():
	print("Whee!")

#####################################

import functools

class state_decorator:

	def __init__(self, func):
		functools.update_wrapper(self, func)
		self.func = func
		self.num_calls = 0

	def __call__(self, *args, **kwargs):
		self.num_calls += 1
		print(f"Call {self.num_calls} of {self.func.__name__!r}")
		return self.func(*args, **kwargs)

@state_decorator
def say_whee():
	print("Whee!")</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
-
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='visualbasic'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>


<section>

<h2 id='templateid'>Interface Binária C <span>Foreign Function Interface</span></h2>



<h3>Exportar para C</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust - TabelaNutricional.rs</p>
<code class='rust'
>#[repr(C)]
pub struct TabelaNutricional {
	valorEnergetico: f32,
	carboidratos: f32,
	proteinas: f32,
	gordurasTotais: f32,
	gordurasSaturadas: f32,
	gordurasTrans: f32,
	fibraAlimentar: f32,
	sodio: f32
}

#[no_mangle]
pub extern fn calcular(porcao:f32) -&gt; TabelaNutricional {
	let mut tabela = TabelaNutricional{
		valorEnergetico: 1_f32,
		carboidratos: 1_f32,
		proteinas: 1_f32,
		gordurasTotais: 1_f32,
		gordurasSaturadas: 1_f32,
		gordurasTrans: 1_f32,
		fibraAlimentar: 1_f32,
		sodio: 2_f32
	};
	// TODO usar porcao
	return tabela;
}

// compilar com
// rustc --crate-type dylib TabelaNutricional.rs
// vai gerar libTabelaNutricional.dylib</code
>
</div>

<div class='codeblock'>
<p>Go</p>
-
</div>

<div class='codeblock'>

	<div class='pair'>

		<div>
			<p>C++ - TabelaNutricional.hpp</p>
			<code class='cpp'
			>#pragma once

#ifdef __cplusplus
namespace MarcoLuglio {
namespace FFIExample {
extern "C" {
#endif

	struct TabelaNutricional {
		float valorEnergetico;
		float carboidratos;
		float proteinas;
		float gordurasTotais;
		float gordurasSaturadas;
		float gordurasTrans;
		float fibraAlimentar;
		float sodio;
	};

#ifdef __cplusplus
}
}
}
#endif</code
			>
		</div>

		<div>
			<p>C++ - TabelaNutricional.cpp</p>
			<code class='cpp'
			>#include "TabelaNutricional.hpp"

namespace MarcoLuglio {
namespace FFIExample {

	// TODO ver se esse arquivo
	// é realmente necessário

}
}</code
			>
		</div>

	</div>

	<div class='pair'>

		<div>
			<p>C++ - TabelaNutricionalBiblioteca.hpp</p>
			<code class='cpp'
			>#pragma once

#ifdef _MSC_VER // Visual Studio specific macro
#define DLLEXPORT __declspec(dllexport)
#else
#define DLLEXPORT __attribute__((visibility("default")))
#endif

#include "TabelaNutricional.hpp"

#ifdef __cplusplus
namespace MarcoLuglio {
namespace FFIExample {
extern "C" {
#endif

	DLLEXPORT struct TabelaNutricional calcular(float porcao);

#ifdef __cplusplus
}
}
}
#endif</code
			>
		</div>

		<div>
			<p>C++ - TabelaNutricionalBibliteca.cpp</p>
			<code class='cpp'
			>#include "TabelaNutricional.hpp"
#include "TabelaNutricionalBibliteca.hpp"

namespace MarcoLuglio {
namespace FFIExample {

	TabelaNutricional calcular(const float porcao) {

		TabelaNutricional tabela{};
		// ...
		return tabela;

	}

}
}</code
			>
		</div>

	</div>

</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>-</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>-</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
></code
>
</div>

<div class='codeblock'>
<p>Java</p>
-
</div>

<div class='codeblock'>
<p>C#</p>
-
</div>

<div class='codeblock'>
<p>JavaScript</p>
-
</div>

<div class='codeblock'>
<p>Python</p>
-
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<h3>Importar do C</h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>#[link(name = "TabelaNutricionalBiblioteca")]
extern "C" {
	fn calcular(porcao:f32) -&gt; i32;
}

fn main() {
	unsafe {
		calcular(20);
	}
}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>// CFLAGS, CPPFLAGS, CXXFLAGS, FFLAGS e LDFLAGS
// podem ajustar o comportamento das bibliotecas C
// #cgo CFLAGS: -DPNG_DEBUG=1
// #cgo amd64 386 CFLAGS: -DX86=1
// #cgo LDFLAGS: -lpng
// ou podemos usar pkg-config
// #cgo pkg-config: png cairo
// #include &lt;png.h&gt;
import "C"

// mais detalhes na <a href='https://golang.org/cmd/cgo/'>documentação oficial</a></code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>// usar LoadLibrary/GetProcAddress/FreeLibrary no Windows
// ou dlopen/dlsym/dlclose no Mac e Linux
// ou linkar as bibliotecas em tempo de compilação
// ou adicionar as referências nas IDEs respectivas</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>// Objective-C é um superset de C
// portanto pode incluir cabeçalhos
// chamar funções e usar structs C
// normalmente</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// XCode cria um bridging header
// quando inserimos arquivos C</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>// Somente Kotlin native?</code
>
</div>

<div class='codeblock'>
<p>Java - TabelaNutricional.java</p>
<code class='java'
>package marcoLuglio.ffiExample;

public final class TabelaNutricional {
	public float valorEnergetico;
	public float carboidratos;
	public float proteinas;
	public float gordurasTotais;
	public float gordurasSaturadas;
	public float gordurasTrans;
	public float fibraAlimentar;
	public float sodio;
}</code
>

<p>Java - TabelaNutricionalBibliotecaNative.java</p>
<code class='java'
>package marcoLuglio.ffiExample;

public final class TabelaNutricionalBibliotecaNative {

	static {System.loadLibrary("TabelaNutricionalBiblioteca");}

	private native TabelaNutricional calcular(float porcao);

}</code
>

<div class='codeblock'>
<p>C# - TabelaNutricionalBibliotecaNative.cs</p>
<code class='cs'
>// Adicionar a referência ao arquivo na IDE e:

using System.Runtime.InteropServices;

namespace MarcoLuglio.FFIExample {

	[StructLayout(LayoutKind.Sequential)]
	public struct TabelaNutricional {
		public float valorEnergetico;
		public float carboidratos;
		public float proteinas;
		public float gordurasTotais;
		public float gordurasSaturadas;
		public float gordurasTrans;
		public float fibraAlimentar;
		public float sodio;
	};

	public static class SalarioBibliotecaNative {

		[DllImport(
			"TabelaNutricionalBiblioteca.dll",
			CallingConvention = CallingConvention.Cdecl,
			EntryPoint = @"calcular"
		)]
		public static extern TabelaNutricional calcular(float porcao);

	}

}</code
>
</div>

<p>C - ?.c</p>
<code class='c'
>// TODO</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>// No navegador não existe, mas veja
// <a href='https://webassembly.github.io/'>Web Assembly</a>
// Já usando node.js veja o <a href='https://github.com/node-ffi/node-ffi'>plug-in FFI</a></code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>from cffi import FFI
ffi = FFI()
ffi.cdef("size_t strlen(const char*);")
clib = ffi.dlopen(None)
length = clib.strlen("String to be evaluated.")
# prints: 23
print("{}".format(length))</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
>Declare Function CFunction Lib "C:\full\path\to\someC.dll" Alias "_testdll@0" (ByVal _ lpRootPathName As String) As Long
</code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>



<ol>
	<li>C++ / Rust</li>
	<li>Objective-C / C#</li>
	<li>Swift</li>
	<li>Java</li>
	<li>JavaScript</li>
</ol>

<p>C++ e Rust são os únicos que conseguem exportar bibliotecas compatíveis com C, por se tratarem de linguagens nativas. C++ Possui grande preocupação com a compatibilidade com C, e pode misturar de maneira transparente blocos de código em C.<br />
As bibliotecas geradas por Rust são enormes se comparados com as do C++, para comportar as regras da linguagem.<br />
Objective-C é construído tendo C como base. Portanto, assim como C++, pode usar C de maneira transparente. Só não pode exportar para C :(<br />
Swift?? TODO<br />
C# possui uma sintaxe limpa para interagir com <abbr title="Application Programming Interface">API</abbr>s em C<br />
Java pode até ser bonitinho dentro do arquivo Java, mas o arquivo C que interage com ele é bastante complexo. Tanto que foram criadas ferramentas que geram parte deste arquivo automaticamente.<br />
JavaScript ainda não chegou lá.</p>



</section>


<section>

<h2 id='networking'><abbr>Networking</abbr></h2>

<h3 id='http'><abbr>HTTP</abbr></h3>

<div class='comparison'>

<div class='codeblock'>

<p>Rust - server.rs - actix framework</p>
<code class='rust'
>// actix uses tokio for async .await
use actix_web::{web, App, HttpRequest, HttpServer, Responder};

#[get("/")]
async fn index(_req: HttpRequest) -&gt; impl Responder {
	"Hello from the index page!"
}

async fn greet(req: HttpRequest) -&gt; impl Responder {
	let name = req.match_info().get("name").unwrap_or("World");
	format!("Hello {}!", &name)
}

#[actix_web::main]
async fn main() -&gt; std::io::Result&lt;()&gt; {
	HttpServer::new(|| {
		App::new()
			.service(index)
			.route("/", web::get().to(greet))
			.route("/{name}", web::get().to(greet))
	})
	.bind(("127.0.0.1", 8080))?
	.run()
	.await
}</code
>

<p>Rust - server.rs</p>
<code class='rust'
>use std::fs;
use std::io::prelude::*;
use std::net::TcpListener;
use std::net::TcpStream;



fn main() {

	// TODO handle SIGINT, SIGTERM, etc.

	println!("Starting go server on port 80");
	let listener = TcpListener::bind("0.0.0.0:80"); // containers must use 0.0.0.0! localhost or 127.0.0.1 do not work!

	match listener {
		Ok(result) =&gt; {
			// TODO match here too
			listen_incoming_connections(result);
		},
		Err(err) =&gt; println!("{}", err)
	}

}

fn listen_incoming_connections(listener:std::net::TcpListener) -&gt; Result&lt;(), std::io::Error&gt; {

	for stream in listener.incoming() {
		handle_connection(stream?)?;
	}

	Ok(())

}

fn handle_connection(mut stream: TcpStream) -&gt; Result&lt;usize, std::io::Error&gt; {

	let mut buffer = [0; 1024];
	let buffer_result = stream.read(&mut buffer)?; // TODO implement timeouts

	// formato das requisições
	// https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html

	// methods and root uri
	let options = b"OPTIONS / ";
	let get = b"GET / ";

	if buffer.starts_with(options) {
		handle_options(buffer, stream)?;
	} else if buffer.starts_with(get) {
		handle_get(buffer, stream)?;
	} else {

		println!("TODO 404")
		/*(
			"HTTP/1.1 404 NOT FOUND",
			"content-type: text/html".to_string(),
			"404.html"
		)*/

	};

	Ok(buffer_result)

}

// formato das respostas
// https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html

fn handle_options(buffer:[u8; 1024], mut stream: TcpStream) -&gt; Result&lt;(), std::io::Error&gt; {

	let (status_line, headers) = (
		"HTTP/1.1 200 OK",
		concat!(
			"access-control-allow-origin: *", // posso usar *, mas não se requerir autenticação com bearer:
			"access-control-allow-methods: options, get, post, put, delete",
			"access-control-allow-headers: content-type", // posso usar *
		)
		.to_string()
	);

	let response = format!("{}\r\n{}", status_line, headers);

	// TODO implement timeouts
	stream.write(response.as_bytes())?;
	stream.flush()?;

	Ok(())

}

fn handle_get(buffer:[u8; 1024], mut stream: TcpStream) -&gt; Result&lt;(), std::io::Error&gt; {

	let (status_line, mut headers, filename) = (
		"HTTP/1.1 200 OK",
		"content-type: application/json".to_string(),
		"hello.json"
	);

	let body = fs::read_to_string(filename)?;

	headers = [
		headers,
		"\r\ncontent-length: ".to_string(),
		body.len().to_string()
	]
	.concat();

	let response = format!("{}\r\n{}\r\n\r\n{}", status_line, headers, body);

	// TODO implement timeouts
	stream.write(response.as_bytes())?;
	stream.flush()?;

	Ok(())

}</code
>

<p>Rust - client.rs - ureq crate</p>
<code class='rust'
>fn main() -&gt; Result&lt;(), ureq::Error&gt; {
	let body: String = ureq::get("http://example.com")
		.set("Example-Header", "header value")
		.call()?
		.into_string()?;
	Ok(())
}</code
>

<p>Rust - client.rs - reqwest crate</p>
<code class='rust'
>let body = reqwest::get("https://www.rust-lang.org")
	.await?
	.text()
	.await?;</code
>

</div>

<div class='codeblock'>

<p>Go - server.go</p>
<code class='go'
>package main

import (
	"fmt"
	"net/http"
	"time"
)

func main() {

	fmt.Println("Starting go server on port 80")

	handler := timeoutHandler{}
	timeoutServer := &http.Server{
		ReadHeaderTimeout: 20 * time.Second,
		ReadTimeout:       1 * time.Minute,
		WriteTimeout:      2 * time.Minute,
		Handler:           handler,
		Addr:              ":80",
	}
	timeoutServer.ListenAndServe()

}

// #region timeoutHandler struct

type timeoutHandler struct{}

func (handler timeoutHandler) ServeHTTP(
	responseWriter http.ResponseWriter,
	request *http.Request
	) {

	defer request.Body.Close()

	switch request.RequestURI {

		case "/":
			// OK

		default:
			// TODO 404
			return

	}

	/*
	// this is how to do a varible timeout to read the request
	// but it will also eat part of the write timeout
	timer := time.AfterFunc(5*time.Second, func() {
		request.Body.Close()
	})
	// if more time is needed to write the response
	// reset the timer here, os in another method
	timer.Reset(1 * time.Second)
	*/

	var err error

	switch request.Method {

		case "OPTIONS":
			err = handleOptions(responseWriter, request)

		case "GET":
			err = handleGet(responseWriter, request)

	}

	if err != nil {
		// util.CheckError(err)
		// return
	}

}

// #endregion

func handleOptions(
	responseWriter http.ResponseWriter,
	request *http.Request
	) (err error) {

	// posso usar *, mas não se requerir autenticação com bearer:
	responseWriter.Header().Set(
		"access-control-allow-origin",
		"*"
	)

	responseWriter.Header().Set(
		"access-control-allow-methods",
		"options, get, post, put, delete"
	)

	// posso usar *
	responseWriter.Header().Set(
		"access-control-allow-headers",
		"content-type"
	)

	return
}

func handleGet(
	responseWriter http.ResponseWriter,
	request *http.Request
	) (err error) {

	responseWriter.Header().Set(
		"content-type",
		"application/json"
	)
	responseWriter.WriteHeader(200)
	responseWriter.Write([]byte(`{"hello":"world"}`))
	return
}</code
>

<p>Go - client.go</p>
<code class='go'
>package main

import (
	"fmt"
	"net/http"
	"time"
)

func main() {

	resp, err := http.Get("http://example.com/")
	resp, err := http.Post(
		"http://example.com/upload",
		"image/jpeg", &amp;buf
	)
	resp, err := http.PostForm(
		"http://example.com/form",
		url.Values{"key": {"Value"}, "id": {"123"}}
	)

	if err != nil {
		// handle error
	}

	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)

}</code
>

</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>

<p>Swift - client.swift</p>
<code class='swift'
>let url = URL(string: "http://www.stackoverflow.com")!

let task = URLSession.shared.dataTask(with: url) {(data, response, error) in
	guard let data = data else { return }
	print(String(data: data, encoding: .utf8)!)
}

task.resume()</code
>

</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>

<p>C# - server</p>
<code class='cs'
>// Use the Asp.Net templates</code
>

<p>C# - client.cs</p>
<code class='cs'
>var httpClient = new HttpClient();
httpClient.BaseAddress = new Uri("http://example.com");
// httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
var response = await httpClient.GetAsync("/someResource");
// TODO maybe there's a faster way to check for success
// without throwing exceptions?
// response.EnsureSuccessStatusCode();
using var responseStream = await response.Content.ReadAsStreamAsync();
string responseString = String.Empty;
using (var reader = new System.IO.StreamReader(responseStream, Encoding.UTF8)) {
	responseString = await reader.ReadToEndAsync();
}</code
>

</div>

<div class='codeblock'>

<p>JavaScript - server.mjs - nodejs</p>
<code class='javascript'
>import http from 'http';

//create a server object:
http.createServer(function (req, res) {
	res.write('Hello World!');
	res.end();
}).listen(8080);</code
>

<p>JavaScript - client.js</p>
<code class='javascript'
>fetch('http://example.com/movies.json')
	.then(response =&gt; response.json())
	.then(data =&gt; console.log(data));</code
>

</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='grpc'><abbr>gRPC</abbr></h3>

<div class='codeblock bubaloop'>
<p>Protocol Buffer definition</p>
<code class='generic bubaloop'
><span class='keyword'>service</span> Greeter <span class='operator'>{</span>
	<span class='keyword'>rpc</span> SayHello <span class='operator'>(</span>HelloRequest<span class='operator'>)</span> <span class='keyword'>returns</span> <span class='operator'>(</span>HelloReply<span class='operator'>)</span> <span class='operator'>{</span><span class='operator'>}</span>
<span class='operator'>}</span>

<span class='keyword'>message</span> HelloRequest <span class='operator'>{</span>
	<span class='type'>string</span> name <span class='operator'>=</span> <span class='number'>1</span><span class='operator'>;</span>
<span class='operator'>}</span>

<span class='keyword'>message</span> HelloReply <span class='operator'>{</span>
	<span class='type'>string</span> message <span class='operator'>=</span> 1<span class='operator'>;</span>
<span class='operator'>}</span>

<span class='comment lineComment'>// then run protoc for the given language</span></code
>
</div>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>// no official one yet</code
>
</div>

<div class='codeblock'>

<p>Go - server.go</p>
<code class='go'
>package main

import (
	"context"
	"log"
	"net"

	"google.golang.org/grpc"
	pb "google.golang.org/grpc/examples/helloworld/helloworld"
)

// SayHello implements helloworld.GreeterServer
func (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {
	log.Printf("Received: %v", in.GetName())
	return &amp;pb.HelloReply{Message: "Hello " + in.GetName()}, nil
}

func main() {
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterGreeterServer(s, &server{})
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}</code
>

<p>Go - client.go</p>
<code class='go'
>package main

import (
	"context"
	"log"
	"os"
	"time"

	"google.golang.org/grpc"
	pb "google.golang.org/grpc/examples/helloworld/helloworld"
)

func main() {

	// Set up a connection to the server.
	conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pb.NewGreeterClient(conn)

	// Contact the server and print out its response.
	name := defaultName
	if len(os.Args) &gt; 1 {
		name = os.Args[1]
	}
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	r, err := c.SayHello(ctx, &pb.HelloRequest{Name: name})
	if err != nil {
		log.Fatalf("could not greet: %v", err)
	}
	log.Printf("Greeting: %s", r.GetMessage())

}</code
>

</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>// check <a href='https://github.com/apple/swift-protobuf'>apple documentation</a>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>

<p>C# - server</p>
<code class='cs'
>public sealed class GreeterImpl : Greeter.GreeterBase
{
	// Server side handler of the SayHello RPC
	public override Task&lt;HelloReply&gt; SayHello(HelloRequest request, ServerCallContext context)
	{
		return Task.FromResult(new HelloReply { Message = "Hello " + request.Name });
	}

	// Server side handler for the SayHelloAgain RPC
	public override Task&lt;HelloReply&gt; SayHelloAgain(HelloRequest request, ServerCallContext context)
	{
		return Task.FromResult(new HelloReply { Message = "Hello again " + request.Name });
	}
}</code
>

<p>C# - client</p>
<code class='cs'
>Channel channel = new Channel("127.0.0.1:50051", ChannelCredentials.Insecure);

var client = new Greeter.GreeterClient(channel);
String user = "you";

var reply = client.SayHello(new HelloRequest { Name = user });
Console.WriteLine("Greeting: " + reply.Message);

var secondReply = client.SayHelloAgain(new HelloRequest { Name = user });
Console.WriteLine("Greeting: " + secondReply.Message);

channel.ShutdownAsync().Wait();</code
>

</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='graphql'><abbr>GraphQL</abbr></h3>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>package main

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/graphql-go/graphql"
)

func main() {

	// Schema

	fields := graphql.Fields {

		// resolver for hello
		"hello": &amp;graphql.Field {
			Type: graphql.String,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return "world", nil
			},
		},

	}

	rootQuery := graphql.ObjectConfig{Name: "RootQuery", Fields: fields}
	schemaConfig := graphql.SchemaConfig{ Query: graphql.NewObject(rootQuery) }
	schema, err := graphql.NewSchema(schemaConfig)
	if err != nil {
		log.Fatalf("failed to create new schema, error: %v", err)
	}

	// Query

	query := `
		{
			hello
		}
	`

	params := graphql.Params{Schema: schema, RequestString: query}
	r := graphql.Do(params)
	if len(r.Errors) > 0 {
		log.Fatalf("failed to execute graphql operation, errors: %+v", r.Errors)
	}
	rJSON, _ := json.Marshal(r)
	fmt.Printf("%s \n", rJSON) // {"data":{"hello":"world"}}
}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='websockets'><abbr>Web sockets</abbr></h3>

<div class='comparison'>

<div class='codeblock'>

<p>Rust - Cargo.toml</p>
<code class='generic'
>tokio-tungstenite = "0.12.0"</code
>

<p>Rust - server.rs</p>
<code class='rust'
>use std::net::TcpListener;
//use tungstenite::server::accept;
use tokio_tungstenite::accept_async;

#[tokio::main]
async fn main() {

	let server = TcpListener::bind("127.0.0.1:9001").unwrap();
	// let size = 5;
	// let mut workers = Vec::with_capacity(size);

	for stream in server.incoming() {

		let worker = tokio::spawn(async move {

			let mut websocket = accept_async(stream.unwrap())
				.await
				.unwrap();

			loop {

				let msg = match websocket.read_message().await {

					// socket closed
					Ok(msg) if msg == 0 =&gt; return,

					// We do not want to send back ping/pong messages
					Ok(msg) if msg.is_binary() || msg.is_text() =&gt; msg, // websocket.write_message(msg).unwrap();
					//Ok(msg) =&gt; msg,

					Err(e) =&gt; {
						eprintln!("failed to read from socket; err = {:?}", e);
						return;
					}

				};

			}

		});

		// workers.push(worker);

	}

	/*
	// close all sockets
	for _ in &workers {
		let _ = sender.send(Message::Terminate);
	}

	// wait for the close message to be acknoledged
	for worker in workers {
		let _ = worker.await;
	}
	*/

}</code
>

</div>

<div class='codeblock'>

<p>Go - gorilla library</p>
<code class='go'
>// <a href='https://yalantis.com/blog/how-to-build-websockets-in-go/'>great article comparing alternatives</a>
package main

import (
	"fmt"
	"net/http"

	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader {
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
}

func main() {

	http.HandleFunc("/echo", func(w http.ResponseWriter, r *http.Request) {

		conn, _ := upgrader.Upgrade(w, r, nil) // error ignored for sake of simplicity

		for {

			// Read message from browser
			msgType, msg, err := conn.ReadMessage()
			if err != nil {
				return
			}

			// Print the message to the console
			fmt.Printf("%s sent: %s\n", conn.RemoteAddr(), string(msg))

			// Write message back to browser
			if err = conn.WriteMessage(msgType, msg); err != nil {
				return
			}

		}

	})

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "websockets.html")
	})

	http.ListenAndServe(":8080", nil)
}</code
>

</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>

<p>Swift - server.swift</p>
<code class='swift'
>// <a href='https://github.com/apple/swift-nio/blob/main/Sources/NIOWebSocketServer/main.swift'>https://github.com/apple/swift-nio/blob/main/Sources/NIOWebSocketServer/main.swift</a>
</code
>

<p>Swift - client.swift</p>
<code class='swift'
>// <a href='https://developer.apple.com/documentation/foundation/urlsessionwebsockettask'>https://developer.apple.com/documentation/foundation/urlsessionwebsockettask</a>
// or cross platform
// <a href='https://github.com/apple/swift-nio/blob/main/Sources/NIOWebSocketClient/main.swift'>https://github.com/apple/swift-nio/blob/main/Sources/NIOWebSocketClient/main.swift</a>
</code
>

</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>// <a href='https://marcoluglio.github.io/br/tutorialwebsockets/'>https://marcoluglio.github.io/br/tutorialwebsockets/</a>
// <a href='https://docs.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-5.0'></a>https://docs.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-5.0</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>const socket = new WebSocket('ws://localhost:8080');

socket.addEventListener('open', function (event) {
	socket.send('Hello Server!');
});

socket.addEventListener('message', function (event) {
	console.log('Message from server ', event.data);
});</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>



<h3 id='sockets'><abbr>Sockets</abbr></h3>

<div class='comparison'>

<div class='codeblock'>

<p>Rust - server.rs</p>
<code class='rust'
>
</code
>

<p>Rust - client.rs</p>
<code class='rust'
>
</code
>

</div>

<div class='codeblock'>

<p>Go - server.go</p>
<code class='go'
>package main

import (
	"log"
	"net"
)

func echoServer(c net.Conn) {

	for {

		buf := make([]byte, 512)
		nr, err := c.Read(buf)
		if err != nil {
			return
		}

		data := buf[0:nr]
		println("Server got:", string(data))
		_, err = c.Write(data)
		if err != nil {
			log.Fatal("Write: ", err)
		}

	}

}

func main() {

	l, err := net.Listen("unix", "/tmp/echo.sock")
	if err != nil {
		log.Fatal("listen error:", err)
	}

	for {

		fd, err := l.Accept()
		if err != nil {
			log.Fatal("accept error:", err)
		}

		go echoServer(fd)
	}

}</code
>

<p>Go - client.go</p>
<code class='go'
>package main

import (
	"io"
	"log"
	"net"
	"time"
)

func reader(r io.Reader) {

	buf := make([]byte, 1024)

	for {

		n, err := r.Read(buf[:])
		if err != nil {
			return
		}
		println("Client got:", string(buf[0:n]))

	}

}

func main() {

	c, err := net.Dial("unix", "/tmp/echo.sock")
	if err != nil {
		panic(err)
	}
	defer c.Close()

	go reader(c)
	for {

		_, err := c.Write([]byte("hi"))
		if err != nil {
			log.Fatal("write error:", err)
			break
		}
		time.Sleep(1e9)

	}

}</code
>

</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<section>

<h2 id='json'>JSON</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Debug)]
struct Point {
	x: i32,
	y: i32,
}

fn main() {

	let point = Point { x: 1, y: 2 };

	// Convert the Point to a JSON string.
	let serialized = serde_json::to_string(&amp;point).unwrap();

	// Prints serialized = {"x":1,"y":2}
	println!("serialized = {}", serialized);

	// Convert the JSON string back to a Point.
	let deserialized: Point = serde_json::from_str(&amp;serialized).unwrap();

	// Prints deserialized = Point { x: 1, y: 2 }
	println!("deserialized = {:?}", deserialized);

}</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>package main

import (
	"encoding/json"
	"fmt"
	"os"
)

type response1 struct {
	Page   int
	Fruits []string
}

type response2 struct {
	Page   int      `json:"page"`
	Fruits []string `json:"fruits"`
}

func main() {

	mapD := map[string]int { "apple": 5, "lettuce": 7 }
	mapB, _ := json.Marshal(mapD)
	fmt.Println(string(mapB))

	res1D := &response1 {
		Page:   1,
		Fruits: []string { "apple", "peach", "pear" }
	}
	res1B, _ := json.Marshal(res1D)
	fmt.Println(string(res1B))

	byt := []byte(`{ "num":6.13,"strs":["a","b"] }`)

	var dat map[string]interface{}

	if err := json.Unmarshal(byt, &amp;dat); err != nil {
		panic(err)
	}
	fmt.Println(dat)

	num := dat["num"].(float64)
	fmt.Println(num)

	strs := dat["strs"].([]interface{})
	str1 := strs[0].(string)
	fmt.Println(str1)

	str := `{ "page": 1, "fruits": ["apple", "peach"] }`
	res := response2 {}
	json.Unmarshal([]byte(str), &res)
	fmt.Println(res)
	fmt.Println(res.Fruits[0])

	enc := json.NewEncoder(os.Stdout)
	d := map[string]int { "apple": 5, "lettuce": 7 }
	enc.Encode(d)

}</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>import Foundation

let str = "{\"names\": [\"Bob\", \"Tim\", \"Tina\"]}"
let data = Data(str.utf8)

let json = try? JSONSerialization.jsonObject(with: data, options: [])

if let dictionary = jsonWithObjectRoot as? [String: Any] {

	if let number = dictionary["someKey"] as? Double {
		// access individual value in dictionary
	}

	for (key, value) in dictionary {
		// access all key / value pairs in dictionary
	}

	if let nestedDictionary = dictionary["anotherKey"] as? [String: Any] {
		// access nested dictionary values by key
	}

}

if let array = jsonWithArrayRoot as? [Any] {

	if let firstObject = array.first {
		// access individual object in array
	}

	for object in array {
		// access all objects in array
	}

	for case let string as String in array {
		// access only string values in array
	}

}

// we need to manually map the dictionary to a struct

struct Restaurant {

	enum Meal: String {
		case breakfast, lunch, dinner
	}

	let name: String
	let location: (latitude: Double, longitude: Double)
	let meals: Set&lt;Meal&gt;

}

extension Restaurant {

	init(json: [String: Any]) throws {

		// Extract name
		guard let name = json["name"] as? String else {
			throw SerializationError.missing("name")
		}

		// Extract and validate coordinates
		guard let coordinatesJSON = json["coordinates"] as? [String: Double],
			let latitude = coordinatesJSON["lat"],
			let longitude = coordinatesJSON["lng"]
		else {
			throw SerializationError.missing("coordinates")
		}

		let coordinates = (latitude, longitude)
		guard case (-90...90, -180...180) = coordinates else {
			throw SerializationError.invalid("coordinates", coordinates)
		}

		// Extract and validate meals
		guard let mealsJSON = json["meals"] as? [String] else {
			throw SerializationError.missing("meals")
		}

		var meals: Set&lt;Meal&gt; = []
		for string in mealsJSON {

			guard let meal = Meal(rawValue: string) else {
				throw SerializationError.invalid("meals", string)
			}

			meals.insert(meal)
		}

		// Initialize properties
		self.name = name
		self.coordinates = coordinates
		self.meals = meals

	}

}</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>using System.Text.Json;

public sealed class CsEntity {
	public string Id { get; set; } = String.Empty;
	public IEnumerable&lt;OtherCsEntity&gt;? OtherProp { get; set; }
}

var jsonSerializerOptions = new JsonSerializerOptions {
	PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
	IncludeFields = true
};

var fromJson = await JsonSerializer
	.DeserializeAsync&lt;CsEntity&gt;(
		responseString,
		jsonSerializerOptions
	);

var fromJsonList = JsonSerializer
	.Deserialize&lt;IEnumerable&lt;CsEntity&gt;&gt;(
		responseString,
		jsonSerializerOptions
	);</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>const fromJson = JSON.parse('{ "a": "b" }');
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>



<!--
<section>

<h2 id='templateid'>Template</h2>

<div class='comparison'>

<div class='codeblock'>
<p>Rust</p>
<code class='rust'
>
</code
>
</div>

<div class='codeblock'>
<p>Go</p>
<code class='go'
>
</code
>
</div>

<div class='codeblock'>
<p>C++</p>
<code class='cpp'
>
</code
>
</div>

<div class='codeblock'>
<p>Objective-C</p>
<code class='objectivec'
>
</code
>
</div>

<div class='codeblock'>
<p>Swift</p>
<code class='swift'
>
</code
>
</div>

<div class='codeblock'>
<p>Kotlin</p>
<code class='kotlin'
>
</code
>
</div>

<div class='codeblock'>
<p>Java</p>
<code class='java'
>
</code
>
</div>

<div class='codeblock'>
<p>C#</p>
<code class='cs'
>
</code
>
</div>

<div class='codeblock'>
<p>JavaScript</p>
<code class='javascript'
>
</code
>
</div>

<div class='codeblock'>
<p>ActionScript</p>
<code class='actionscript'
>
</code
>
</div>

<div class='codeblock'>
<p>TypeScript</p>
<code class='typescript'
>
</code
>
</div>

<div class='codeblock'>
<p>Dart</p>
<code class='dart'
>
</code
>
</div>

<div class='codeblock'>
<p>Python</p>
<code class='python'
>
</code
>
</div>

<div class='codeblock'>
<p>PHP</p>
<code class='php'
>
</code
>
</div>

<div class='codeblock'>
<p><abbr title='Visual Basic for Applications'>VBA</abbr> / <abbr title='Visual Basic 6'>VB6</abbr></p>
<code class='visualbasic'
></code
>
</div>

<div class='codeblock'>
<p>Ada</p>
<code class='ada'
></code
>
</div>

<div class='codeblock'>
<p>Object Pascal (Delphi)</p>
<code class='objectpascal'
></code
>
</div>

<div class='codeblock'>
<p>Ruby</p>
<code class='ruby'
></code
>
</div>

<div class='codeblock'>
<p>Smalltalk</p>
<code class='smalltalk'
></code
>
</div>

<div class='codeblock'>
<p>Common Lisp</p>
<code class='commonlisp'
></code
>
</div>

<div class='codeblock'>
<p>Haskell</p>
<code class='haskell'
></code
>
</div>

<div class='codeblock'>
<p>Web Assembly text format (AssemblyScript) - main.wasm</p>
<code class='webassembly'
></code
>
</div>

<div class='codeblock'>
<p>LLVM <abbr title='Intermediate representation'>IR</abbr></p>
<code class='llvm'
></code
>
</div>

<div class='codeblock'>
<p>Assembly</p>
<code class='assembly'
></code
>
</div>

</div>

<ol>
	<li>a</li>
</ol>

<p>A</p>

</section>
-->

<!--
swift lazy e guard

rust loop {}
rust string types, for instance br##"..."##, my parser does not support this
https://doc.rust-lang.org/reference/tokens.html
https://doc.rust-lang.org/book/appendix-02-operators.html#non-operator-symbols

Cast um tipo para string chama tostring?

unions?
Observar objetos KVO, notification center, reactive, etc..
observer ou eventos customizados
exceções customizadas
Eventos e setTimeout

match

c# explicit e implicit keywords
Dictionary / Map
ExpandoObject
https://docs.microsoft.com/en-us/dotnet/api/system.dynamic.expandoobject?redirectedfrom=MSDN&view=netcore-3.1

macros

conversão de números com ? : e com += ver https://blog.jooq.org/2014/11/03/10-things-you-didnt-know-about-java/

default parameter values, compare strings, valores não iniciados, type erasure,
linq, traits, if (a = 1) if let while let, macros,
floata == floatb ou Math.abs(floata - floatb) < 0.001

pointer to references, pointer to pointer, cast pointers to references

GUI
Dependency injection

Certificação
Overload pode ter visibilidade diferente?
Operator precedence mess?

RISC
-->

<script type='module' src='../../compartilhado/js/utils.js'></script>
<script type='module' src='../../compartilhado/js/index.js'></script>
<script type='module' src='../../compartilhado/js/highlighter.js'></script>
<script type='module' src='../../compartilhado/js/highlightEnhancer.js'></script>
<script type='module' src='js/home.js'></script>

</body>
</html>