<!DOCTYPE html>
<html lang="pt-br">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Código fonte de geradores e validadores de inscrição estadual, cpf e cnpj</title>
	<link rel='stylesheet' href='../../compartilhado/css/main.css' />
	<script type='module' src='../../compartilhado/js/utils.js'></script>
	<script type='module' src='../../compartilhado/js/index.js'></script>
	<script type='module' src='../../compartilhado/js/highlighter.js'></script>
	<script type='module' src='../../compartilhado/js/highlightEnhancer.js'></script>
	<script type='module' src='js/home.js'></script>
</head>
<body>

	<h1>Código fonte de geradores de inscrição estadual, cpf e cnpj</h1>
	<p>
		Para validar geralmente recorremos a <a href='http://www.sintegra.gov.br/download.html' rel='external nofollow'>dll do sintegra (DLL3.zip)</a> que é apenas 32 bits, mas se precisarmos de uma biblioteca 64 bits ou quando queremos gerar dados em massa para testes?
		Geradores online podem funcionar bem para testes únicos, ou individuais, mas para testes automatizados ou geração de arquivos é bom ter o código fonte, ou uma dll compatível com C.
		Já que pela internet achei basicamente códigos em Pascal ou Basic, segue o código fonte dos geradores de inscrição estadual em linguagens mais portáteis por assim dizer.
		Eu também criei <a href='https://addons.mozilla.org/en-US/firefox/addon/gerador-cpf-cnpj-ie/'>gerador para Firefox</a> que cria números com um clique apenas.
	</p>

	<p>
		Vou postando a lista a medida que converter os códigos, mas basicamente até agora, a lógica é basicamente a mesma.
		Alteramos apenas o comprimento de cada formato, e a sequência de números pelos quais multiplicamos para obter os dígitos verificadores.
	</p>



	<section>
		<h2>Índice</h2>
		<nav id='indice'></nav>
	</section>



	<section>

		<h2 id='ie'>Inscrição Estadual</h2>

		<h3 id='iepr'>Paraná</h3>

		<div class='comparison'>

			<div class='codeblock'>
				<p>main.rs</p>
				<code class='rust'
></code
				>
			</div>

			<div class='codeblock'>
				<p>main.cpp</p>
				<code class='cpp'
></code
				>
			</div>

			<div class='codeblock'>
				<p>Gerador</p>
				<code class='cs'
>public string GerarInscricaoEstadualPR() {

	int soma = 0;
	int resto = 0;
	int[] <strong>multiplicadores</strong> = new int[] { <strong>4, 3, 2, 7, 6, 5, 4, 3, 2</strong> };
	var random = new Random();
	string <strong>semente</strong> = random.Next(1, <strong>99999999</strong>).ToString()<strong>.PadLeft(8</strong>, '0');

	for (var <strong>i = 1</strong>; i &lt; multiplicadores.Count(); i++) {
		soma += int.Parse(semente[<strong>i - 1</strong>].ToString()) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;
	soma = 0;

	for (var <strong>i = 0</strong>; i &lt; multiplicadores.Count(); i++) {
		soma += int.Parse(semente[<strong>i</strong>].ToString()) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;

	return semente;

}</code
				>

				<p>Validador</p>
				<code class='cs'
>public bool ValidarInscricaoEstadualParana(string inscricaoEstadual) {
	return <strong>ValidarInscricaoEstadualModulo11</strong>(
		inscricaoEstadual,
		new int[] { <strong>4, 3, 2, 7, 6, 5, 4, 3, 2</strong> },
		2,
		true
	);
}

private bool ValidarInscricaoEstadualModulo11(
	string inscricaoEstadual,
	int[] multiplicadores,
	int digitosVerificadores = 1,
	bool padLeft = false
	) {

	if ((inscricaoEstadual.Length - 1) &gt; multiplicadores.Length) {
		return false;
	}

	if (!somenteNumeros.IsMatch(inscricaoEstadual)) {
		return false;
	}

	var inscricaoEstadualPadding = inscricaoEstadual.PadLeft(
		multiplicadores.Length + 1,
		'0'
	);

	var semente = inscricaoEstadualPadding.Substring(
		0,
		inscricaoEstadualPadding.Length - digitosVerificadores
	);

	// dígitos verificadores

	int soma = 0;

	for (var i = 0; i &lt; digitosVerificadores; i++) {

		soma = SomarProdutos(
			semente,
			multiplicadores
		);

		semente += CalculoModulo11(soma);

	}

	if (semente == inscricaoEstadualPadding) {
		return true;
	}

	return false;

}</code
				>

			</div>

			<div class='codeblock'>
					<p>main.js</p>
					<code class='javascript'
>function gerarInscricaoEstadualPR() {

	let soma = 0;
	let resto = 0;
	const <strong>multiplicadores</strong> = [ <strong>4, 3, 2, 7, 6, 5, 4, 3, 2</strong> ];
	let <strong>semente</strong> = let semente = Math.round(Math.random() <strong>* 100000000</strong>).toString();
	semente = semente<strong>.substr(0, 8)</strong>;

	for (let <strong>i = 1</strong>; i &lt; multiplicadores.length; i++) {
		soma += parseInt(semente[<strong>i - 1</strong>], 10) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;
	soma = 0;

	for (let <strong>i = 0</strong>; i &lt; multiplicadores.length; i++) {
		soma += parseInt(semente[<strong>i</strong>], 10) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;

	return semente;

}</code
				>
			</div>

		</div>

	</section>



	<section>

		<h2 id='cpf'><abbr title='Cdastro de Pessoa Física'>CPF</abbr></h2>

		<p>Número fácil de lembrar: 000.000.001-91</p>

		<div class='comparison'>

			<div class='codeblock'>
				<p>main.rs</p>
				<code class='rust'
>


extern crate rand;

use rand::Rng;

fn gerarCpf() -&gt; String {

	let mut soma:u32 = 0; // ver depois como usar u8 e o vetor com u8 tb
	let mut resto:u32;
	let <strong>multiplicadores</strong>:[u32;10] = [ <strong>11, 10, 9, 8, 7, 6, 5, 4, 3, 2</strong> ];

	let <strong>semente</strong> = rand::thread_rng().gen_range(1, <strong>999999999</strong>);
	let mut sementeString = format!("{:09}", semente);
	let mut sementeVetor:Vec&lt;_&gt; = sementeString
		.chars()
		.map(|caractere| caractere.to_digit(10).unwrap())
		.collect();

	for i in <strong>1</strong>..10 {
		soma += sementeVetor[<strong>i - 1</strong>] * multiplicadores[i];
	}

	resto = soma % 11;
	if resto &lt; 2 {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	sementeVetor.push(resto);
	soma = 0;

	for i in <strong>0</strong>..10 {
		soma += sementeVetor[<strong>i</strong>] * multiplicadores[i];
	}

	resto = soma % 11;

	if resto &lt; 2 {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	sementeVetor.push(resto);
	sementeString = sementeVetor
		.into_iter()
		.map(|numero| numero.to_string())
		.collect();

	return sementeString;

}</code
				>
			</div>

			<div class='codeblock'>
				<p>main.cpp</p>
				<code class='cpp'
>#include &lt;random&gt;
#include &lt;sstream&gt; // std::ostringstream
#include &lt;string&gt; // std::stoi
#include &lt;iomanip&gt; // std::setfill
#include &lt;vector&gt; // std::vector
#include &lt;array&gt; // std::array

std::string gerarCpf() {

	int soma {0};
	int resto {0};
	const std::array&lt;int, 10&gt; <strong>multiplicadores</strong> = { <strong>11, 10, 9, 8, 7, 6, 5, 4, 3, 2</strong> };

	std::random_device randomDevice;
	std::default_random_engine generator(randomDevice());
	std::uniform_int_distribution&lt;int&gt; distribution(1, <strong>999999999</strong>);
	auto <strong>semente</strong> = distribution(generator);

	std::ostringstream outputStringStream;
	outputStringStream &lt;&lt; std::right &lt;&lt; std::setfill('0') &lt;&lt; std::setw(9) &lt;&lt; semente;

	auto sementeString{outputStringStream.str()};

	std::vector&lt;char&gt; sementeVetor(sementeString.begin(), sementeString.end());

	// calcular os dígitos verificadores

	int sementeInt; // conversão de char para int (- '0')

	for (int <strong>i = 1</strong>; i &lt; multiplicadores.size(); ++i) {
		sementeInt = sementeVetor[<strong>i - 1</strong>] - '0';
		soma += (sementeInt * multiplicadores[i]);
	}

	resto = (soma % 11);

	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	outputStringStream &lt;&lt; resto;
	sementeVetor.push_back(resto + '0'); // conversão de int para char (+ '0')
	soma = 0;

	for (int <strong>i = 0</strong>; i &lt; multiplicadores.size(); ++i) {
		sementeInt = sementeVetor[<strong>i</strong>] - '0';
		soma += (sementeInt * multiplicadores[i]);
	}

	resto = (soma % 11);

	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	outputStringStream &lt;&lt; resto;

	return outputStringStream.str();

}</code
				>
			</div>

			<div class='codeblock'>
				<p>Program.cs</p>
				<code class='cs'
>






public string GerarCpf() {

	int soma = 0;
	int resto = 0;
	int[] <strong>multiplicadores</strong> = new int[10] { <strong>11, 10, 9, 8, 7, 6, 5, 4, 3, 2</strong> };
	string semente;

	var random = new Random();

	do {
		<strong>semente</strong> = random.Next(1, <strong>999999999</strong>).ToString()<strong>.PadLeft(9</strong>, '0');
	} while (
		semente == "000000000"
		|| semente == "111111111"
		|| semente == "222222222"
		|| semente == "333333333"
		|| semente == "444444444"
		|| semente == "555555555"
		|| semente == "666666666"
		|| semente == "777777777"
		|| semente == "888888888"
		|| semente == "999999999"
	);

	for (int <strong>i = 1</strong>; i &lt; multiplicadores.Count(); i++) {
		soma += int.Parse(semente[<strong>i - 1</strong>].ToString()) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;
	soma = 0;

	for (int <strong>i = 0</strong>; i &lt; multiplicadores.Count(); i++) {
		soma += int.Parse(semente[<strong>i</strong>].ToString()) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente = semente + resto;

	return semente;

}</code
					>
			</div>

			<div class='codeblock'>
					<p>main.js</p>
					<code class='javascript'
>






function gerarCpf() {

	let soma = 0;
	let resto = 0;
	const <strong>multiplicadores</strong> = [ <strong>11, 10, 9, 8, 7, 6, 5, 4, 3, 2</strong> ];
	let semente = '';

	do {
		let <strong>sementeFloat</strong> = Math.random() * 1000000000;
		while(sementeFloat &lt; <strong>99999999</strong>) {
			semente += '0';
			sementeFloat *= 10;
		}
		semente += sementeFloat.toString();
	} while (
		semente === '000000000'
		|| semente === '111111111'
		|| semente === '222222222'
		|| semente === '333333333'
		|| semente === '444444444'
		|| semente === '555555555'
		|| semente === '666666666'
		|| semente === '777777777'
		|| semente === '888888888'
		|| semente === '999999999'
	);

	semente = semente.substr(0, 9);

	for (let <strong>i = 1</strong>; i &lt; multiplicadores.length; i++) {
		soma += parseInt(semente[<strong>i - 1</strong>], 10) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;
	soma = 0;

	for (let <strong>i = 0</strong>; i &lt; multiplicadores.length; i++) {
		soma += parseInt(semente[<strong>i</strong>], 10) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;

	return semente;

}</code
				>
			</div>

		</div>

	</section>



	<section>

		<h2 id='cnpj'><abbr title='Cadastro Nacional de Pessoa Jurídica'>CNPJ</abbr></h2>

		<p>Número fácil de lembrar: 000.000.001-0001/63</p>

		<div class='comparison'>

			<div class='codeblock'>
				<p>main.rs</p>
				<code class='rust'
></code
				>
			</div>

			<div class='codeblock'>
				<p>main.cpp</p>
				<code class='cpp'
></code
				>
			</div>

			<div class='codeblock'>
				<p>Program.cs</p>
				<code class='cs'
>public string GerarCnpj() {

	int soma = 0;
	int resto = 0;
	int[] <strong>multiplicadores</strong> = new int[] { <strong>6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2</strong> };
	string raiz;
	string sufixo;

	var random = new Random();

	do {
		<strong>raiz</strong> = random.Next(1, <strong>99999999</strong>).ToString()<strong>.PadLeft(8</strong>, '0');
		<strong>sufixo</strong> = random.Next(1, <strong>9999</strong>).ToString()<strong>.PadLeft(4</strong>, '0');
	} while (
		(raiz == "00000000" &amp;&amp; sufixo == "0000")
		|| (raiz == "11111111" &amp;&amp; sufixo == "1111")
		|| (raiz == "22222222" &amp;&amp; sufixo == "2222")
		|| (raiz == "33333333" &amp;&amp; sufixo == "3333")
		|| (raiz == "44444444" &amp;&amp; sufixo == "4444")
		|| (raiz == "55555555" &amp;&amp; sufixo == "5555")
		|| (raiz == "66666666" &amp;&amp; sufixo == "6666")
		|| (raiz == "77777777" &amp;&amp; sufixo == "7777")
		|| (raiz == "88888888" &amp;&amp; sufixo == "8888")
		|| (raiz == "99999999" &amp;&amp; sufixo == "9999")
	);

	string semente = raiz + sufixo;

	for (int <strong>i = 1</strong>; i &lt; multiplicadores.Count(); i++) {
		soma += int.Parse(semente[<strong>i - 1</strong>].ToString()) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;
	soma = 0;

	for (int <strong>i = 0</strong>; i &lt; multiplicadores.Count(); i++) {
		soma += int.Parse(semente[<strong>i</strong>].ToString()) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;

	return semente;

}</code
					>
			</div>

			<div class='codeblock'>
					<p>main.js</p>
					<code class='javascript'
>function gerarCnpj() {

	let soma = 0;
	let resto = 0;
	const <strong>multiplicadores</strong> = [ <strong>6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2</strong> ];
	let semente;
	let sementeRaiz = '';
	let sementeSufixo = '';

	do {

		let <strong>sementeFloatRaiz</strong> = Math.random() * 100000000;
		while(sementeFloatRaiz &lt; <strong>9999999</strong>) {
			sementeRaiz += '0';
			sementeFloatRaiz *= 10; // TODO correção para zeros à esquerda que irão diminuir a string, melhorar isso
		}
		sementeRaiz += sementeFloatRaiz.toString();

		let <strong>sementeFloatSufixo</strong> = Math.random() * 10000;
		while(sementeFloatSufixo &lt; <strong>999</strong>) {
			sementeSufixo += '0';
			sementeFloatSufixo *= 10;
		}
		sementeSufixo += sementeFloatSufixo.toString();

	} while (
		sementeRaiz === '000000000' && sementeSufixo === '0000'
		|| sementeRaiz === '111111111' && sementeSufixo === '1111'
		|| sementeRaiz === '222222222' && sementeSufixo === '2222'
		|| sementeRaiz === '333333333' && sementeSufixo === '3333'
		|| sementeRaiz === '444444444' && sementeSufixo === '4444'
		|| sementeRaiz === '555555555' && sementeSufixo === '5555'
		|| sementeRaiz === '666666666' && sementeSufixo === '6666'
		|| sementeRaiz === '777777777' && sementeSufixo === '7777'
		|| sementeRaiz === '888888888' && sementeSufixo === '8888'
		|| sementeRaiz === '999999999' && sementeSufixo === '9999'
	);

	semente = sementeRaiz.substr(0, 8) + sementeSufixo.substr(0, 4);

	for (let <strong>i = 1</strong>; i &lt; multiplicadores.length; i++) {
		soma += parseInt(semente[<strong>i - 1</strong>], 10) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;
	soma = 0;

	for (let <strong>i = 0</strong>; i &lt; multiplicadores.length; i++) {
		soma += parseInt(semente[<strong>i</strong>], 10) * multiplicadores[i];
	}

	resto = soma % 11;
	if (resto &lt; 2) {
		resto = 0;
	} else {
		resto = 11 - resto;
	}

	semente += resto;

	return semente;

}</code
				>
			</div>

		</div>

	</section>



</body>
</html>